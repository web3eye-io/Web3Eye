// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: web3eye/nftmeta/v1/orderpair/orderpair.proto

package orderpair

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateOrderPair(ctx context.Context, in *CreateOrderPairRequest, opts ...grpc.CallOption) (*CreateOrderPairResponse, error)
	UpsertOrderPair(ctx context.Context, in *UpsertOrderPairRequest, opts ...grpc.CallOption) (*UpsertOrderPairResponse, error)
	CreateOrderPairs(ctx context.Context, in *CreateOrderPairsRequest, opts ...grpc.CallOption) (*CreateOrderPairsResponse, error)
	UpsertOrderPairs(ctx context.Context, in *UpsertOrderPairsRequest, opts ...grpc.CallOption) (*UpsertOrderPairsResponse, error)
	UpdateOrderPair(ctx context.Context, in *UpdateOrderPairRequest, opts ...grpc.CallOption) (*UpdateOrderPairResponse, error)
	GetOrderPair(ctx context.Context, in *GetOrderPairRequest, opts ...grpc.CallOption) (*GetOrderPairResponse, error)
	GetOrderPairOnly(ctx context.Context, in *GetOrderPairOnlyRequest, opts ...grpc.CallOption) (*GetOrderPairOnlyResponse, error)
	GetOrderPairs(ctx context.Context, in *GetOrderPairsRequest, opts ...grpc.CallOption) (*GetOrderPairsResponse, error)
	ExistOrderPair(ctx context.Context, in *ExistOrderPairRequest, opts ...grpc.CallOption) (*ExistOrderPairResponse, error)
	ExistOrderPairConds(ctx context.Context, in *ExistOrderPairCondsRequest, opts ...grpc.CallOption) (*ExistOrderPairCondsResponse, error)
	CountOrderPairs(ctx context.Context, in *CountOrderPairsRequest, opts ...grpc.CallOption) (*CountOrderPairsResponse, error)
	DeleteOrderPair(ctx context.Context, in *DeleteOrderPairRequest, opts ...grpc.CallOption) (*DeleteOrderPairResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateOrderPair(ctx context.Context, in *CreateOrderPairRequest, opts ...grpc.CallOption) (*CreateOrderPairResponse, error) {
	out := new(CreateOrderPairResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/CreateOrderPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpsertOrderPair(ctx context.Context, in *UpsertOrderPairRequest, opts ...grpc.CallOption) (*UpsertOrderPairResponse, error) {
	out := new(UpsertOrderPairResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/UpsertOrderPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateOrderPairs(ctx context.Context, in *CreateOrderPairsRequest, opts ...grpc.CallOption) (*CreateOrderPairsResponse, error) {
	out := new(CreateOrderPairsResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/CreateOrderPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpsertOrderPairs(ctx context.Context, in *UpsertOrderPairsRequest, opts ...grpc.CallOption) (*UpsertOrderPairsResponse, error) {
	out := new(UpsertOrderPairsResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/UpsertOrderPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateOrderPair(ctx context.Context, in *UpdateOrderPairRequest, opts ...grpc.CallOption) (*UpdateOrderPairResponse, error) {
	out := new(UpdateOrderPairResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/UpdateOrderPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderPair(ctx context.Context, in *GetOrderPairRequest, opts ...grpc.CallOption) (*GetOrderPairResponse, error) {
	out := new(GetOrderPairResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/GetOrderPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderPairOnly(ctx context.Context, in *GetOrderPairOnlyRequest, opts ...grpc.CallOption) (*GetOrderPairOnlyResponse, error) {
	out := new(GetOrderPairOnlyResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/GetOrderPairOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderPairs(ctx context.Context, in *GetOrderPairsRequest, opts ...grpc.CallOption) (*GetOrderPairsResponse, error) {
	out := new(GetOrderPairsResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/GetOrderPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOrderPair(ctx context.Context, in *ExistOrderPairRequest, opts ...grpc.CallOption) (*ExistOrderPairResponse, error) {
	out := new(ExistOrderPairResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/ExistOrderPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOrderPairConds(ctx context.Context, in *ExistOrderPairCondsRequest, opts ...grpc.CallOption) (*ExistOrderPairCondsResponse, error) {
	out := new(ExistOrderPairCondsResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/ExistOrderPairConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountOrderPairs(ctx context.Context, in *CountOrderPairsRequest, opts ...grpc.CallOption) (*CountOrderPairsResponse, error) {
	out := new(CountOrderPairsResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/CountOrderPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteOrderPair(ctx context.Context, in *DeleteOrderPairRequest, opts ...grpc.CallOption) (*DeleteOrderPairResponse, error) {
	out := new(DeleteOrderPairResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.orderpair.Manager/DeleteOrderPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateOrderPair(context.Context, *CreateOrderPairRequest) (*CreateOrderPairResponse, error)
	UpsertOrderPair(context.Context, *UpsertOrderPairRequest) (*UpsertOrderPairResponse, error)
	CreateOrderPairs(context.Context, *CreateOrderPairsRequest) (*CreateOrderPairsResponse, error)
	UpsertOrderPairs(context.Context, *UpsertOrderPairsRequest) (*UpsertOrderPairsResponse, error)
	UpdateOrderPair(context.Context, *UpdateOrderPairRequest) (*UpdateOrderPairResponse, error)
	GetOrderPair(context.Context, *GetOrderPairRequest) (*GetOrderPairResponse, error)
	GetOrderPairOnly(context.Context, *GetOrderPairOnlyRequest) (*GetOrderPairOnlyResponse, error)
	GetOrderPairs(context.Context, *GetOrderPairsRequest) (*GetOrderPairsResponse, error)
	ExistOrderPair(context.Context, *ExistOrderPairRequest) (*ExistOrderPairResponse, error)
	ExistOrderPairConds(context.Context, *ExistOrderPairCondsRequest) (*ExistOrderPairCondsResponse, error)
	CountOrderPairs(context.Context, *CountOrderPairsRequest) (*CountOrderPairsResponse, error)
	DeleteOrderPair(context.Context, *DeleteOrderPairRequest) (*DeleteOrderPairResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateOrderPair(context.Context, *CreateOrderPairRequest) (*CreateOrderPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPair not implemented")
}
func (UnimplementedManagerServer) UpsertOrderPair(context.Context, *UpsertOrderPairRequest) (*UpsertOrderPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertOrderPair not implemented")
}
func (UnimplementedManagerServer) CreateOrderPairs(context.Context, *CreateOrderPairsRequest) (*CreateOrderPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPairs not implemented")
}
func (UnimplementedManagerServer) UpsertOrderPairs(context.Context, *UpsertOrderPairsRequest) (*UpsertOrderPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertOrderPairs not implemented")
}
func (UnimplementedManagerServer) UpdateOrderPair(context.Context, *UpdateOrderPairRequest) (*UpdateOrderPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderPair not implemented")
}
func (UnimplementedManagerServer) GetOrderPair(context.Context, *GetOrderPairRequest) (*GetOrderPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPair not implemented")
}
func (UnimplementedManagerServer) GetOrderPairOnly(context.Context, *GetOrderPairOnlyRequest) (*GetOrderPairOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPairOnly not implemented")
}
func (UnimplementedManagerServer) GetOrderPairs(context.Context, *GetOrderPairsRequest) (*GetOrderPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPairs not implemented")
}
func (UnimplementedManagerServer) ExistOrderPair(context.Context, *ExistOrderPairRequest) (*ExistOrderPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderPair not implemented")
}
func (UnimplementedManagerServer) ExistOrderPairConds(context.Context, *ExistOrderPairCondsRequest) (*ExistOrderPairCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderPairConds not implemented")
}
func (UnimplementedManagerServer) CountOrderPairs(context.Context, *CountOrderPairsRequest) (*CountOrderPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrderPairs not implemented")
}
func (UnimplementedManagerServer) DeleteOrderPair(context.Context, *DeleteOrderPairRequest) (*DeleteOrderPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderPair not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateOrderPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOrderPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/CreateOrderPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOrderPair(ctx, req.(*CreateOrderPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpsertOrderPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertOrderPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpsertOrderPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/UpsertOrderPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpsertOrderPair(ctx, req.(*UpsertOrderPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateOrderPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOrderPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/CreateOrderPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOrderPairs(ctx, req.(*CreateOrderPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpsertOrderPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertOrderPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpsertOrderPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/UpsertOrderPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpsertOrderPairs(ctx, req.(*UpsertOrderPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateOrderPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateOrderPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/UpdateOrderPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateOrderPair(ctx, req.(*UpdateOrderPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/GetOrderPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderPair(ctx, req.(*GetOrderPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderPairOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPairOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderPairOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/GetOrderPairOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderPairOnly(ctx, req.(*GetOrderPairOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/GetOrderPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderPairs(ctx, req.(*GetOrderPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOrderPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOrderPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/ExistOrderPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOrderPair(ctx, req.(*ExistOrderPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOrderPairConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderPairCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOrderPairConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/ExistOrderPairConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOrderPairConds(ctx, req.(*ExistOrderPairCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountOrderPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountOrderPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountOrderPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/CountOrderPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountOrderPairs(ctx, req.(*CountOrderPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteOrderPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteOrderPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.orderpair.Manager/DeleteOrderPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteOrderPair(ctx, req.(*DeleteOrderPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nftmeta.v1.orderpair.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderPair",
			Handler:    _Manager_CreateOrderPair_Handler,
		},
		{
			MethodName: "UpsertOrderPair",
			Handler:    _Manager_UpsertOrderPair_Handler,
		},
		{
			MethodName: "CreateOrderPairs",
			Handler:    _Manager_CreateOrderPairs_Handler,
		},
		{
			MethodName: "UpsertOrderPairs",
			Handler:    _Manager_UpsertOrderPairs_Handler,
		},
		{
			MethodName: "UpdateOrderPair",
			Handler:    _Manager_UpdateOrderPair_Handler,
		},
		{
			MethodName: "GetOrderPair",
			Handler:    _Manager_GetOrderPair_Handler,
		},
		{
			MethodName: "GetOrderPairOnly",
			Handler:    _Manager_GetOrderPairOnly_Handler,
		},
		{
			MethodName: "GetOrderPairs",
			Handler:    _Manager_GetOrderPairs_Handler,
		},
		{
			MethodName: "ExistOrderPair",
			Handler:    _Manager_ExistOrderPair_Handler,
		},
		{
			MethodName: "ExistOrderPairConds",
			Handler:    _Manager_ExistOrderPairConds_Handler,
		},
		{
			MethodName: "CountOrderPairs",
			Handler:    _Manager_CountOrderPairs_Handler,
		},
		{
			MethodName: "DeleteOrderPair",
			Handler:    _Manager_DeleteOrderPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3eye/nftmeta/v1/orderpair/orderpair.proto",
}
