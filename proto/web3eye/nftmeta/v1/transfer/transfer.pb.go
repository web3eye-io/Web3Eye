// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: web3eye/nftmeta/v1/transfer/transfer.proto

package transfer

import (
	web3eye "github.com/web3eye-io/Web3Eye/proto/web3eye"
	v1 "github.com/web3eye-io/Web3Eye/proto/web3eye/basetype/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *uint32       `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *string       `protobuf:"bytes,11,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	ChainType   *v1.ChainType `protobuf:"varint,20,opt,name=ChainType,proto3,enum=chain.ChainType,oneof" json:"ChainType,omitempty"`
	ChainID     *string       `protobuf:"bytes,30,opt,name=ChainID,proto3,oneof" json:"ChainID,omitempty"`
	Contract    *string       `protobuf:"bytes,40,opt,name=Contract,proto3,oneof" json:"Contract,omitempty"`
	TokenType   *v1.TokenType `protobuf:"varint,50,opt,name=TokenType,proto3,enum=chain.TokenType,oneof" json:"TokenType,omitempty"`
	TokenID     *string       `protobuf:"bytes,60,opt,name=TokenID,proto3,oneof" json:"TokenID,omitempty"`
	From        *string       `protobuf:"bytes,70,opt,name=From,proto3,oneof" json:"From,omitempty"`
	To          *string       `protobuf:"bytes,80,opt,name=To,proto3,oneof" json:"To,omitempty"`
	Amount      *uint64       `protobuf:"varint,90,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	BlockNumber *uint64       `protobuf:"varint,100,opt,name=BlockNumber,proto3,oneof" json:"BlockNumber,omitempty"`
	TxHash      *string       `protobuf:"bytes,110,opt,name=TxHash,proto3,oneof" json:"TxHash,omitempty"`
	BlockHash   *string       `protobuf:"bytes,120,opt,name=BlockHash,proto3,oneof" json:"BlockHash,omitempty"`
	TxTime      *uint32       `protobuf:"varint,130,opt,name=TxTime,proto3,oneof" json:"TxTime,omitempty"`
	Remark      *string       `protobuf:"bytes,140,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *TransferReq) Reset() {
	*x = TransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReq) ProtoMessage() {}

func (x *TransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReq.ProtoReflect.Descriptor instead.
func (*TransferReq) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *TransferReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *TransferReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *TransferReq) GetChainType() v1.ChainType {
	if x != nil && x.ChainType != nil {
		return *x.ChainType
	}
	return v1.ChainType(0)
}

func (x *TransferReq) GetChainID() string {
	if x != nil && x.ChainID != nil {
		return *x.ChainID
	}
	return ""
}

func (x *TransferReq) GetContract() string {
	if x != nil && x.Contract != nil {
		return *x.Contract
	}
	return ""
}

func (x *TransferReq) GetTokenType() v1.TokenType {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return v1.TokenType(0)
}

func (x *TransferReq) GetTokenID() string {
	if x != nil && x.TokenID != nil {
		return *x.TokenID
	}
	return ""
}

func (x *TransferReq) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *TransferReq) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *TransferReq) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TransferReq) GetBlockNumber() uint64 {
	if x != nil && x.BlockNumber != nil {
		return *x.BlockNumber
	}
	return 0
}

func (x *TransferReq) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *TransferReq) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *TransferReq) GetTxTime() uint32 {
	if x != nil && x.TxTime != nil {
		return *x.TxTime
	}
	return 0
}

func (x *TransferReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,11,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"chain_type"
	ChainTypeStr string       `protobuf:"bytes,20,opt,name=ChainTypeStr,proto3" json:"ChainTypeStr,omitempty" sql:"chain_type"`
	ChainType    v1.ChainType `protobuf:"varint,21,opt,name=ChainType,proto3,enum=chain.ChainType" json:"ChainType,omitempty"`
	// @inject_tag: sql:"chain_id"
	ChainID string `protobuf:"bytes,30,opt,name=ChainID,proto3" json:"ChainID,omitempty" sql:"chain_id"`
	// @inject_tag: sql:"contract"
	Contract string `protobuf:"bytes,40,opt,name=Contract,proto3" json:"Contract,omitempty" sql:"contract"`
	// @inject_tag: sql:"token_type"
	TokenTypeStr string       `protobuf:"bytes,50,opt,name=TokenTypeStr,proto3" json:"TokenTypeStr,omitempty" sql:"token_type"`
	TokenType    v1.TokenType `protobuf:"varint,51,opt,name=TokenType,proto3,enum=chain.TokenType" json:"TokenType,omitempty"`
	// @inject_tag: sql:"token_id"
	TokenID string `protobuf:"bytes,60,opt,name=TokenID,proto3" json:"TokenID,omitempty" sql:"token_id"`
	// @inject_tag: sql:"from"
	From string `protobuf:"bytes,70,opt,name=From,proto3" json:"From,omitempty" sql:"from"`
	// @inject_tag: sql:"to"
	To string `protobuf:"bytes,80,opt,name=To,proto3" json:"To,omitempty" sql:"to"`
	// @inject_tag: sql:"amount"
	Amount uint64 `protobuf:"varint,90,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"block_number"
	BlockNumber uint64 `protobuf:"varint,100,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty" sql:"block_number"`
	// @inject_tag: sql:"tx_hash"
	TxHash string `protobuf:"bytes,110,opt,name=TxHash,proto3" json:"TxHash,omitempty" sql:"tx_hash"`
	// @inject_tag: sql:"block_hash"
	BlockHash string `protobuf:"bytes,120,opt,name=BlockHash,proto3" json:"BlockHash,omitempty" sql:"block_hash"`
	// @inject_tag: sql:"tx_time"
	TxTime uint32 `protobuf:"varint,130,opt,name=TxTime,proto3" json:"TxTime,omitempty" sql:"tx_time"`
	// @inject_tag: sql:"remark"
	Remark string `protobuf:"bytes,140,opt,name=Remark,proto3" json:"Remark,omitempty" sql:"remark"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,150,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,260,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *Transfer) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Transfer) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Transfer) GetChainTypeStr() string {
	if x != nil {
		return x.ChainTypeStr
	}
	return ""
}

func (x *Transfer) GetChainType() v1.ChainType {
	if x != nil {
		return x.ChainType
	}
	return v1.ChainType(0)
}

func (x *Transfer) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *Transfer) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *Transfer) GetTokenTypeStr() string {
	if x != nil {
		return x.TokenTypeStr
	}
	return ""
}

func (x *Transfer) GetTokenType() v1.TokenType {
	if x != nil {
		return x.TokenType
	}
	return v1.TokenType(0)
}

func (x *Transfer) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *Transfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Transfer) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Transfer) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Transfer) GetTxTime() uint32 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

func (x *Transfer) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Transfer) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Transfer) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *web3eye.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID       *web3eye.StringVal      `protobuf:"bytes,11,opt,name=EntID,proto3" json:"EntID,omitempty"`
	ChainType   *web3eye.Uint32Val      `protobuf:"bytes,20,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	ChainID     *web3eye.StringVal      `protobuf:"bytes,30,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Contract    *web3eye.StringVal      `protobuf:"bytes,40,opt,name=Contract,proto3" json:"Contract,omitempty"`
	TokenType   *web3eye.Uint32Val      `protobuf:"bytes,50,opt,name=TokenType,proto3" json:"TokenType,omitempty"`
	TokenID     *web3eye.StringVal      `protobuf:"bytes,60,opt,name=TokenID,proto3" json:"TokenID,omitempty"`
	From        *web3eye.StringVal      `protobuf:"bytes,70,opt,name=From,proto3" json:"From,omitempty"`
	To          *web3eye.StringVal      `protobuf:"bytes,80,opt,name=To,proto3" json:"To,omitempty"`
	Amount      *web3eye.Uint64Val      `protobuf:"bytes,90,opt,name=Amount,proto3" json:"Amount,omitempty"`
	BlockNumber *web3eye.Uint64Val      `protobuf:"bytes,100,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	TxHash      *web3eye.StringVal      `protobuf:"bytes,110,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	BlockHash   *web3eye.StringVal      `protobuf:"bytes,120,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	TxTime      *web3eye.Uint32Val      `protobuf:"bytes,130,opt,name=TxTime,proto3" json:"TxTime,omitempty"`
	Remark      *web3eye.StringVal      `protobuf:"bytes,140,opt,name=Remark,proto3" json:"Remark,omitempty"`
	EntIDs      *web3eye.StringSliceVal `protobuf:"bytes,150,opt,name=EntIDs,proto3" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *web3eye.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *web3eye.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetChainType() *web3eye.Uint32Val {
	if x != nil {
		return x.ChainType
	}
	return nil
}

func (x *Conds) GetChainID() *web3eye.StringVal {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *Conds) GetContract() *web3eye.StringVal {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Conds) GetTokenType() *web3eye.Uint32Val {
	if x != nil {
		return x.TokenType
	}
	return nil
}

func (x *Conds) GetTokenID() *web3eye.StringVal {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *Conds) GetFrom() *web3eye.StringVal {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Conds) GetTo() *web3eye.StringVal {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Conds) GetAmount() *web3eye.Uint64Val {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Conds) GetBlockNumber() *web3eye.Uint64Val {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *Conds) GetTxHash() *web3eye.StringVal {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Conds) GetBlockHash() *web3eye.StringVal {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Conds) GetTxTime() *web3eye.Uint32Val {
	if x != nil {
		return x.TxTime
	}
	return nil
}

func (x *Conds) GetRemark() *web3eye.StringVal {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *Conds) GetEntIDs() *web3eye.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type CreateTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TransferReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTransferRequest) Reset() {
	*x = CreateTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequest) ProtoMessage() {}

func (x *CreateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTransferRequest) GetInfo() *TransferReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Transfer `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTransferResponse) Reset() {
	*x = CreateTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferResponse) ProtoMessage() {}

func (x *CreateTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferResponse.ProtoReflect.Descriptor instead.
func (*CreateTransferResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTransferResponse) GetInfo() *Transfer {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpsertTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TransferReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpsertTransferRequest) Reset() {
	*x = UpsertTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTransferRequest) ProtoMessage() {}

func (x *UpsertTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTransferRequest.ProtoReflect.Descriptor instead.
func (*UpsertTransferRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertTransferRequest) GetInfo() *TransferReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpsertTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Transfer `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpsertTransferResponse) Reset() {
	*x = UpsertTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTransferResponse) ProtoMessage() {}

func (x *UpsertTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTransferResponse.ProtoReflect.Descriptor instead.
func (*UpsertTransferResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertTransferResponse) GetInfo() *Transfer {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TransferReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTransfersRequest) Reset() {
	*x = CreateTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransfersRequest) ProtoMessage() {}

func (x *CreateTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransfersRequest.ProtoReflect.Descriptor instead.
func (*CreateTransfersRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTransfersRequest) GetInfos() []*TransferReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Transfer `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTransfersResponse) Reset() {
	*x = CreateTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransfersResponse) ProtoMessage() {}

func (x *CreateTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransfersResponse.ProtoReflect.Descriptor instead.
func (*CreateTransfersResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTransfersResponse) GetInfos() []*Transfer {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpsertTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TransferReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UpsertTransfersRequest) Reset() {
	*x = UpsertTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTransfersRequest) ProtoMessage() {}

func (x *UpsertTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTransfersRequest.ProtoReflect.Descriptor instead.
func (*UpsertTransfersRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *UpsertTransfersRequest) GetInfos() []*TransferReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpsertTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertTransfersResponse) Reset() {
	*x = UpsertTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTransfersResponse) ProtoMessage() {}

func (x *UpsertTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTransfersResponse.ProtoReflect.Descriptor instead.
func (*UpsertTransfersResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{10}
}

type GetTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTransferRequest) Reset() {
	*x = GetTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferRequest) ProtoMessage() {}

func (x *GetTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferRequest.ProtoReflect.Descriptor instead.
func (*GetTransferRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{11}
}

func (x *GetTransferRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Transfer `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTransferResponse) Reset() {
	*x = GetTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferResponse) ProtoMessage() {}

func (x *GetTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferResponse.ProtoReflect.Descriptor instead.
func (*GetTransferResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{12}
}

func (x *GetTransferResponse) GetInfo() *Transfer {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTransfersRequest) Reset() {
	*x = GetTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransfersRequest) ProtoMessage() {}

func (x *GetTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransfersRequest.ProtoReflect.Descriptor instead.
func (*GetTransfersRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{13}
}

func (x *GetTransfersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetTransfersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTransfersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Transfer `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTransfersResponse) Reset() {
	*x = GetTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransfersResponse) ProtoMessage() {}

func (x *GetTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransfersResponse.ProtoReflect.Descriptor instead.
func (*GetTransfersResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{14}
}

func (x *GetTransfersResponse) GetInfos() []*Transfer {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTransfersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetTransferOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetTransferOnlyRequest) Reset() {
	*x = GetTransferOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferOnlyRequest) ProtoMessage() {}

func (x *GetTransferOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetTransferOnlyRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{15}
}

func (x *GetTransferOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetTransferOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Transfer `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTransferOnlyResponse) Reset() {
	*x = GetTransferOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferOnlyResponse) ProtoMessage() {}

func (x *GetTransferOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetTransferOnlyResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{16}
}

func (x *GetTransferOnlyResponse) GetInfo() *Transfer {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TransferReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTransferRequest) Reset() {
	*x = UpdateTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferRequest) ProtoMessage() {}

func (x *UpdateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransferRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateTransferRequest) GetInfo() *TransferReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Transfer `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTransferResponse) Reset() {
	*x = UpdateTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferResponse) ProtoMessage() {}

func (x *UpdateTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferResponse.ProtoReflect.Descriptor instead.
func (*UpdateTransferResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTransferResponse) GetInfo() *Transfer {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistTransferRequest) Reset() {
	*x = ExistTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTransferRequest) ProtoMessage() {}

func (x *ExistTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTransferRequest.ProtoReflect.Descriptor instead.
func (*ExistTransferRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{19}
}

func (x *ExistTransferRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ExistTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistTransferResponse) Reset() {
	*x = ExistTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTransferResponse) ProtoMessage() {}

func (x *ExistTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTransferResponse.ProtoReflect.Descriptor instead.
func (*ExistTransferResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{20}
}

func (x *ExistTransferResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type ExistTransferCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistTransferCondsRequest) Reset() {
	*x = ExistTransferCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTransferCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTransferCondsRequest) ProtoMessage() {}

func (x *ExistTransferCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTransferCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistTransferCondsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{21}
}

func (x *ExistTransferCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistTransferCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistTransferCondsResponse) Reset() {
	*x = ExistTransferCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTransferCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTransferCondsResponse) ProtoMessage() {}

func (x *ExistTransferCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTransferCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistTransferCondsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{22}
}

func (x *ExistTransferCondsResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type DeleteTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteTransferRequest) Reset() {
	*x = DeleteTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransferRequest) ProtoMessage() {}

func (x *DeleteTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransferRequest.ProtoReflect.Descriptor instead.
func (*DeleteTransferRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteTransferRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Transfer `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTransferResponse) Reset() {
	*x = DeleteTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransferResponse) ProtoMessage() {}

func (x *DeleteTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransferResponse.ProtoReflect.Descriptor instead.
func (*DeleteTransferResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteTransferResponse) GetInfo() *Transfer {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_web3eye_nftmeta_v1_transfer_transfer_proto protoreflect.FileDescriptor

var file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x1a, 0x15, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65,
	0x79, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79,
	0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x05, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x02, 0x54, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x0a, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x54, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xac, 0x04, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a,
	0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x06, 0x54,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x54, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdd, 0x05, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65,
	0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x02, 0x54,
	0x6f, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x54, 0x6f, 0x12,
	0x2a, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2b, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x06, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62,
	0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x75, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x26, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2d, 0x0a, 0x15, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0xbb, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6b,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x0d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x29, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2e, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77,
	0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x57, 0x65, 0x62, 0x33, 0x45, 0x79,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescOnce sync.Once
	file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescData = file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDesc
)

func file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescGZIP() []byte {
	file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescOnce.Do(func() {
		file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescData)
	})
	return file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDescData
}

var file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_web3eye_nftmeta_v1_transfer_transfer_proto_goTypes = []interface{}{
	(*TransferReq)(nil),                // 0: nftmeta.v1.transfer.TransferReq
	(*Transfer)(nil),                   // 1: nftmeta.v1.transfer.Transfer
	(*Conds)(nil),                      // 2: nftmeta.v1.transfer.Conds
	(*CreateTransferRequest)(nil),      // 3: nftmeta.v1.transfer.CreateTransferRequest
	(*CreateTransferResponse)(nil),     // 4: nftmeta.v1.transfer.CreateTransferResponse
	(*UpsertTransferRequest)(nil),      // 5: nftmeta.v1.transfer.UpsertTransferRequest
	(*UpsertTransferResponse)(nil),     // 6: nftmeta.v1.transfer.UpsertTransferResponse
	(*CreateTransfersRequest)(nil),     // 7: nftmeta.v1.transfer.CreateTransfersRequest
	(*CreateTransfersResponse)(nil),    // 8: nftmeta.v1.transfer.CreateTransfersResponse
	(*UpsertTransfersRequest)(nil),     // 9: nftmeta.v1.transfer.UpsertTransfersRequest
	(*UpsertTransfersResponse)(nil),    // 10: nftmeta.v1.transfer.UpsertTransfersResponse
	(*GetTransferRequest)(nil),         // 11: nftmeta.v1.transfer.GetTransferRequest
	(*GetTransferResponse)(nil),        // 12: nftmeta.v1.transfer.GetTransferResponse
	(*GetTransfersRequest)(nil),        // 13: nftmeta.v1.transfer.GetTransfersRequest
	(*GetTransfersResponse)(nil),       // 14: nftmeta.v1.transfer.GetTransfersResponse
	(*GetTransferOnlyRequest)(nil),     // 15: nftmeta.v1.transfer.GetTransferOnlyRequest
	(*GetTransferOnlyResponse)(nil),    // 16: nftmeta.v1.transfer.GetTransferOnlyResponse
	(*UpdateTransferRequest)(nil),      // 17: nftmeta.v1.transfer.UpdateTransferRequest
	(*UpdateTransferResponse)(nil),     // 18: nftmeta.v1.transfer.UpdateTransferResponse
	(*ExistTransferRequest)(nil),       // 19: nftmeta.v1.transfer.ExistTransferRequest
	(*ExistTransferResponse)(nil),      // 20: nftmeta.v1.transfer.ExistTransferResponse
	(*ExistTransferCondsRequest)(nil),  // 21: nftmeta.v1.transfer.ExistTransferCondsRequest
	(*ExistTransferCondsResponse)(nil), // 22: nftmeta.v1.transfer.ExistTransferCondsResponse
	(*DeleteTransferRequest)(nil),      // 23: nftmeta.v1.transfer.DeleteTransferRequest
	(*DeleteTransferResponse)(nil),     // 24: nftmeta.v1.transfer.DeleteTransferResponse
	(v1.ChainType)(0),                  // 25: chain.ChainType
	(v1.TokenType)(0),                  // 26: chain.TokenType
	(*web3eye.Uint32Val)(nil),          // 27: web3eye.Uint32Val
	(*web3eye.StringVal)(nil),          // 28: web3eye.StringVal
	(*web3eye.Uint64Val)(nil),          // 29: web3eye.Uint64Val
	(*web3eye.StringSliceVal)(nil),     // 30: web3eye.StringSliceVal
}
var file_web3eye_nftmeta_v1_transfer_transfer_proto_depIdxs = []int32{
	25, // 0: nftmeta.v1.transfer.TransferReq.ChainType:type_name -> chain.ChainType
	26, // 1: nftmeta.v1.transfer.TransferReq.TokenType:type_name -> chain.TokenType
	25, // 2: nftmeta.v1.transfer.Transfer.ChainType:type_name -> chain.ChainType
	26, // 3: nftmeta.v1.transfer.Transfer.TokenType:type_name -> chain.TokenType
	27, // 4: nftmeta.v1.transfer.Conds.ID:type_name -> web3eye.Uint32Val
	28, // 5: nftmeta.v1.transfer.Conds.EntID:type_name -> web3eye.StringVal
	27, // 6: nftmeta.v1.transfer.Conds.ChainType:type_name -> web3eye.Uint32Val
	28, // 7: nftmeta.v1.transfer.Conds.ChainID:type_name -> web3eye.StringVal
	28, // 8: nftmeta.v1.transfer.Conds.Contract:type_name -> web3eye.StringVal
	27, // 9: nftmeta.v1.transfer.Conds.TokenType:type_name -> web3eye.Uint32Val
	28, // 10: nftmeta.v1.transfer.Conds.TokenID:type_name -> web3eye.StringVal
	28, // 11: nftmeta.v1.transfer.Conds.From:type_name -> web3eye.StringVal
	28, // 12: nftmeta.v1.transfer.Conds.To:type_name -> web3eye.StringVal
	29, // 13: nftmeta.v1.transfer.Conds.Amount:type_name -> web3eye.Uint64Val
	29, // 14: nftmeta.v1.transfer.Conds.BlockNumber:type_name -> web3eye.Uint64Val
	28, // 15: nftmeta.v1.transfer.Conds.TxHash:type_name -> web3eye.StringVal
	28, // 16: nftmeta.v1.transfer.Conds.BlockHash:type_name -> web3eye.StringVal
	27, // 17: nftmeta.v1.transfer.Conds.TxTime:type_name -> web3eye.Uint32Val
	28, // 18: nftmeta.v1.transfer.Conds.Remark:type_name -> web3eye.StringVal
	30, // 19: nftmeta.v1.transfer.Conds.EntIDs:type_name -> web3eye.StringSliceVal
	0,  // 20: nftmeta.v1.transfer.CreateTransferRequest.Info:type_name -> nftmeta.v1.transfer.TransferReq
	1,  // 21: nftmeta.v1.transfer.CreateTransferResponse.Info:type_name -> nftmeta.v1.transfer.Transfer
	0,  // 22: nftmeta.v1.transfer.UpsertTransferRequest.Info:type_name -> nftmeta.v1.transfer.TransferReq
	1,  // 23: nftmeta.v1.transfer.UpsertTransferResponse.Info:type_name -> nftmeta.v1.transfer.Transfer
	0,  // 24: nftmeta.v1.transfer.CreateTransfersRequest.Infos:type_name -> nftmeta.v1.transfer.TransferReq
	1,  // 25: nftmeta.v1.transfer.CreateTransfersResponse.Infos:type_name -> nftmeta.v1.transfer.Transfer
	0,  // 26: nftmeta.v1.transfer.UpsertTransfersRequest.Infos:type_name -> nftmeta.v1.transfer.TransferReq
	1,  // 27: nftmeta.v1.transfer.GetTransferResponse.Info:type_name -> nftmeta.v1.transfer.Transfer
	2,  // 28: nftmeta.v1.transfer.GetTransfersRequest.Conds:type_name -> nftmeta.v1.transfer.Conds
	1,  // 29: nftmeta.v1.transfer.GetTransfersResponse.Infos:type_name -> nftmeta.v1.transfer.Transfer
	2,  // 30: nftmeta.v1.transfer.GetTransferOnlyRequest.Conds:type_name -> nftmeta.v1.transfer.Conds
	1,  // 31: nftmeta.v1.transfer.GetTransferOnlyResponse.Info:type_name -> nftmeta.v1.transfer.Transfer
	0,  // 32: nftmeta.v1.transfer.UpdateTransferRequest.Info:type_name -> nftmeta.v1.transfer.TransferReq
	1,  // 33: nftmeta.v1.transfer.UpdateTransferResponse.Info:type_name -> nftmeta.v1.transfer.Transfer
	2,  // 34: nftmeta.v1.transfer.ExistTransferCondsRequest.Conds:type_name -> nftmeta.v1.transfer.Conds
	1,  // 35: nftmeta.v1.transfer.DeleteTransferResponse.Info:type_name -> nftmeta.v1.transfer.Transfer
	3,  // 36: nftmeta.v1.transfer.Manager.CreateTransfer:input_type -> nftmeta.v1.transfer.CreateTransferRequest
	5,  // 37: nftmeta.v1.transfer.Manager.UpsertTransfer:input_type -> nftmeta.v1.transfer.UpsertTransferRequest
	17, // 38: nftmeta.v1.transfer.Manager.UpdateTransfer:input_type -> nftmeta.v1.transfer.UpdateTransferRequest
	7,  // 39: nftmeta.v1.transfer.Manager.CreateTransfers:input_type -> nftmeta.v1.transfer.CreateTransfersRequest
	9,  // 40: nftmeta.v1.transfer.Manager.UpsertTransfers:input_type -> nftmeta.v1.transfer.UpsertTransfersRequest
	11, // 41: nftmeta.v1.transfer.Manager.GetTransfer:input_type -> nftmeta.v1.transfer.GetTransferRequest
	15, // 42: nftmeta.v1.transfer.Manager.GetTransferOnly:input_type -> nftmeta.v1.transfer.GetTransferOnlyRequest
	13, // 43: nftmeta.v1.transfer.Manager.GetTransfers:input_type -> nftmeta.v1.transfer.GetTransfersRequest
	19, // 44: nftmeta.v1.transfer.Manager.ExistTransfer:input_type -> nftmeta.v1.transfer.ExistTransferRequest
	21, // 45: nftmeta.v1.transfer.Manager.ExistTransferConds:input_type -> nftmeta.v1.transfer.ExistTransferCondsRequest
	23, // 46: nftmeta.v1.transfer.Manager.DeleteTransfer:input_type -> nftmeta.v1.transfer.DeleteTransferRequest
	4,  // 47: nftmeta.v1.transfer.Manager.CreateTransfer:output_type -> nftmeta.v1.transfer.CreateTransferResponse
	6,  // 48: nftmeta.v1.transfer.Manager.UpsertTransfer:output_type -> nftmeta.v1.transfer.UpsertTransferResponse
	18, // 49: nftmeta.v1.transfer.Manager.UpdateTransfer:output_type -> nftmeta.v1.transfer.UpdateTransferResponse
	8,  // 50: nftmeta.v1.transfer.Manager.CreateTransfers:output_type -> nftmeta.v1.transfer.CreateTransfersResponse
	10, // 51: nftmeta.v1.transfer.Manager.UpsertTransfers:output_type -> nftmeta.v1.transfer.UpsertTransfersResponse
	12, // 52: nftmeta.v1.transfer.Manager.GetTransfer:output_type -> nftmeta.v1.transfer.GetTransferResponse
	16, // 53: nftmeta.v1.transfer.Manager.GetTransferOnly:output_type -> nftmeta.v1.transfer.GetTransferOnlyResponse
	14, // 54: nftmeta.v1.transfer.Manager.GetTransfers:output_type -> nftmeta.v1.transfer.GetTransfersResponse
	20, // 55: nftmeta.v1.transfer.Manager.ExistTransfer:output_type -> nftmeta.v1.transfer.ExistTransferResponse
	22, // 56: nftmeta.v1.transfer.Manager.ExistTransferConds:output_type -> nftmeta.v1.transfer.ExistTransferCondsResponse
	24, // 57: nftmeta.v1.transfer.Manager.DeleteTransfer:output_type -> nftmeta.v1.transfer.DeleteTransferResponse
	47, // [47:58] is the sub-list for method output_type
	36, // [36:47] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_web3eye_nftmeta_v1_transfer_transfer_proto_init() }
func file_web3eye_nftmeta_v1_transfer_transfer_proto_init() {
	if File_web3eye_nftmeta_v1_transfer_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTransferCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTransferCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web3eye_nftmeta_v1_transfer_transfer_proto_goTypes,
		DependencyIndexes: file_web3eye_nftmeta_v1_transfer_transfer_proto_depIdxs,
		MessageInfos:      file_web3eye_nftmeta_v1_transfer_transfer_proto_msgTypes,
	}.Build()
	File_web3eye_nftmeta_v1_transfer_transfer_proto = out.File
	file_web3eye_nftmeta_v1_transfer_transfer_proto_rawDesc = nil
	file_web3eye_nftmeta_v1_transfer_transfer_proto_goTypes = nil
	file_web3eye_nftmeta_v1_transfer_transfer_proto_depIdxs = nil
}
