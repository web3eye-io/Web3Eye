// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: web3eye/nftmeta/v1/contract/contract.proto

package contract

import (
	web3eye "github.com/web3eye-io/Web3Eye/proto/web3eye"
	v1 "github.com/web3eye-io/Web3Eye/proto/web3eye/basetype/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *uint32       `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *string       `protobuf:"bytes,11,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	ChainType   *v1.ChainType `protobuf:"varint,20,opt,name=ChainType,proto3,enum=chain.ChainType,oneof" json:"ChainType,omitempty"`
	ChainID     *string       `protobuf:"bytes,30,opt,name=ChainID,proto3,oneof" json:"ChainID,omitempty"`
	Address     *string       `protobuf:"bytes,40,opt,name=Address,proto3,oneof" json:"Address,omitempty"`
	Name        *string       `protobuf:"bytes,50,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Symbol      *string       `protobuf:"bytes,60,opt,name=Symbol,proto3,oneof" json:"Symbol,omitempty"`
	Decimals    *uint32       `protobuf:"varint,61,opt,name=Decimals,proto3,oneof" json:"Decimals,omitempty"`
	Creator     *string       `protobuf:"bytes,70,opt,name=Creator,proto3,oneof" json:"Creator,omitempty"`
	BlockNum    *uint64       `protobuf:"varint,80,opt,name=BlockNum,proto3,oneof" json:"BlockNum,omitempty"`
	TxHash      *string       `protobuf:"bytes,90,opt,name=TxHash,proto3,oneof" json:"TxHash,omitempty"`
	TxTime      *uint32       `protobuf:"varint,100,opt,name=TxTime,proto3,oneof" json:"TxTime,omitempty"`
	ProfileURL  *string       `protobuf:"bytes,110,opt,name=ProfileURL,proto3,oneof" json:"ProfileURL,omitempty"`
	BaseURL     *string       `protobuf:"bytes,120,opt,name=BaseURL,proto3,oneof" json:"BaseURL,omitempty"`
	BannerURL   *string       `protobuf:"bytes,130,opt,name=BannerURL,proto3,oneof" json:"BannerURL,omitempty"`
	Description *string       `protobuf:"bytes,140,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	Remark      *string       `protobuf:"bytes,150,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *ContractReq) Reset() {
	*x = ContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReq) ProtoMessage() {}

func (x *ContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReq.ProtoReflect.Descriptor instead.
func (*ContractReq) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{0}
}

func (x *ContractReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *ContractReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *ContractReq) GetChainType() v1.ChainType {
	if x != nil && x.ChainType != nil {
		return *x.ChainType
	}
	return v1.ChainType(0)
}

func (x *ContractReq) GetChainID() string {
	if x != nil && x.ChainID != nil {
		return *x.ChainID
	}
	return ""
}

func (x *ContractReq) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ContractReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContractReq) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *ContractReq) GetDecimals() uint32 {
	if x != nil && x.Decimals != nil {
		return *x.Decimals
	}
	return 0
}

func (x *ContractReq) GetCreator() string {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return ""
}

func (x *ContractReq) GetBlockNum() uint64 {
	if x != nil && x.BlockNum != nil {
		return *x.BlockNum
	}
	return 0
}

func (x *ContractReq) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *ContractReq) GetTxTime() uint32 {
	if x != nil && x.TxTime != nil {
		return *x.TxTime
	}
	return 0
}

func (x *ContractReq) GetProfileURL() string {
	if x != nil && x.ProfileURL != nil {
		return *x.ProfileURL
	}
	return ""
}

func (x *ContractReq) GetBaseURL() string {
	if x != nil && x.BaseURL != nil {
		return *x.BaseURL
	}
	return ""
}

func (x *ContractReq) GetBannerURL() string {
	if x != nil && x.BannerURL != nil {
		return *x.BannerURL
	}
	return ""
}

func (x *ContractReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ContractReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,11,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"chain_type"
	ChainTypeStr string       `protobuf:"bytes,20,opt,name=ChainTypeStr,proto3" json:"ChainTypeStr,omitempty" sql:"chain_type"`
	ChainType    v1.ChainType `protobuf:"varint,21,opt,name=ChainType,proto3,enum=chain.ChainType" json:"ChainType,omitempty"`
	// @inject_tag: sql:"chain_id"
	ChainID string `protobuf:"bytes,30,opt,name=ChainID,proto3" json:"ChainID,omitempty" sql:"chain_id"`
	// @inject_tag: sql:"address"
	Address string `protobuf:"bytes,40,opt,name=Address,proto3" json:"Address,omitempty" sql:"address"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,50,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"symbol"
	Symbol string `protobuf:"bytes,60,opt,name=Symbol,proto3" json:"Symbol,omitempty" sql:"symbol"`
	// @inject_tag: sql:"decimals"
	Decimals uint32 `protobuf:"varint,61,opt,name=Decimals,proto3" json:"Decimals,omitempty" sql:"decimals"`
	// @inject_tag: sql:"creator"
	Creator string `protobuf:"bytes,70,opt,name=Creator,proto3" json:"Creator,omitempty" sql:"creator"`
	// @inject_tag: sql:"block_num"
	BlockNum uint64 `protobuf:"varint,80,opt,name=BlockNum,proto3" json:"BlockNum,omitempty" sql:"block_num"`
	// @inject_tag: sql:"tx_hash"
	TxHash string `protobuf:"bytes,90,opt,name=TxHash,proto3" json:"TxHash,omitempty" sql:"tx_hash"`
	// @inject_tag: sql:"tx_time"
	TxTime uint32 `protobuf:"varint,100,opt,name=TxTime,proto3" json:"TxTime,omitempty" sql:"tx_time"`
	// @inject_tag: sql:"profile_url"
	ProfileURL string `protobuf:"bytes,110,opt,name=ProfileURL,proto3" json:"ProfileURL,omitempty" sql:"profile_url"`
	// @inject_tag: sql:"base_url"
	BaseURL string `protobuf:"bytes,120,opt,name=BaseURL,proto3" json:"BaseURL,omitempty" sql:"base_url"`
	// @inject_tag: sql:"banner_url"
	BannerURL string `protobuf:"bytes,130,opt,name=BannerURL,proto3" json:"BannerURL,omitempty" sql:"banner_url"`
	// @inject_tag: sql:"description"
	Description string `protobuf:"bytes,140,opt,name=Description,proto3" json:"Description,omitempty" sql:"description"`
	// @inject_tag: sql:"remark"
	Remark string `protobuf:"bytes,150,opt,name=Remark,proto3" json:"Remark,omitempty" sql:"remark"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,160,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,170,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{1}
}

func (x *Contract) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Contract) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Contract) GetChainTypeStr() string {
	if x != nil {
		return x.ChainTypeStr
	}
	return ""
}

func (x *Contract) GetChainType() v1.ChainType {
	if x != nil {
		return x.ChainType
	}
	return v1.ChainType(0)
}

func (x *Contract) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *Contract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Contract) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contract) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Contract) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Contract) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Contract) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *Contract) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Contract) GetTxTime() uint32 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

func (x *Contract) GetProfileURL() string {
	if x != nil {
		return x.ProfileURL
	}
	return ""
}

func (x *Contract) GetBaseURL() string {
	if x != nil {
		return x.BaseURL
	}
	return ""
}

func (x *Contract) GetBannerURL() string {
	if x != nil {
		return x.BannerURL
	}
	return ""
}

func (x *Contract) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Contract) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Contract) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Contract) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *web3eye.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *web3eye.StringVal      `protobuf:"bytes,11,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	ChainType   *web3eye.Uint32Val      `protobuf:"bytes,20,opt,name=ChainType,proto3,oneof" json:"ChainType,omitempty"`
	ChainID     *web3eye.StringVal      `protobuf:"bytes,30,opt,name=ChainID,proto3,oneof" json:"ChainID,omitempty"`
	Address     *web3eye.StringVal      `protobuf:"bytes,40,opt,name=Address,proto3,oneof" json:"Address,omitempty"`
	Name        *web3eye.StringVal      `protobuf:"bytes,50,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Symbol      *web3eye.StringVal      `protobuf:"bytes,60,opt,name=Symbol,proto3,oneof" json:"Symbol,omitempty"`
	Decimals    *web3eye.Uint32Val      `protobuf:"bytes,61,opt,name=Decimals,proto3,oneof" json:"Decimals,omitempty"`
	Creator     *web3eye.StringVal      `protobuf:"bytes,70,opt,name=Creator,proto3,oneof" json:"Creator,omitempty"`
	BlockNum    *web3eye.Uint64Val      `protobuf:"bytes,80,opt,name=BlockNum,proto3,oneof" json:"BlockNum,omitempty"`
	TxHash      *web3eye.StringVal      `protobuf:"bytes,90,opt,name=TxHash,proto3,oneof" json:"TxHash,omitempty"`
	TxTime      *web3eye.Uint32Val      `protobuf:"bytes,100,opt,name=TxTime,proto3,oneof" json:"TxTime,omitempty"`
	ProfileURL  *web3eye.StringVal      `protobuf:"bytes,110,opt,name=ProfileURL,proto3,oneof" json:"ProfileURL,omitempty"`
	BaseURL     *web3eye.StringVal      `protobuf:"bytes,120,opt,name=BaseURL,proto3,oneof" json:"BaseURL,omitempty"`
	BannerURL   *web3eye.StringVal      `protobuf:"bytes,130,opt,name=BannerURL,proto3,oneof" json:"BannerURL,omitempty"`
	Description *web3eye.StringVal      `protobuf:"bytes,140,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	Remark      *web3eye.StringVal      `protobuf:"bytes,150,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
	EntIDs      *web3eye.StringSliceVal `protobuf:"bytes,160,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *web3eye.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *web3eye.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetChainType() *web3eye.Uint32Val {
	if x != nil {
		return x.ChainType
	}
	return nil
}

func (x *Conds) GetChainID() *web3eye.StringVal {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *Conds) GetAddress() *web3eye.StringVal {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Conds) GetName() *web3eye.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conds) GetSymbol() *web3eye.StringVal {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *Conds) GetDecimals() *web3eye.Uint32Val {
	if x != nil {
		return x.Decimals
	}
	return nil
}

func (x *Conds) GetCreator() *web3eye.StringVal {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Conds) GetBlockNum() *web3eye.Uint64Val {
	if x != nil {
		return x.BlockNum
	}
	return nil
}

func (x *Conds) GetTxHash() *web3eye.StringVal {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Conds) GetTxTime() *web3eye.Uint32Val {
	if x != nil {
		return x.TxTime
	}
	return nil
}

func (x *Conds) GetProfileURL() *web3eye.StringVal {
	if x != nil {
		return x.ProfileURL
	}
	return nil
}

func (x *Conds) GetBaseURL() *web3eye.StringVal {
	if x != nil {
		return x.BaseURL
	}
	return nil
}

func (x *Conds) GetBannerURL() *web3eye.StringVal {
	if x != nil {
		return x.BannerURL
	}
	return nil
}

func (x *Conds) GetDescription() *web3eye.StringVal {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Conds) GetRemark() *web3eye.StringVal {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *Conds) GetEntIDs() *web3eye.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type CreateContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ContractReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateContractRequest) Reset() {
	*x = CreateContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractRequest) ProtoMessage() {}

func (x *CreateContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractRequest.ProtoReflect.Descriptor instead.
func (*CreateContractRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{3}
}

func (x *CreateContractRequest) GetInfo() *ContractReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Contract `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateContractResponse) Reset() {
	*x = CreateContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractResponse) ProtoMessage() {}

func (x *CreateContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractResponse.ProtoReflect.Descriptor instead.
func (*CreateContractResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{4}
}

func (x *CreateContractResponse) GetInfo() *Contract {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpsertContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ContractReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpsertContractRequest) Reset() {
	*x = UpsertContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertContractRequest) ProtoMessage() {}

func (x *UpsertContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertContractRequest.ProtoReflect.Descriptor instead.
func (*UpsertContractRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertContractRequest) GetInfo() *ContractReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpsertContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Contract `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpsertContractResponse) Reset() {
	*x = UpsertContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertContractResponse) ProtoMessage() {}

func (x *UpsertContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertContractResponse.ProtoReflect.Descriptor instead.
func (*UpsertContractResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertContractResponse) GetInfo() *Contract {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*ContractReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateContractsRequest) Reset() {
	*x = CreateContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractsRequest) ProtoMessage() {}

func (x *CreateContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractsRequest.ProtoReflect.Descriptor instead.
func (*CreateContractsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{7}
}

func (x *CreateContractsRequest) GetInfos() []*ContractReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Contract `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateContractsResponse) Reset() {
	*x = CreateContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractsResponse) ProtoMessage() {}

func (x *CreateContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractsResponse.ProtoReflect.Descriptor instead.
func (*CreateContractsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{8}
}

func (x *CreateContractsResponse) GetInfos() []*Contract {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetContractRequest) Reset() {
	*x = GetContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractRequest) ProtoMessage() {}

func (x *GetContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractRequest.ProtoReflect.Descriptor instead.
func (*GetContractRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{9}
}

func (x *GetContractRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Contract `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetContractResponse) Reset() {
	*x = GetContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractResponse) ProtoMessage() {}

func (x *GetContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractResponse.ProtoReflect.Descriptor instead.
func (*GetContractResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{10}
}

func (x *GetContractResponse) GetInfo() *Contract {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetContractsRequest) Reset() {
	*x = GetContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractsRequest) ProtoMessage() {}

func (x *GetContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractsRequest.ProtoReflect.Descriptor instead.
func (*GetContractsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{11}
}

func (x *GetContractsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetContractsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetContractsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Contract `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetContractsResponse) Reset() {
	*x = GetContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractsResponse) ProtoMessage() {}

func (x *GetContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractsResponse.ProtoReflect.Descriptor instead.
func (*GetContractsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{12}
}

func (x *GetContractsResponse) GetInfos() []*Contract {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetContractsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetContractOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetContractOnlyRequest) Reset() {
	*x = GetContractOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractOnlyRequest) ProtoMessage() {}

func (x *GetContractOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetContractOnlyRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{13}
}

func (x *GetContractOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetContractOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Contract `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetContractOnlyResponse) Reset() {
	*x = GetContractOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractOnlyResponse) ProtoMessage() {}

func (x *GetContractOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetContractOnlyResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{14}
}

func (x *GetContractOnlyResponse) GetInfo() *Contract {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ContractReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateContractRequest) Reset() {
	*x = UpdateContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractRequest) ProtoMessage() {}

func (x *UpdateContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractRequest.ProtoReflect.Descriptor instead.
func (*UpdateContractRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateContractRequest) GetInfo() *ContractReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Contract `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateContractResponse) Reset() {
	*x = UpdateContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractResponse) ProtoMessage() {}

func (x *UpdateContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractResponse.ProtoReflect.Descriptor instead.
func (*UpdateContractResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateContractResponse) GetInfo() *Contract {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistContractRequest) Reset() {
	*x = ExistContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistContractRequest) ProtoMessage() {}

func (x *ExistContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistContractRequest.ProtoReflect.Descriptor instead.
func (*ExistContractRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{17}
}

func (x *ExistContractRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ExistContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistContractResponse) Reset() {
	*x = ExistContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistContractResponse) ProtoMessage() {}

func (x *ExistContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistContractResponse.ProtoReflect.Descriptor instead.
func (*ExistContractResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{18}
}

func (x *ExistContractResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type ExistContractCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistContractCondsRequest) Reset() {
	*x = ExistContractCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistContractCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistContractCondsRequest) ProtoMessage() {}

func (x *ExistContractCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistContractCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistContractCondsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{19}
}

func (x *ExistContractCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistContractCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistContractCondsResponse) Reset() {
	*x = ExistContractCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistContractCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistContractCondsResponse) ProtoMessage() {}

func (x *ExistContractCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistContractCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistContractCondsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{20}
}

func (x *ExistContractCondsResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type CountContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountContractsRequest) Reset() {
	*x = CountContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountContractsRequest) ProtoMessage() {}

func (x *CountContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountContractsRequest.ProtoReflect.Descriptor instead.
func (*CountContractsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{21}
}

func (x *CountContractsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountContractsResponse) Reset() {
	*x = CountContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountContractsResponse) ProtoMessage() {}

func (x *CountContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountContractsResponse.ProtoReflect.Descriptor instead.
func (*CountContractsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{22}
}

func (x *CountContractsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteContractRequest) Reset() {
	*x = DeleteContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContractRequest) ProtoMessage() {}

func (x *DeleteContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContractRequest.ProtoReflect.Descriptor instead.
func (*DeleteContractRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteContractRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Contract `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteContractResponse) Reset() {
	*x = DeleteContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContractResponse) ProtoMessage() {}

func (x *DeleteContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContractResponse.ProtoReflect.Descriptor instead.
func (*DeleteContractResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteContractResponse) GetInfo() *Contract {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_web3eye_nftmeta_v1_contract_contract_proto protoreflect.FileDescriptor

var file_web3eye_nftmeta_v1_contract_contract_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x15, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65,
	0x79, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79,
	0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x05, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x09, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0b, 0x52, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55,
	0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52,
	0x4c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb9, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1d, 0x0a, 0x09, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x21, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x06, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xf8, 0x08, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65,
	0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79,
	0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x06, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52,
	0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06,
	0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x0a, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x0b, 0x52, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65,
	0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0d, 0x52, 0x07,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x0e, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65,
	0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0f, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x10, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x11, 0x52, 0x06, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x42, 0x61, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x4d, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x48, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x61,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4c, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x2d, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x4d,
	0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x32, 0x0a,
	0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0xb8, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2a,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x27, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x0d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x29, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x2a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x41, 0x5a, 0x3f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79,
	0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x57, 0x65, 0x62, 0x33, 0x45, 0x79, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web3eye_nftmeta_v1_contract_contract_proto_rawDescOnce sync.Once
	file_web3eye_nftmeta_v1_contract_contract_proto_rawDescData = file_web3eye_nftmeta_v1_contract_contract_proto_rawDesc
)

func file_web3eye_nftmeta_v1_contract_contract_proto_rawDescGZIP() []byte {
	file_web3eye_nftmeta_v1_contract_contract_proto_rawDescOnce.Do(func() {
		file_web3eye_nftmeta_v1_contract_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_web3eye_nftmeta_v1_contract_contract_proto_rawDescData)
	})
	return file_web3eye_nftmeta_v1_contract_contract_proto_rawDescData
}

var file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_web3eye_nftmeta_v1_contract_contract_proto_goTypes = []interface{}{
	(*ContractReq)(nil),                // 0: nftmeta.v1.contract.ContractReq
	(*Contract)(nil),                   // 1: nftmeta.v1.contract.Contract
	(*Conds)(nil),                      // 2: nftmeta.v1.contract.Conds
	(*CreateContractRequest)(nil),      // 3: nftmeta.v1.contract.CreateContractRequest
	(*CreateContractResponse)(nil),     // 4: nftmeta.v1.contract.CreateContractResponse
	(*UpsertContractRequest)(nil),      // 5: nftmeta.v1.contract.UpsertContractRequest
	(*UpsertContractResponse)(nil),     // 6: nftmeta.v1.contract.UpsertContractResponse
	(*CreateContractsRequest)(nil),     // 7: nftmeta.v1.contract.CreateContractsRequest
	(*CreateContractsResponse)(nil),    // 8: nftmeta.v1.contract.CreateContractsResponse
	(*GetContractRequest)(nil),         // 9: nftmeta.v1.contract.GetContractRequest
	(*GetContractResponse)(nil),        // 10: nftmeta.v1.contract.GetContractResponse
	(*GetContractsRequest)(nil),        // 11: nftmeta.v1.contract.GetContractsRequest
	(*GetContractsResponse)(nil),       // 12: nftmeta.v1.contract.GetContractsResponse
	(*GetContractOnlyRequest)(nil),     // 13: nftmeta.v1.contract.GetContractOnlyRequest
	(*GetContractOnlyResponse)(nil),    // 14: nftmeta.v1.contract.GetContractOnlyResponse
	(*UpdateContractRequest)(nil),      // 15: nftmeta.v1.contract.UpdateContractRequest
	(*UpdateContractResponse)(nil),     // 16: nftmeta.v1.contract.UpdateContractResponse
	(*ExistContractRequest)(nil),       // 17: nftmeta.v1.contract.ExistContractRequest
	(*ExistContractResponse)(nil),      // 18: nftmeta.v1.contract.ExistContractResponse
	(*ExistContractCondsRequest)(nil),  // 19: nftmeta.v1.contract.ExistContractCondsRequest
	(*ExistContractCondsResponse)(nil), // 20: nftmeta.v1.contract.ExistContractCondsResponse
	(*CountContractsRequest)(nil),      // 21: nftmeta.v1.contract.CountContractsRequest
	(*CountContractsResponse)(nil),     // 22: nftmeta.v1.contract.CountContractsResponse
	(*DeleteContractRequest)(nil),      // 23: nftmeta.v1.contract.DeleteContractRequest
	(*DeleteContractResponse)(nil),     // 24: nftmeta.v1.contract.DeleteContractResponse
	(v1.ChainType)(0),                  // 25: chain.ChainType
	(*web3eye.Uint32Val)(nil),          // 26: web3eye.Uint32Val
	(*web3eye.StringVal)(nil),          // 27: web3eye.StringVal
	(*web3eye.Uint64Val)(nil),          // 28: web3eye.Uint64Val
	(*web3eye.StringSliceVal)(nil),     // 29: web3eye.StringSliceVal
}
var file_web3eye_nftmeta_v1_contract_contract_proto_depIdxs = []int32{
	25, // 0: nftmeta.v1.contract.ContractReq.ChainType:type_name -> chain.ChainType
	25, // 1: nftmeta.v1.contract.Contract.ChainType:type_name -> chain.ChainType
	26, // 2: nftmeta.v1.contract.Conds.ID:type_name -> web3eye.Uint32Val
	27, // 3: nftmeta.v1.contract.Conds.EntID:type_name -> web3eye.StringVal
	26, // 4: nftmeta.v1.contract.Conds.ChainType:type_name -> web3eye.Uint32Val
	27, // 5: nftmeta.v1.contract.Conds.ChainID:type_name -> web3eye.StringVal
	27, // 6: nftmeta.v1.contract.Conds.Address:type_name -> web3eye.StringVal
	27, // 7: nftmeta.v1.contract.Conds.Name:type_name -> web3eye.StringVal
	27, // 8: nftmeta.v1.contract.Conds.Symbol:type_name -> web3eye.StringVal
	26, // 9: nftmeta.v1.contract.Conds.Decimals:type_name -> web3eye.Uint32Val
	27, // 10: nftmeta.v1.contract.Conds.Creator:type_name -> web3eye.StringVal
	28, // 11: nftmeta.v1.contract.Conds.BlockNum:type_name -> web3eye.Uint64Val
	27, // 12: nftmeta.v1.contract.Conds.TxHash:type_name -> web3eye.StringVal
	26, // 13: nftmeta.v1.contract.Conds.TxTime:type_name -> web3eye.Uint32Val
	27, // 14: nftmeta.v1.contract.Conds.ProfileURL:type_name -> web3eye.StringVal
	27, // 15: nftmeta.v1.contract.Conds.BaseURL:type_name -> web3eye.StringVal
	27, // 16: nftmeta.v1.contract.Conds.BannerURL:type_name -> web3eye.StringVal
	27, // 17: nftmeta.v1.contract.Conds.Description:type_name -> web3eye.StringVal
	27, // 18: nftmeta.v1.contract.Conds.Remark:type_name -> web3eye.StringVal
	29, // 19: nftmeta.v1.contract.Conds.EntIDs:type_name -> web3eye.StringSliceVal
	0,  // 20: nftmeta.v1.contract.CreateContractRequest.Info:type_name -> nftmeta.v1.contract.ContractReq
	1,  // 21: nftmeta.v1.contract.CreateContractResponse.Info:type_name -> nftmeta.v1.contract.Contract
	0,  // 22: nftmeta.v1.contract.UpsertContractRequest.Info:type_name -> nftmeta.v1.contract.ContractReq
	1,  // 23: nftmeta.v1.contract.UpsertContractResponse.Info:type_name -> nftmeta.v1.contract.Contract
	0,  // 24: nftmeta.v1.contract.CreateContractsRequest.Infos:type_name -> nftmeta.v1.contract.ContractReq
	1,  // 25: nftmeta.v1.contract.CreateContractsResponse.Infos:type_name -> nftmeta.v1.contract.Contract
	1,  // 26: nftmeta.v1.contract.GetContractResponse.Info:type_name -> nftmeta.v1.contract.Contract
	2,  // 27: nftmeta.v1.contract.GetContractsRequest.Conds:type_name -> nftmeta.v1.contract.Conds
	1,  // 28: nftmeta.v1.contract.GetContractsResponse.Infos:type_name -> nftmeta.v1.contract.Contract
	2,  // 29: nftmeta.v1.contract.GetContractOnlyRequest.Conds:type_name -> nftmeta.v1.contract.Conds
	1,  // 30: nftmeta.v1.contract.GetContractOnlyResponse.Info:type_name -> nftmeta.v1.contract.Contract
	0,  // 31: nftmeta.v1.contract.UpdateContractRequest.Info:type_name -> nftmeta.v1.contract.ContractReq
	1,  // 32: nftmeta.v1.contract.UpdateContractResponse.Info:type_name -> nftmeta.v1.contract.Contract
	2,  // 33: nftmeta.v1.contract.ExistContractCondsRequest.Conds:type_name -> nftmeta.v1.contract.Conds
	2,  // 34: nftmeta.v1.contract.CountContractsRequest.Conds:type_name -> nftmeta.v1.contract.Conds
	1,  // 35: nftmeta.v1.contract.DeleteContractResponse.Info:type_name -> nftmeta.v1.contract.Contract
	3,  // 36: nftmeta.v1.contract.Manager.CreateContract:input_type -> nftmeta.v1.contract.CreateContractRequest
	7,  // 37: nftmeta.v1.contract.Manager.CreateContracts:input_type -> nftmeta.v1.contract.CreateContractsRequest
	15, // 38: nftmeta.v1.contract.Manager.UpdateContract:input_type -> nftmeta.v1.contract.UpdateContractRequest
	5,  // 39: nftmeta.v1.contract.Manager.UpsertContract:input_type -> nftmeta.v1.contract.UpsertContractRequest
	9,  // 40: nftmeta.v1.contract.Manager.GetContract:input_type -> nftmeta.v1.contract.GetContractRequest
	13, // 41: nftmeta.v1.contract.Manager.GetContractOnly:input_type -> nftmeta.v1.contract.GetContractOnlyRequest
	11, // 42: nftmeta.v1.contract.Manager.GetContracts:input_type -> nftmeta.v1.contract.GetContractsRequest
	17, // 43: nftmeta.v1.contract.Manager.ExistContract:input_type -> nftmeta.v1.contract.ExistContractRequest
	19, // 44: nftmeta.v1.contract.Manager.ExistContractConds:input_type -> nftmeta.v1.contract.ExistContractCondsRequest
	21, // 45: nftmeta.v1.contract.Manager.CountContracts:input_type -> nftmeta.v1.contract.CountContractsRequest
	23, // 46: nftmeta.v1.contract.Manager.DeleteContract:input_type -> nftmeta.v1.contract.DeleteContractRequest
	4,  // 47: nftmeta.v1.contract.Manager.CreateContract:output_type -> nftmeta.v1.contract.CreateContractResponse
	8,  // 48: nftmeta.v1.contract.Manager.CreateContracts:output_type -> nftmeta.v1.contract.CreateContractsResponse
	16, // 49: nftmeta.v1.contract.Manager.UpdateContract:output_type -> nftmeta.v1.contract.UpdateContractResponse
	6,  // 50: nftmeta.v1.contract.Manager.UpsertContract:output_type -> nftmeta.v1.contract.UpsertContractResponse
	10, // 51: nftmeta.v1.contract.Manager.GetContract:output_type -> nftmeta.v1.contract.GetContractResponse
	14, // 52: nftmeta.v1.contract.Manager.GetContractOnly:output_type -> nftmeta.v1.contract.GetContractOnlyResponse
	12, // 53: nftmeta.v1.contract.Manager.GetContracts:output_type -> nftmeta.v1.contract.GetContractsResponse
	18, // 54: nftmeta.v1.contract.Manager.ExistContract:output_type -> nftmeta.v1.contract.ExistContractResponse
	20, // 55: nftmeta.v1.contract.Manager.ExistContractConds:output_type -> nftmeta.v1.contract.ExistContractCondsResponse
	22, // 56: nftmeta.v1.contract.Manager.CountContracts:output_type -> nftmeta.v1.contract.CountContractsResponse
	24, // 57: nftmeta.v1.contract.Manager.DeleteContract:output_type -> nftmeta.v1.contract.DeleteContractResponse
	47, // [47:58] is the sub-list for method output_type
	36, // [36:47] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_web3eye_nftmeta_v1_contract_contract_proto_init() }
func file_web3eye_nftmeta_v1_contract_contract_proto_init() {
	if File_web3eye_nftmeta_v1_contract_contract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistContractCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistContractCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web3eye_nftmeta_v1_contract_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web3eye_nftmeta_v1_contract_contract_proto_goTypes,
		DependencyIndexes: file_web3eye_nftmeta_v1_contract_contract_proto_depIdxs,
		MessageInfos:      file_web3eye_nftmeta_v1_contract_contract_proto_msgTypes,
	}.Build()
	File_web3eye_nftmeta_v1_contract_contract_proto = out.File
	file_web3eye_nftmeta_v1_contract_contract_proto_rawDesc = nil
	file_web3eye_nftmeta_v1_contract_contract_proto_goTypes = nil
	file_web3eye_nftmeta_v1_contract_contract_proto_depIdxs = nil
}
