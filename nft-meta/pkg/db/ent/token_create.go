// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/token"
)

// TokenCreate is the builder for creating a Token entity.
type TokenCreate struct {
	config
	mutation *TokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (tc *TokenCreate) SetEntID(u uuid.UUID) *TokenCreate {
	tc.mutation.SetEntID(u)
	return tc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tc *TokenCreate) SetNillableEntID(u *uuid.UUID) *TokenCreate {
	if u != nil {
		tc.SetEntID(*u)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TokenCreate) SetCreatedAt(u uint32) *TokenCreate {
	tc.mutation.SetCreatedAt(u)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TokenCreate) SetNillableCreatedAt(u *uint32) *TokenCreate {
	if u != nil {
		tc.SetCreatedAt(*u)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TokenCreate) SetUpdatedAt(u uint32) *TokenCreate {
	tc.mutation.SetUpdatedAt(u)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TokenCreate) SetNillableUpdatedAt(u *uint32) *TokenCreate {
	if u != nil {
		tc.SetUpdatedAt(*u)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TokenCreate) SetDeletedAt(u uint32) *TokenCreate {
	tc.mutation.SetDeletedAt(u)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TokenCreate) SetNillableDeletedAt(u *uint32) *TokenCreate {
	if u != nil {
		tc.SetDeletedAt(*u)
	}
	return tc
}

// SetChainType sets the "chain_type" field.
func (tc *TokenCreate) SetChainType(s string) *TokenCreate {
	tc.mutation.SetChainType(s)
	return tc
}

// SetChainID sets the "chain_id" field.
func (tc *TokenCreate) SetChainID(s string) *TokenCreate {
	tc.mutation.SetChainID(s)
	return tc
}

// SetContract sets the "contract" field.
func (tc *TokenCreate) SetContract(s string) *TokenCreate {
	tc.mutation.SetContract(s)
	return tc
}

// SetTokenType sets the "token_type" field.
func (tc *TokenCreate) SetTokenType(s string) *TokenCreate {
	tc.mutation.SetTokenType(s)
	return tc
}

// SetTokenID sets the "token_id" field.
func (tc *TokenCreate) SetTokenID(s string) *TokenCreate {
	tc.mutation.SetTokenID(s)
	return tc
}

// SetOwner sets the "owner" field.
func (tc *TokenCreate) SetOwner(s string) *TokenCreate {
	tc.mutation.SetOwner(s)
	return tc
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (tc *TokenCreate) SetNillableOwner(s *string) *TokenCreate {
	if s != nil {
		tc.SetOwner(*s)
	}
	return tc
}

// SetURI sets the "uri" field.
func (tc *TokenCreate) SetURI(s string) *TokenCreate {
	tc.mutation.SetURI(s)
	return tc
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (tc *TokenCreate) SetNillableURI(s *string) *TokenCreate {
	if s != nil {
		tc.SetURI(*s)
	}
	return tc
}

// SetURIType sets the "uri_type" field.
func (tc *TokenCreate) SetURIType(s string) *TokenCreate {
	tc.mutation.SetURIType(s)
	return tc
}

// SetNillableURIType sets the "uri_type" field if the given value is not nil.
func (tc *TokenCreate) SetNillableURIType(s *string) *TokenCreate {
	if s != nil {
		tc.SetURIType(*s)
	}
	return tc
}

// SetImageURL sets the "image_url" field.
func (tc *TokenCreate) SetImageURL(s string) *TokenCreate {
	tc.mutation.SetImageURL(s)
	return tc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tc *TokenCreate) SetNillableImageURL(s *string) *TokenCreate {
	if s != nil {
		tc.SetImageURL(*s)
	}
	return tc
}

// SetVideoURL sets the "video_url" field.
func (tc *TokenCreate) SetVideoURL(s string) *TokenCreate {
	tc.mutation.SetVideoURL(s)
	return tc
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (tc *TokenCreate) SetNillableVideoURL(s *string) *TokenCreate {
	if s != nil {
		tc.SetVideoURL(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TokenCreate) SetDescription(s string) *TokenCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TokenCreate) SetNillableDescription(s *string) *TokenCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TokenCreate) SetName(s string) *TokenCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TokenCreate) SetNillableName(s *string) *TokenCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetVectorID sets the "vector_id" field.
func (tc *TokenCreate) SetVectorID(i int64) *TokenCreate {
	tc.mutation.SetVectorID(i)
	return tc
}

// SetNillableVectorID sets the "vector_id" field if the given value is not nil.
func (tc *TokenCreate) SetNillableVectorID(i *int64) *TokenCreate {
	if i != nil {
		tc.SetVectorID(*i)
	}
	return tc
}

// SetVectorState sets the "vector_state" field.
func (tc *TokenCreate) SetVectorState(s string) *TokenCreate {
	tc.mutation.SetVectorState(s)
	return tc
}

// SetNillableVectorState sets the "vector_state" field if the given value is not nil.
func (tc *TokenCreate) SetNillableVectorState(s *string) *TokenCreate {
	if s != nil {
		tc.SetVectorState(*s)
	}
	return tc
}

// SetRemark sets the "remark" field.
func (tc *TokenCreate) SetRemark(s string) *TokenCreate {
	tc.mutation.SetRemark(s)
	return tc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tc *TokenCreate) SetNillableRemark(s *string) *TokenCreate {
	if s != nil {
		tc.SetRemark(*s)
	}
	return tc
}

// SetIpfsImageURL sets the "ipfs_image_url" field.
func (tc *TokenCreate) SetIpfsImageURL(s string) *TokenCreate {
	tc.mutation.SetIpfsImageURL(s)
	return tc
}

// SetNillableIpfsImageURL sets the "ipfs_image_url" field if the given value is not nil.
func (tc *TokenCreate) SetNillableIpfsImageURL(s *string) *TokenCreate {
	if s != nil {
		tc.SetIpfsImageURL(*s)
	}
	return tc
}

// SetImageSnapshotID sets the "image_snapshot_id" field.
func (tc *TokenCreate) SetImageSnapshotID(s string) *TokenCreate {
	tc.mutation.SetImageSnapshotID(s)
	return tc
}

// SetNillableImageSnapshotID sets the "image_snapshot_id" field if the given value is not nil.
func (tc *TokenCreate) SetNillableImageSnapshotID(s *string) *TokenCreate {
	if s != nil {
		tc.SetImageSnapshotID(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TokenCreate) SetID(u uint32) *TokenCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TokenMutation object of the builder.
func (tc *TokenCreate) Mutation() *TokenMutation {
	return tc.mutation
}

// Save creates the Token in the database.
func (tc *TokenCreate) Save(ctx context.Context) (*Token, error) {
	var (
		err  error
		node *Token
	)
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Token)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TokenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TokenCreate) SaveX(ctx context.Context) *Token {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TokenCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TokenCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TokenCreate) defaults() error {
	if _, ok := tc.mutation.EntID(); !ok {
		if token.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized token.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := token.DefaultEntID()
		tc.mutation.SetEntID(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if token.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized token.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := token.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if token.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized token.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := token.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		if token.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized token.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := token.DefaultDeletedAt()
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.VectorState(); !ok {
		v := token.DefaultVectorState
		tc.mutation.SetVectorState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TokenCreate) check() error {
	if _, ok := tc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Token.ent_id"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Token.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Token.updated_at"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Token.deleted_at"`)}
	}
	if _, ok := tc.mutation.ChainType(); !ok {
		return &ValidationError{Name: "chain_type", err: errors.New(`ent: missing required field "Token.chain_type"`)}
	}
	if _, ok := tc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Token.chain_id"`)}
	}
	if _, ok := tc.mutation.Contract(); !ok {
		return &ValidationError{Name: "contract", err: errors.New(`ent: missing required field "Token.contract"`)}
	}
	if _, ok := tc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "Token.token_type"`)}
	}
	if _, ok := tc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "Token.token_id"`)}
	}
	return nil
}

func (tc *TokenCreate) sqlSave(ctx context.Context) (*Token, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (tc *TokenCreate) createSpec() (*Token, *sqlgraph.CreateSpec) {
	var (
		_node = &Token{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: token.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: token.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: token.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := tc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := tc.mutation.Contract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldContract,
		})
		_node.Contract = value
	}
	if value, ok := tc.mutation.TokenType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldTokenType,
		})
		_node.TokenType = value
	}
	if value, ok := tc.mutation.TokenID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldTokenID,
		})
		_node.TokenID = value
	}
	if value, ok := tc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := tc.mutation.URI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURI,
		})
		_node.URI = value
	}
	if value, ok := tc.mutation.URIType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURIType,
		})
		_node.URIType = value
	}
	if value, ok := tc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if value, ok := tc.mutation.VideoURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldVideoURL,
		})
		_node.VideoURL = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.VectorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: token.FieldVectorID,
		})
		_node.VectorID = value
	}
	if value, ok := tc.mutation.VectorState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldVectorState,
		})
		_node.VectorState = value
	}
	if value, ok := tc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := tc.mutation.IpfsImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldIpfsImageURL,
		})
		_node.IpfsImageURL = value
	}
	if value, ok := tc.mutation.ImageSnapshotID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldImageSnapshotID,
		})
		_node.ImageSnapshotID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Token.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TokenUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tc *TokenCreate) OnConflict(opts ...sql.ConflictOption) *TokenUpsertOne {
	tc.conflict = opts
	return &TokenUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TokenCreate) OnConflictColumns(columns ...string) *TokenUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TokenUpsertOne{
		create: tc,
	}
}

type (
	// TokenUpsertOne is the builder for "upsert"-ing
	//  one Token node.
	TokenUpsertOne struct {
		create *TokenCreate
	}

	// TokenUpsert is the "OnConflict" setter.
	TokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *TokenUpsert) SetEntID(v uuid.UUID) *TokenUpsert {
	u.Set(token.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TokenUpsert) UpdateEntID() *TokenUpsert {
	u.SetExcluded(token.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TokenUpsert) SetCreatedAt(v uint32) *TokenUpsert {
	u.Set(token.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TokenUpsert) UpdateCreatedAt() *TokenUpsert {
	u.SetExcluded(token.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TokenUpsert) AddCreatedAt(v uint32) *TokenUpsert {
	u.Add(token.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenUpsert) SetUpdatedAt(v uint32) *TokenUpsert {
	u.Set(token.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenUpsert) UpdateUpdatedAt() *TokenUpsert {
	u.SetExcluded(token.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TokenUpsert) AddUpdatedAt(v uint32) *TokenUpsert {
	u.Add(token.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TokenUpsert) SetDeletedAt(v uint32) *TokenUpsert {
	u.Set(token.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TokenUpsert) UpdateDeletedAt() *TokenUpsert {
	u.SetExcluded(token.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TokenUpsert) AddDeletedAt(v uint32) *TokenUpsert {
	u.Add(token.FieldDeletedAt, v)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *TokenUpsert) SetChainType(v string) *TokenUpsert {
	u.Set(token.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TokenUpsert) UpdateChainType() *TokenUpsert {
	u.SetExcluded(token.FieldChainType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *TokenUpsert) SetChainID(v string) *TokenUpsert {
	u.Set(token.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TokenUpsert) UpdateChainID() *TokenUpsert {
	u.SetExcluded(token.FieldChainID)
	return u
}

// SetContract sets the "contract" field.
func (u *TokenUpsert) SetContract(v string) *TokenUpsert {
	u.Set(token.FieldContract, v)
	return u
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TokenUpsert) UpdateContract() *TokenUpsert {
	u.SetExcluded(token.FieldContract)
	return u
}

// SetTokenType sets the "token_type" field.
func (u *TokenUpsert) SetTokenType(v string) *TokenUpsert {
	u.Set(token.FieldTokenType, v)
	return u
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TokenUpsert) UpdateTokenType() *TokenUpsert {
	u.SetExcluded(token.FieldTokenType)
	return u
}

// SetTokenID sets the "token_id" field.
func (u *TokenUpsert) SetTokenID(v string) *TokenUpsert {
	u.Set(token.FieldTokenID, v)
	return u
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TokenUpsert) UpdateTokenID() *TokenUpsert {
	u.SetExcluded(token.FieldTokenID)
	return u
}

// SetOwner sets the "owner" field.
func (u *TokenUpsert) SetOwner(v string) *TokenUpsert {
	u.Set(token.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *TokenUpsert) UpdateOwner() *TokenUpsert {
	u.SetExcluded(token.FieldOwner)
	return u
}

// ClearOwner clears the value of the "owner" field.
func (u *TokenUpsert) ClearOwner() *TokenUpsert {
	u.SetNull(token.FieldOwner)
	return u
}

// SetURI sets the "uri" field.
func (u *TokenUpsert) SetURI(v string) *TokenUpsert {
	u.Set(token.FieldURI, v)
	return u
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *TokenUpsert) UpdateURI() *TokenUpsert {
	u.SetExcluded(token.FieldURI)
	return u
}

// ClearURI clears the value of the "uri" field.
func (u *TokenUpsert) ClearURI() *TokenUpsert {
	u.SetNull(token.FieldURI)
	return u
}

// SetURIType sets the "uri_type" field.
func (u *TokenUpsert) SetURIType(v string) *TokenUpsert {
	u.Set(token.FieldURIType, v)
	return u
}

// UpdateURIType sets the "uri_type" field to the value that was provided on create.
func (u *TokenUpsert) UpdateURIType() *TokenUpsert {
	u.SetExcluded(token.FieldURIType)
	return u
}

// ClearURIType clears the value of the "uri_type" field.
func (u *TokenUpsert) ClearURIType() *TokenUpsert {
	u.SetNull(token.FieldURIType)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *TokenUpsert) SetImageURL(v string) *TokenUpsert {
	u.Set(token.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TokenUpsert) UpdateImageURL() *TokenUpsert {
	u.SetExcluded(token.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TokenUpsert) ClearImageURL() *TokenUpsert {
	u.SetNull(token.FieldImageURL)
	return u
}

// SetVideoURL sets the "video_url" field.
func (u *TokenUpsert) SetVideoURL(v string) *TokenUpsert {
	u.Set(token.FieldVideoURL, v)
	return u
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *TokenUpsert) UpdateVideoURL() *TokenUpsert {
	u.SetExcluded(token.FieldVideoURL)
	return u
}

// ClearVideoURL clears the value of the "video_url" field.
func (u *TokenUpsert) ClearVideoURL() *TokenUpsert {
	u.SetNull(token.FieldVideoURL)
	return u
}

// SetDescription sets the "description" field.
func (u *TokenUpsert) SetDescription(v string) *TokenUpsert {
	u.Set(token.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TokenUpsert) UpdateDescription() *TokenUpsert {
	u.SetExcluded(token.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *TokenUpsert) ClearDescription() *TokenUpsert {
	u.SetNull(token.FieldDescription)
	return u
}

// SetName sets the "name" field.
func (u *TokenUpsert) SetName(v string) *TokenUpsert {
	u.Set(token.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TokenUpsert) UpdateName() *TokenUpsert {
	u.SetExcluded(token.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TokenUpsert) ClearName() *TokenUpsert {
	u.SetNull(token.FieldName)
	return u
}

// SetVectorID sets the "vector_id" field.
func (u *TokenUpsert) SetVectorID(v int64) *TokenUpsert {
	u.Set(token.FieldVectorID, v)
	return u
}

// UpdateVectorID sets the "vector_id" field to the value that was provided on create.
func (u *TokenUpsert) UpdateVectorID() *TokenUpsert {
	u.SetExcluded(token.FieldVectorID)
	return u
}

// AddVectorID adds v to the "vector_id" field.
func (u *TokenUpsert) AddVectorID(v int64) *TokenUpsert {
	u.Add(token.FieldVectorID, v)
	return u
}

// ClearVectorID clears the value of the "vector_id" field.
func (u *TokenUpsert) ClearVectorID() *TokenUpsert {
	u.SetNull(token.FieldVectorID)
	return u
}

// SetVectorState sets the "vector_state" field.
func (u *TokenUpsert) SetVectorState(v string) *TokenUpsert {
	u.Set(token.FieldVectorState, v)
	return u
}

// UpdateVectorState sets the "vector_state" field to the value that was provided on create.
func (u *TokenUpsert) UpdateVectorState() *TokenUpsert {
	u.SetExcluded(token.FieldVectorState)
	return u
}

// ClearVectorState clears the value of the "vector_state" field.
func (u *TokenUpsert) ClearVectorState() *TokenUpsert {
	u.SetNull(token.FieldVectorState)
	return u
}

// SetRemark sets the "remark" field.
func (u *TokenUpsert) SetRemark(v string) *TokenUpsert {
	u.Set(token.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TokenUpsert) UpdateRemark() *TokenUpsert {
	u.SetExcluded(token.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TokenUpsert) ClearRemark() *TokenUpsert {
	u.SetNull(token.FieldRemark)
	return u
}

// SetIpfsImageURL sets the "ipfs_image_url" field.
func (u *TokenUpsert) SetIpfsImageURL(v string) *TokenUpsert {
	u.Set(token.FieldIpfsImageURL, v)
	return u
}

// UpdateIpfsImageURL sets the "ipfs_image_url" field to the value that was provided on create.
func (u *TokenUpsert) UpdateIpfsImageURL() *TokenUpsert {
	u.SetExcluded(token.FieldIpfsImageURL)
	return u
}

// ClearIpfsImageURL clears the value of the "ipfs_image_url" field.
func (u *TokenUpsert) ClearIpfsImageURL() *TokenUpsert {
	u.SetNull(token.FieldIpfsImageURL)
	return u
}

// SetImageSnapshotID sets the "image_snapshot_id" field.
func (u *TokenUpsert) SetImageSnapshotID(v string) *TokenUpsert {
	u.Set(token.FieldImageSnapshotID, v)
	return u
}

// UpdateImageSnapshotID sets the "image_snapshot_id" field to the value that was provided on create.
func (u *TokenUpsert) UpdateImageSnapshotID() *TokenUpsert {
	u.SetExcluded(token.FieldImageSnapshotID)
	return u
}

// ClearImageSnapshotID clears the value of the "image_snapshot_id" field.
func (u *TokenUpsert) ClearImageSnapshotID() *TokenUpsert {
	u.SetNull(token.FieldImageSnapshotID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(token.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TokenUpsertOne) UpdateNewValues() *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(token.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Token.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TokenUpsertOne) Ignore() *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TokenUpsertOne) DoNothing() *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TokenCreate.OnConflict
// documentation for more info.
func (u *TokenUpsertOne) Update(set func(*TokenUpsert)) *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TokenUpsertOne) SetEntID(v uuid.UUID) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateEntID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TokenUpsertOne) SetCreatedAt(v uint32) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TokenUpsertOne) AddCreatedAt(v uint32) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateCreatedAt() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenUpsertOne) SetUpdatedAt(v uint32) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TokenUpsertOne) AddUpdatedAt(v uint32) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateUpdatedAt() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TokenUpsertOne) SetDeletedAt(v uint32) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TokenUpsertOne) AddDeletedAt(v uint32) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateDeletedAt() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *TokenUpsertOne) SetChainType(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateChainType() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *TokenUpsertOne) SetChainID(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateChainID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateChainID()
	})
}

// SetContract sets the "contract" field.
func (u *TokenUpsertOne) SetContract(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateContract() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateContract()
	})
}

// SetTokenType sets the "token_type" field.
func (u *TokenUpsertOne) SetTokenType(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateTokenType() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTokenType()
	})
}

// SetTokenID sets the "token_id" field.
func (u *TokenUpsertOne) SetTokenID(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateTokenID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTokenID()
	})
}

// SetOwner sets the "owner" field.
func (u *TokenUpsertOne) SetOwner(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateOwner() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateOwner()
	})
}

// ClearOwner clears the value of the "owner" field.
func (u *TokenUpsertOne) ClearOwner() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearOwner()
	})
}

// SetURI sets the "uri" field.
func (u *TokenUpsertOne) SetURI(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateURI() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateURI()
	})
}

// ClearURI clears the value of the "uri" field.
func (u *TokenUpsertOne) ClearURI() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearURI()
	})
}

// SetURIType sets the "uri_type" field.
func (u *TokenUpsertOne) SetURIType(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetURIType(v)
	})
}

// UpdateURIType sets the "uri_type" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateURIType() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateURIType()
	})
}

// ClearURIType clears the value of the "uri_type" field.
func (u *TokenUpsertOne) ClearURIType() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearURIType()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TokenUpsertOne) SetImageURL(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateImageURL() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TokenUpsertOne) ClearImageURL() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearImageURL()
	})
}

// SetVideoURL sets the "video_url" field.
func (u *TokenUpsertOne) SetVideoURL(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetVideoURL(v)
	})
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateVideoURL() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateVideoURL()
	})
}

// ClearVideoURL clears the value of the "video_url" field.
func (u *TokenUpsertOne) ClearVideoURL() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearVideoURL()
	})
}

// SetDescription sets the "description" field.
func (u *TokenUpsertOne) SetDescription(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateDescription() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TokenUpsertOne) ClearDescription() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearDescription()
	})
}

// SetName sets the "name" field.
func (u *TokenUpsertOne) SetName(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateName() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TokenUpsertOne) ClearName() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearName()
	})
}

// SetVectorID sets the "vector_id" field.
func (u *TokenUpsertOne) SetVectorID(v int64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetVectorID(v)
	})
}

// AddVectorID adds v to the "vector_id" field.
func (u *TokenUpsertOne) AddVectorID(v int64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.AddVectorID(v)
	})
}

// UpdateVectorID sets the "vector_id" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateVectorID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateVectorID()
	})
}

// ClearVectorID clears the value of the "vector_id" field.
func (u *TokenUpsertOne) ClearVectorID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearVectorID()
	})
}

// SetVectorState sets the "vector_state" field.
func (u *TokenUpsertOne) SetVectorState(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetVectorState(v)
	})
}

// UpdateVectorState sets the "vector_state" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateVectorState() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateVectorState()
	})
}

// ClearVectorState clears the value of the "vector_state" field.
func (u *TokenUpsertOne) ClearVectorState() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearVectorState()
	})
}

// SetRemark sets the "remark" field.
func (u *TokenUpsertOne) SetRemark(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateRemark() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TokenUpsertOne) ClearRemark() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearRemark()
	})
}

// SetIpfsImageURL sets the "ipfs_image_url" field.
func (u *TokenUpsertOne) SetIpfsImageURL(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetIpfsImageURL(v)
	})
}

// UpdateIpfsImageURL sets the "ipfs_image_url" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateIpfsImageURL() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateIpfsImageURL()
	})
}

// ClearIpfsImageURL clears the value of the "ipfs_image_url" field.
func (u *TokenUpsertOne) ClearIpfsImageURL() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearIpfsImageURL()
	})
}

// SetImageSnapshotID sets the "image_snapshot_id" field.
func (u *TokenUpsertOne) SetImageSnapshotID(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetImageSnapshotID(v)
	})
}

// UpdateImageSnapshotID sets the "image_snapshot_id" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateImageSnapshotID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateImageSnapshotID()
	})
}

// ClearImageSnapshotID clears the value of the "image_snapshot_id" field.
func (u *TokenUpsertOne) ClearImageSnapshotID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.ClearImageSnapshotID()
	})
}

// Exec executes the query.
func (u *TokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TokenUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TokenUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TokenCreateBulk is the builder for creating many Token entities in bulk.
type TokenCreateBulk struct {
	config
	builders []*TokenCreate
	conflict []sql.ConflictOption
}

// Save creates the Token entities in the database.
func (tcb *TokenCreateBulk) Save(ctx context.Context) ([]*Token, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Token, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TokenCreateBulk) SaveX(ctx context.Context) []*Token {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TokenCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TokenCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Token.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TokenUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *TokenUpsertBulk {
	tcb.conflict = opts
	return &TokenUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TokenCreateBulk) OnConflictColumns(columns ...string) *TokenUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TokenUpsertBulk{
		create: tcb,
	}
}

// TokenUpsertBulk is the builder for "upsert"-ing
// a bulk of Token nodes.
type TokenUpsertBulk struct {
	create *TokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(token.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TokenUpsertBulk) UpdateNewValues() *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(token.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TokenUpsertBulk) Ignore() *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TokenUpsertBulk) DoNothing() *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TokenCreateBulk.OnConflict
// documentation for more info.
func (u *TokenUpsertBulk) Update(set func(*TokenUpsert)) *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TokenUpsertBulk) SetEntID(v uuid.UUID) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateEntID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TokenUpsertBulk) SetCreatedAt(v uint32) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TokenUpsertBulk) AddCreatedAt(v uint32) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateCreatedAt() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenUpsertBulk) SetUpdatedAt(v uint32) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TokenUpsertBulk) AddUpdatedAt(v uint32) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateUpdatedAt() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TokenUpsertBulk) SetDeletedAt(v uint32) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TokenUpsertBulk) AddDeletedAt(v uint32) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateDeletedAt() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *TokenUpsertBulk) SetChainType(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateChainType() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *TokenUpsertBulk) SetChainID(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateChainID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateChainID()
	})
}

// SetContract sets the "contract" field.
func (u *TokenUpsertBulk) SetContract(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateContract() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateContract()
	})
}

// SetTokenType sets the "token_type" field.
func (u *TokenUpsertBulk) SetTokenType(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateTokenType() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTokenType()
	})
}

// SetTokenID sets the "token_id" field.
func (u *TokenUpsertBulk) SetTokenID(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateTokenID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTokenID()
	})
}

// SetOwner sets the "owner" field.
func (u *TokenUpsertBulk) SetOwner(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateOwner() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateOwner()
	})
}

// ClearOwner clears the value of the "owner" field.
func (u *TokenUpsertBulk) ClearOwner() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearOwner()
	})
}

// SetURI sets the "uri" field.
func (u *TokenUpsertBulk) SetURI(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateURI() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateURI()
	})
}

// ClearURI clears the value of the "uri" field.
func (u *TokenUpsertBulk) ClearURI() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearURI()
	})
}

// SetURIType sets the "uri_type" field.
func (u *TokenUpsertBulk) SetURIType(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetURIType(v)
	})
}

// UpdateURIType sets the "uri_type" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateURIType() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateURIType()
	})
}

// ClearURIType clears the value of the "uri_type" field.
func (u *TokenUpsertBulk) ClearURIType() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearURIType()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TokenUpsertBulk) SetImageURL(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateImageURL() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TokenUpsertBulk) ClearImageURL() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearImageURL()
	})
}

// SetVideoURL sets the "video_url" field.
func (u *TokenUpsertBulk) SetVideoURL(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetVideoURL(v)
	})
}

// UpdateVideoURL sets the "video_url" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateVideoURL() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateVideoURL()
	})
}

// ClearVideoURL clears the value of the "video_url" field.
func (u *TokenUpsertBulk) ClearVideoURL() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearVideoURL()
	})
}

// SetDescription sets the "description" field.
func (u *TokenUpsertBulk) SetDescription(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateDescription() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TokenUpsertBulk) ClearDescription() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearDescription()
	})
}

// SetName sets the "name" field.
func (u *TokenUpsertBulk) SetName(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateName() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TokenUpsertBulk) ClearName() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearName()
	})
}

// SetVectorID sets the "vector_id" field.
func (u *TokenUpsertBulk) SetVectorID(v int64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetVectorID(v)
	})
}

// AddVectorID adds v to the "vector_id" field.
func (u *TokenUpsertBulk) AddVectorID(v int64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.AddVectorID(v)
	})
}

// UpdateVectorID sets the "vector_id" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateVectorID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateVectorID()
	})
}

// ClearVectorID clears the value of the "vector_id" field.
func (u *TokenUpsertBulk) ClearVectorID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearVectorID()
	})
}

// SetVectorState sets the "vector_state" field.
func (u *TokenUpsertBulk) SetVectorState(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetVectorState(v)
	})
}

// UpdateVectorState sets the "vector_state" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateVectorState() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateVectorState()
	})
}

// ClearVectorState clears the value of the "vector_state" field.
func (u *TokenUpsertBulk) ClearVectorState() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearVectorState()
	})
}

// SetRemark sets the "remark" field.
func (u *TokenUpsertBulk) SetRemark(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateRemark() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TokenUpsertBulk) ClearRemark() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearRemark()
	})
}

// SetIpfsImageURL sets the "ipfs_image_url" field.
func (u *TokenUpsertBulk) SetIpfsImageURL(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetIpfsImageURL(v)
	})
}

// UpdateIpfsImageURL sets the "ipfs_image_url" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateIpfsImageURL() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateIpfsImageURL()
	})
}

// ClearIpfsImageURL clears the value of the "ipfs_image_url" field.
func (u *TokenUpsertBulk) ClearIpfsImageURL() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearIpfsImageURL()
	})
}

// SetImageSnapshotID sets the "image_snapshot_id" field.
func (u *TokenUpsertBulk) SetImageSnapshotID(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetImageSnapshotID(v)
	})
}

// UpdateImageSnapshotID sets the "image_snapshot_id" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateImageSnapshotID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateImageSnapshotID()
	})
}

// ClearImageSnapshotID clears the value of the "image_snapshot_id" field.
func (u *TokenUpsertBulk) ClearImageSnapshotID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.ClearImageSnapshotID()
	})
}

// Exec executes the query.
func (u *TokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
