// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: web3eye/nftmeta/v1/synctask/synctask.proto

package synctask

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateSyncTask(ctx context.Context, in *CreateSyncTaskRequest, opts ...grpc.CallOption) (*CreateSyncTaskResponse, error)
	TriggerSyncTask(ctx context.Context, in *TriggerSyncTaskRequest, opts ...grpc.CallOption) (*TriggerSyncTaskResponse, error)
	UpdateSyncTask(ctx context.Context, in *UpdateSyncTaskRequest, opts ...grpc.CallOption) (*UpdateSyncTaskResponse, error)
	GetSyncTask(ctx context.Context, in *GetSyncTaskRequest, opts ...grpc.CallOption) (*GetSyncTaskResponse, error)
	GetSyncTaskOnly(ctx context.Context, in *GetSyncTaskOnlyRequest, opts ...grpc.CallOption) (*GetSyncTaskOnlyResponse, error)
	GetSyncTasks(ctx context.Context, in *GetSyncTasksRequest, opts ...grpc.CallOption) (*GetSyncTasksResponse, error)
	ExistSyncTask(ctx context.Context, in *ExistSyncTaskRequest, opts ...grpc.CallOption) (*ExistSyncTaskResponse, error)
	ExistSyncTaskConds(ctx context.Context, in *ExistSyncTaskCondsRequest, opts ...grpc.CallOption) (*ExistSyncTaskCondsResponse, error)
	DeleteSyncTask(ctx context.Context, in *DeleteSyncTaskRequest, opts ...grpc.CallOption) (*DeleteSyncTaskResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateSyncTask(ctx context.Context, in *CreateSyncTaskRequest, opts ...grpc.CallOption) (*CreateSyncTaskResponse, error) {
	out := new(CreateSyncTaskResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/CreateSyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) TriggerSyncTask(ctx context.Context, in *TriggerSyncTaskRequest, opts ...grpc.CallOption) (*TriggerSyncTaskResponse, error) {
	out := new(TriggerSyncTaskResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/TriggerSyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateSyncTask(ctx context.Context, in *UpdateSyncTaskRequest, opts ...grpc.CallOption) (*UpdateSyncTaskResponse, error) {
	out := new(UpdateSyncTaskResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/UpdateSyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSyncTask(ctx context.Context, in *GetSyncTaskRequest, opts ...grpc.CallOption) (*GetSyncTaskResponse, error) {
	out := new(GetSyncTaskResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/GetSyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSyncTaskOnly(ctx context.Context, in *GetSyncTaskOnlyRequest, opts ...grpc.CallOption) (*GetSyncTaskOnlyResponse, error) {
	out := new(GetSyncTaskOnlyResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/GetSyncTaskOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSyncTasks(ctx context.Context, in *GetSyncTasksRequest, opts ...grpc.CallOption) (*GetSyncTasksResponse, error) {
	out := new(GetSyncTasksResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/GetSyncTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSyncTask(ctx context.Context, in *ExistSyncTaskRequest, opts ...grpc.CallOption) (*ExistSyncTaskResponse, error) {
	out := new(ExistSyncTaskResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/ExistSyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSyncTaskConds(ctx context.Context, in *ExistSyncTaskCondsRequest, opts ...grpc.CallOption) (*ExistSyncTaskCondsResponse, error) {
	out := new(ExistSyncTaskCondsResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/ExistSyncTaskConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteSyncTask(ctx context.Context, in *DeleteSyncTaskRequest, opts ...grpc.CallOption) (*DeleteSyncTaskResponse, error) {
	out := new(DeleteSyncTaskResponse)
	err := c.cc.Invoke(ctx, "/nftmeta.v1.synctask.Manager/DeleteSyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateSyncTask(context.Context, *CreateSyncTaskRequest) (*CreateSyncTaskResponse, error)
	TriggerSyncTask(context.Context, *TriggerSyncTaskRequest) (*TriggerSyncTaskResponse, error)
	UpdateSyncTask(context.Context, *UpdateSyncTaskRequest) (*UpdateSyncTaskResponse, error)
	GetSyncTask(context.Context, *GetSyncTaskRequest) (*GetSyncTaskResponse, error)
	GetSyncTaskOnly(context.Context, *GetSyncTaskOnlyRequest) (*GetSyncTaskOnlyResponse, error)
	GetSyncTasks(context.Context, *GetSyncTasksRequest) (*GetSyncTasksResponse, error)
	ExistSyncTask(context.Context, *ExistSyncTaskRequest) (*ExistSyncTaskResponse, error)
	ExistSyncTaskConds(context.Context, *ExistSyncTaskCondsRequest) (*ExistSyncTaskCondsResponse, error)
	DeleteSyncTask(context.Context, *DeleteSyncTaskRequest) (*DeleteSyncTaskResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateSyncTask(context.Context, *CreateSyncTaskRequest) (*CreateSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncTask not implemented")
}
func (UnimplementedManagerServer) TriggerSyncTask(context.Context, *TriggerSyncTaskRequest) (*TriggerSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSyncTask not implemented")
}
func (UnimplementedManagerServer) UpdateSyncTask(context.Context, *UpdateSyncTaskRequest) (*UpdateSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncTask not implemented")
}
func (UnimplementedManagerServer) GetSyncTask(context.Context, *GetSyncTaskRequest) (*GetSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncTask not implemented")
}
func (UnimplementedManagerServer) GetSyncTaskOnly(context.Context, *GetSyncTaskOnlyRequest) (*GetSyncTaskOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncTaskOnly not implemented")
}
func (UnimplementedManagerServer) GetSyncTasks(context.Context, *GetSyncTasksRequest) (*GetSyncTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncTasks not implemented")
}
func (UnimplementedManagerServer) ExistSyncTask(context.Context, *ExistSyncTaskRequest) (*ExistSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSyncTask not implemented")
}
func (UnimplementedManagerServer) ExistSyncTaskConds(context.Context, *ExistSyncTaskCondsRequest) (*ExistSyncTaskCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSyncTaskConds not implemented")
}
func (UnimplementedManagerServer) DeleteSyncTask(context.Context, *DeleteSyncTaskRequest) (*DeleteSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncTask not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/CreateSyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSyncTask(ctx, req.(*CreateSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_TriggerSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).TriggerSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/TriggerSyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).TriggerSyncTask(ctx, req.(*TriggerSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/UpdateSyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateSyncTask(ctx, req.(*UpdateSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/GetSyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSyncTask(ctx, req.(*GetSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSyncTaskOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncTaskOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSyncTaskOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/GetSyncTaskOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSyncTaskOnly(ctx, req.(*GetSyncTaskOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSyncTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSyncTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/GetSyncTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSyncTasks(ctx, req.(*GetSyncTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/ExistSyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSyncTask(ctx, req.(*ExistSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSyncTaskConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSyncTaskCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSyncTaskConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/ExistSyncTaskConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSyncTaskConds(ctx, req.(*ExistSyncTaskCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nftmeta.v1.synctask.Manager/DeleteSyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteSyncTask(ctx, req.(*DeleteSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nftmeta.v1.synctask.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSyncTask",
			Handler:    _Manager_CreateSyncTask_Handler,
		},
		{
			MethodName: "TriggerSyncTask",
			Handler:    _Manager_TriggerSyncTask_Handler,
		},
		{
			MethodName: "UpdateSyncTask",
			Handler:    _Manager_UpdateSyncTask_Handler,
		},
		{
			MethodName: "GetSyncTask",
			Handler:    _Manager_GetSyncTask_Handler,
		},
		{
			MethodName: "GetSyncTaskOnly",
			Handler:    _Manager_GetSyncTaskOnly_Handler,
		},
		{
			MethodName: "GetSyncTasks",
			Handler:    _Manager_GetSyncTasks_Handler,
		},
		{
			MethodName: "ExistSyncTask",
			Handler:    _Manager_ExistSyncTask_Handler,
		},
		{
			MethodName: "ExistSyncTaskConds",
			Handler:    _Manager_ExistSyncTaskConds_Handler,
		},
		{
			MethodName: "DeleteSyncTask",
			Handler:    _Manager_DeleteSyncTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3eye/nftmeta/v1/synctask/synctask.proto",
}
