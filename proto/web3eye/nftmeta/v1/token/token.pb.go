// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: web3eye/nftmeta/v1/token/token.proto

package token

import (
	web3eye "github.com/web3eye-io/Web3Eye/proto/web3eye"
	v1 "github.com/web3eye-io/Web3Eye/proto/web3eye/basetype/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// for show the state that resource_addr is converted to vector
type ConvertState int32

const (
	ConvertState_Default    ConvertState = 0
	ConvertState_Waiting    ConvertState = 10
	ConvertState_Processing ConvertState = 20
	ConvertState_Pause      ConvertState = 30
	ConvertState_Success    ConvertState = 40
	ConvertState_Failed     ConvertState = 50
)

// Enum value maps for ConvertState.
var (
	ConvertState_name = map[int32]string{
		0:  "Default",
		10: "Waiting",
		20: "Processing",
		30: "Pause",
		40: "Success",
		50: "Failed",
	}
	ConvertState_value = map[string]int32{
		"Default":    0,
		"Waiting":    10,
		"Processing": 20,
		"Pause":      30,
		"Success":    40,
		"Failed":     50,
	}
)

func (x ConvertState) Enum() *ConvertState {
	p := new(ConvertState)
	*p = x
	return p
}

func (x ConvertState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConvertState) Descriptor() protoreflect.EnumDescriptor {
	return file_web3eye_nftmeta_v1_token_token_proto_enumTypes[0].Descriptor()
}

func (ConvertState) Type() protoreflect.EnumType {
	return &file_web3eye_nftmeta_v1_token_token_proto_enumTypes[0]
}

func (x ConvertState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConvertState.Descriptor instead.
func (ConvertState) EnumDescriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{0}
}

type TokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *uint32       `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID           *string       `protobuf:"bytes,11,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	ChainType       *v1.ChainType `protobuf:"varint,20,opt,name=ChainType,proto3,enum=chain.ChainType,oneof" json:"ChainType,omitempty"`
	ChainID         *string       `protobuf:"bytes,30,opt,name=ChainID,proto3,oneof" json:"ChainID,omitempty"`
	Contract        *string       `protobuf:"bytes,40,opt,name=Contract,proto3,oneof" json:"Contract,omitempty"`
	TokenType       *v1.TokenType `protobuf:"varint,50,opt,name=TokenType,proto3,enum=chain.TokenType,oneof" json:"TokenType,omitempty"`
	TokenID         *string       `protobuf:"bytes,60,opt,name=TokenID,proto3,oneof" json:"TokenID,omitempty"`
	Owner           *string       `protobuf:"bytes,70,opt,name=Owner,proto3,oneof" json:"Owner,omitempty"`
	URI             *string       `protobuf:"bytes,80,opt,name=URI,proto3,oneof" json:"URI,omitempty"`
	URIType         *string       `protobuf:"bytes,90,opt,name=URIType,proto3,oneof" json:"URIType,omitempty"`
	ImageURL        *string       `protobuf:"bytes,100,opt,name=ImageURL,proto3,oneof" json:"ImageURL,omitempty"`
	VideoURL        *string       `protobuf:"bytes,110,opt,name=VideoURL,proto3,oneof" json:"VideoURL,omitempty"`
	Name            *string       `protobuf:"bytes,120,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Description     *string       `protobuf:"bytes,130,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	VectorState     *ConvertState `protobuf:"varint,140,opt,name=VectorState,proto3,enum=nftmeta.v1.token.ConvertState,oneof" json:"VectorState,omitempty"`
	VectorID        *int64        `protobuf:"varint,150,opt,name=VectorID,proto3,oneof" json:"VectorID,omitempty"`
	Remark          *string       `protobuf:"bytes,160,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
	IPFSImageURL    *string       `protobuf:"bytes,170,opt,name=IPFSImageURL,proto3,oneof" json:"IPFSImageURL,omitempty"`
	ImageSnapshotID *uint32       `protobuf:"varint,180,opt,name=ImageSnapshotID,proto3,oneof" json:"ImageSnapshotID,omitempty"`
}

func (x *TokenReq) Reset() {
	*x = TokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenReq) ProtoMessage() {}

func (x *TokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenReq.ProtoReflect.Descriptor instead.
func (*TokenReq) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{0}
}

func (x *TokenReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *TokenReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *TokenReq) GetChainType() v1.ChainType {
	if x != nil && x.ChainType != nil {
		return *x.ChainType
	}
	return v1.ChainType(0)
}

func (x *TokenReq) GetChainID() string {
	if x != nil && x.ChainID != nil {
		return *x.ChainID
	}
	return ""
}

func (x *TokenReq) GetContract() string {
	if x != nil && x.Contract != nil {
		return *x.Contract
	}
	return ""
}

func (x *TokenReq) GetTokenType() v1.TokenType {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return v1.TokenType(0)
}

func (x *TokenReq) GetTokenID() string {
	if x != nil && x.TokenID != nil {
		return *x.TokenID
	}
	return ""
}

func (x *TokenReq) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *TokenReq) GetURI() string {
	if x != nil && x.URI != nil {
		return *x.URI
	}
	return ""
}

func (x *TokenReq) GetURIType() string {
	if x != nil && x.URIType != nil {
		return *x.URIType
	}
	return ""
}

func (x *TokenReq) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *TokenReq) GetVideoURL() string {
	if x != nil && x.VideoURL != nil {
		return *x.VideoURL
	}
	return ""
}

func (x *TokenReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TokenReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TokenReq) GetVectorState() ConvertState {
	if x != nil && x.VectorState != nil {
		return *x.VectorState
	}
	return ConvertState_Default
}

func (x *TokenReq) GetVectorID() int64 {
	if x != nil && x.VectorID != nil {
		return *x.VectorID
	}
	return 0
}

func (x *TokenReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *TokenReq) GetIPFSImageURL() string {
	if x != nil && x.IPFSImageURL != nil {
		return *x.IPFSImageURL
	}
	return ""
}

func (x *TokenReq) GetImageSnapshotID() uint32 {
	if x != nil && x.ImageSnapshotID != nil {
		return *x.ImageSnapshotID
	}
	return 0
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,11,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"chain_type"
	ChainTypeStr string       `protobuf:"bytes,20,opt,name=ChainTypeStr,proto3" json:"ChainTypeStr,omitempty" sql:"chain_type"`
	ChainType    v1.ChainType `protobuf:"varint,21,opt,name=ChainType,proto3,enum=chain.ChainType" json:"ChainType,omitempty"`
	// @inject_tag: sql:"chain_id"
	ChainID string `protobuf:"bytes,30,opt,name=ChainID,proto3" json:"ChainID,omitempty" sql:"chain_id"`
	// @inject_tag: sql:"contract"
	Contract string `protobuf:"bytes,40,opt,name=Contract,proto3" json:"Contract,omitempty" sql:"contract"`
	// @inject_tag: sql:"token_type"
	TokenTypeStr string       `protobuf:"bytes,50,opt,name=TokenTypeStr,proto3" json:"TokenTypeStr,omitempty" sql:"token_type"`
	TokenType    v1.TokenType `protobuf:"varint,51,opt,name=TokenType,proto3,enum=chain.TokenType" json:"TokenType,omitempty"`
	// @inject_tag: sql:"token_id"
	TokenID string `protobuf:"bytes,60,opt,name=TokenID,proto3" json:"TokenID,omitempty" sql:"token_id"`
	// @inject_tag: sql:"owner"
	Owner string `protobuf:"bytes,70,opt,name=Owner,proto3" json:"Owner,omitempty" sql:"owner"`
	// @inject_tag: sql:"uri"
	URI string `protobuf:"bytes,80,opt,name=URI,proto3" json:"URI,omitempty" sql:"uri"`
	// @inject_tag: sql:"uri_type"
	URIType string `protobuf:"bytes,90,opt,name=URIType,proto3" json:"URIType,omitempty" sql:"uri_type"`
	// @inject_tag: sql:"image_url"
	ImageURL string `protobuf:"bytes,100,opt,name=ImageURL,proto3" json:"ImageURL,omitempty" sql:"image_url"`
	// @inject_tag: sql:"video_url"
	VideoURL string `protobuf:"bytes,110,opt,name=VideoURL,proto3" json:"VideoURL,omitempty" sql:"video_url"`
	// @inject_tag: sql:"description"
	Description string `protobuf:"bytes,120,opt,name=Description,proto3" json:"Description,omitempty" sql:"description"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,130,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"vector_state"
	VectorStateStr string       `protobuf:"bytes,140,opt,name=VectorStateStr,proto3" json:"VectorStateStr,omitempty" sql:"vector_state"`
	VectorState    ConvertState `protobuf:"varint,141,opt,name=VectorState,proto3,enum=nftmeta.v1.token.ConvertState" json:"VectorState,omitempty"`
	// @inject_tag: sql:"vector_id"
	VectorID int64 `protobuf:"varint,150,opt,name=VectorID,proto3" json:"VectorID,omitempty" sql:"vector_id"`
	// @inject_tag: sql:"remark"
	Remark string `protobuf:"bytes,160,opt,name=Remark,proto3" json:"Remark,omitempty" sql:"remark"`
	// @inject_tag: sql:"ipfs_image_url"
	IPFSImageURL string `protobuf:"bytes,170,opt,name=IPFSImageURL,proto3" json:"IPFSImageURL,omitempty" sql:"ipfs_image_url"`
	// @inject_tag: sql:"image_snapshot_id"
	ImageSnapshotID uint32 `protobuf:"varint,180,opt,name=ImageSnapshotID,proto3" json:"ImageSnapshotID,omitempty" sql:"image_snapshot_id"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,190,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,200,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{1}
}

func (x *Token) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Token) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Token) GetChainTypeStr() string {
	if x != nil {
		return x.ChainTypeStr
	}
	return ""
}

func (x *Token) GetChainType() v1.ChainType {
	if x != nil {
		return x.ChainType
	}
	return v1.ChainType(0)
}

func (x *Token) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *Token) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *Token) GetTokenTypeStr() string {
	if x != nil {
		return x.TokenTypeStr
	}
	return ""
}

func (x *Token) GetTokenType() v1.TokenType {
	if x != nil {
		return x.TokenType
	}
	return v1.TokenType(0)
}

func (x *Token) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *Token) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Token) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *Token) GetURIType() string {
	if x != nil {
		return x.URIType
	}
	return ""
}

func (x *Token) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *Token) GetVideoURL() string {
	if x != nil {
		return x.VideoURL
	}
	return ""
}

func (x *Token) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Token) GetVectorStateStr() string {
	if x != nil {
		return x.VectorStateStr
	}
	return ""
}

func (x *Token) GetVectorState() ConvertState {
	if x != nil {
		return x.VectorState
	}
	return ConvertState_Default
}

func (x *Token) GetVectorID() int64 {
	if x != nil {
		return x.VectorID
	}
	return 0
}

func (x *Token) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Token) GetIPFSImageURL() string {
	if x != nil {
		return x.IPFSImageURL
	}
	return ""
}

func (x *Token) GetImageSnapshotID() uint32 {
	if x != nil {
		return x.ImageSnapshotID
	}
	return 0
}

func (x *Token) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Token) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *web3eye.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID           *web3eye.StringVal      `protobuf:"bytes,11,opt,name=EntID,proto3" json:"EntID,omitempty"`
	ChainType       *web3eye.Uint32Val      `protobuf:"bytes,20,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	ChainID         *web3eye.StringVal      `protobuf:"bytes,30,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Contract        *web3eye.StringVal      `protobuf:"bytes,40,opt,name=Contract,proto3" json:"Contract,omitempty"`
	TokenType       *web3eye.Uint32Val      `protobuf:"bytes,50,opt,name=TokenType,proto3" json:"TokenType,omitempty"`
	TokenID         *web3eye.StringVal      `protobuf:"bytes,60,opt,name=TokenID,proto3" json:"TokenID,omitempty"`
	Owner           *web3eye.StringVal      `protobuf:"bytes,70,opt,name=Owner,proto3" json:"Owner,omitempty"`
	URI             *web3eye.StringVal      `protobuf:"bytes,80,opt,name=URI,proto3" json:"URI,omitempty"`
	URIType         *web3eye.StringVal      `protobuf:"bytes,90,opt,name=URIType,proto3" json:"URIType,omitempty"`
	ImageURL        *web3eye.StringVal      `protobuf:"bytes,100,opt,name=ImageURL,proto3" json:"ImageURL,omitempty"`
	VideoURL        *web3eye.StringVal      `protobuf:"bytes,110,opt,name=VideoURL,proto3" json:"VideoURL,omitempty"`
	Description     *web3eye.StringVal      `protobuf:"bytes,120,opt,name=Description,proto3" json:"Description,omitempty"`
	Name            *web3eye.StringVal      `protobuf:"bytes,130,opt,name=Name,proto3" json:"Name,omitempty"`
	VectorState     *web3eye.Uint32Val      `protobuf:"bytes,140,opt,name=VectorState,proto3" json:"VectorState,omitempty"`
	VectorID        *web3eye.Int64Val       `protobuf:"bytes,150,opt,name=VectorID,proto3" json:"VectorID,omitempty"`
	Remark          *web3eye.StringVal      `protobuf:"bytes,160,opt,name=Remark,proto3" json:"Remark,omitempty"`
	IPFSImageURL    *web3eye.StringVal      `protobuf:"bytes,170,opt,name=IPFSImageURL,proto3" json:"IPFSImageURL,omitempty"`
	ImageSnapshotID *web3eye.Uint32Val      `protobuf:"bytes,180,opt,name=ImageSnapshotID,proto3" json:"ImageSnapshotID,omitempty"`
	EntIDs          *web3eye.StringSliceVal `protobuf:"bytes,190,opt,name=EntIDs,proto3" json:"EntIDs,omitempty"`
	VectorIDs       *web3eye.Int64SliceVal  `protobuf:"bytes,200,opt,name=VectorIDs,proto3" json:"VectorIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *web3eye.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *web3eye.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetChainType() *web3eye.Uint32Val {
	if x != nil {
		return x.ChainType
	}
	return nil
}

func (x *Conds) GetChainID() *web3eye.StringVal {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *Conds) GetContract() *web3eye.StringVal {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Conds) GetTokenType() *web3eye.Uint32Val {
	if x != nil {
		return x.TokenType
	}
	return nil
}

func (x *Conds) GetTokenID() *web3eye.StringVal {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *Conds) GetOwner() *web3eye.StringVal {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Conds) GetURI() *web3eye.StringVal {
	if x != nil {
		return x.URI
	}
	return nil
}

func (x *Conds) GetURIType() *web3eye.StringVal {
	if x != nil {
		return x.URIType
	}
	return nil
}

func (x *Conds) GetImageURL() *web3eye.StringVal {
	if x != nil {
		return x.ImageURL
	}
	return nil
}

func (x *Conds) GetVideoURL() *web3eye.StringVal {
	if x != nil {
		return x.VideoURL
	}
	return nil
}

func (x *Conds) GetDescription() *web3eye.StringVal {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Conds) GetName() *web3eye.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conds) GetVectorState() *web3eye.Uint32Val {
	if x != nil {
		return x.VectorState
	}
	return nil
}

func (x *Conds) GetVectorID() *web3eye.Int64Val {
	if x != nil {
		return x.VectorID
	}
	return nil
}

func (x *Conds) GetRemark() *web3eye.StringVal {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *Conds) GetIPFSImageURL() *web3eye.StringVal {
	if x != nil {
		return x.IPFSImageURL
	}
	return nil
}

func (x *Conds) GetImageSnapshotID() *web3eye.Uint32Val {
	if x != nil {
		return x.ImageSnapshotID
	}
	return nil
}

func (x *Conds) GetEntIDs() *web3eye.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetVectorIDs() *web3eye.Int64SliceVal {
	if x != nil {
		return x.VectorIDs
	}
	return nil
}

type CreateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TokenReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTokenRequest) Reset() {
	*x = CreateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenRequest) ProtoMessage() {}

func (x *CreateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateTokenRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTokenRequest) GetInfo() *TokenReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Token `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTokenResponse) Reset() {
	*x = CreateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenResponse) ProtoMessage() {}

func (x *CreateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateTokenResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTokenResponse) GetInfo() *Token {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpsertTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TokenReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpsertTokenRequest) Reset() {
	*x = UpsertTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTokenRequest) ProtoMessage() {}

func (x *UpsertTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTokenRequest.ProtoReflect.Descriptor instead.
func (*UpsertTokenRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertTokenRequest) GetInfo() *TokenReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpsertTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Token `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpsertTokenResponse) Reset() {
	*x = UpsertTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTokenResponse) ProtoMessage() {}

func (x *UpsertTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTokenResponse.ProtoReflect.Descriptor instead.
func (*UpsertTokenResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertTokenResponse) GetInfo() *Token {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TokenReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTokensRequest) Reset() {
	*x = CreateTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokensRequest) ProtoMessage() {}

func (x *CreateTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokensRequest.ProtoReflect.Descriptor instead.
func (*CreateTokensRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTokensRequest) GetInfos() []*TokenReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Token `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTokensResponse) Reset() {
	*x = CreateTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokensResponse) ProtoMessage() {}

func (x *CreateTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokensResponse.ProtoReflect.Descriptor instead.
func (*CreateTokensResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTokensResponse) GetInfos() []*Token {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTokenRequest) Reset() {
	*x = GetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenRequest) ProtoMessage() {}

func (x *GetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{9}
}

func (x *GetTokenRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Token `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTokenResponse) Reset() {
	*x = GetTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenResponse) ProtoMessage() {}

func (x *GetTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenResponse.ProtoReflect.Descriptor instead.
func (*GetTokenResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{10}
}

func (x *GetTokenResponse) GetInfo() *Token {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTokensRequest) Reset() {
	*x = GetTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensRequest) ProtoMessage() {}

func (x *GetTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensRequest.ProtoReflect.Descriptor instead.
func (*GetTokensRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{11}
}

func (x *GetTokensRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetTokensRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTokensRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Token `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32   `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTokensResponse) Reset() {
	*x = GetTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensResponse) ProtoMessage() {}

func (x *GetTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensResponse.ProtoReflect.Descriptor instead.
func (*GetTokensResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{12}
}

func (x *GetTokensResponse) GetInfos() []*Token {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTokensResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetTokenOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetTokenOnlyRequest) Reset() {
	*x = GetTokenOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenOnlyRequest) ProtoMessage() {}

func (x *GetTokenOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetTokenOnlyRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{13}
}

func (x *GetTokenOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetTokenOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Token `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTokenOnlyResponse) Reset() {
	*x = GetTokenOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenOnlyResponse) ProtoMessage() {}

func (x *GetTokenOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetTokenOnlyResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{14}
}

func (x *GetTokenOnlyResponse) GetInfo() *Token {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TokenReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTokenRequest) Reset() {
	*x = UpdateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenRequest) ProtoMessage() {}

func (x *UpdateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateTokenRequest) GetInfo() *TokenReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Token `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTokenResponse) Reset() {
	*x = UpdateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenResponse) ProtoMessage() {}

func (x *UpdateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenResponse.ProtoReflect.Descriptor instead.
func (*UpdateTokenResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateTokenResponse) GetInfo() *Token {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateImageVectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32    `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Vector []float32 `protobuf:"fixed32,20,rep,packed,name=Vector,proto3" json:"Vector,omitempty"`
	Remark string    `protobuf:"bytes,30,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (x *UpdateImageVectorRequest) Reset() {
	*x = UpdateImageVectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageVectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageVectorRequest) ProtoMessage() {}

func (x *UpdateImageVectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageVectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateImageVectorRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateImageVectorRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateImageVectorRequest) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *UpdateImageVectorRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type UpdateImageVectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Token `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateImageVectorResponse) Reset() {
	*x = UpdateImageVectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageVectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageVectorResponse) ProtoMessage() {}

func (x *UpdateImageVectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageVectorResponse.ProtoReflect.Descriptor instead.
func (*UpdateImageVectorResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateImageVectorResponse) GetInfo() *Token {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistTokenRequest) Reset() {
	*x = ExistTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTokenRequest) ProtoMessage() {}

func (x *ExistTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTokenRequest.ProtoReflect.Descriptor instead.
func (*ExistTokenRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{19}
}

func (x *ExistTokenRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ExistTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistTokenResponse) Reset() {
	*x = ExistTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTokenResponse) ProtoMessage() {}

func (x *ExistTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTokenResponse.ProtoReflect.Descriptor instead.
func (*ExistTokenResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{20}
}

func (x *ExistTokenResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type ExistTokenCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistTokenCondsRequest) Reset() {
	*x = ExistTokenCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTokenCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTokenCondsRequest) ProtoMessage() {}

func (x *ExistTokenCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTokenCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistTokenCondsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{21}
}

func (x *ExistTokenCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistTokenCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistTokenCondsResponse) Reset() {
	*x = ExistTokenCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTokenCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTokenCondsResponse) ProtoMessage() {}

func (x *ExistTokenCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTokenCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistTokenCondsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{22}
}

func (x *ExistTokenCondsResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type DeleteTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteTokenRequest) Reset() {
	*x = DeleteTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokenRequest) ProtoMessage() {}

func (x *DeleteTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokenRequest.ProtoReflect.Descriptor instead.
func (*DeleteTokenRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteTokenRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Token `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTokenResponse) Reset() {
	*x = DeleteTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokenResponse) ProtoMessage() {}

func (x *DeleteTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_token_token_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokenResponse.ProtoReflect.Descriptor instead.
func (*DeleteTokenResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteTokenResponse) GetInfo() *Token {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_web3eye_nftmeta_v1_token_token_proto protoreflect.FileDescriptor

var file_web3eye_nftmeta_v1_token_token_proto_rawDesc = []byte{
	0x0a, 0x24, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f,
	0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x77,
	0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9,
	0x07, 0x0a, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x03,
	0x55, 0x52, 0x49, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x55, 0x52, 0x49, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x55, 0x52, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x52, 0x4c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x0e,
	0x52, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0c, 0x49, 0x50, 0x46, 0x53, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0c, 0x49, 0x50, 0x46, 0x53, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x18, 0xb4, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x55, 0x52, 0x49, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x55, 0x52, 0x49, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x52, 0x4c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x49, 0x50, 0x46, 0x53, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x22, 0x86, 0x06, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2e,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x52,
	0x49, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x52, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0c, 0x49, 0x50, 0x46, 0x53, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x50,
	0x46, 0x53, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x29, 0x0a, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x18, 0xb4, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xf7, 0x07, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x52, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x05, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62,
	0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x2c, 0x0a, 0x07, 0x55,
	0x52, 0x49, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77,
	0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x52, 0x07, 0x55, 0x52, 0x49, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65,
	0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52,
	0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x08, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65,
	0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52,
	0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x52, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x52, 0x08, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x0c,
	0x49, 0x50, 0x46, 0x53, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x0c, 0x49, 0x50, 0x46, 0x53, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x3d, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x52, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x06,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x62,
	0x33, 0x65, 0x79, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x52, 0x09, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x73, 0x22, 0x44, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x44, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a,
	0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x47, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x44, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x42, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x48, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x11, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x2a, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x16,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x2a, 0x5c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x32, 0x32, 0xe1,
	0x08, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x25, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x59, 0x0a, 0x0a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x57, 0x65, 0x62, 0x33,
	0x45, 0x79, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79,
	0x65, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web3eye_nftmeta_v1_token_token_proto_rawDescOnce sync.Once
	file_web3eye_nftmeta_v1_token_token_proto_rawDescData = file_web3eye_nftmeta_v1_token_token_proto_rawDesc
)

func file_web3eye_nftmeta_v1_token_token_proto_rawDescGZIP() []byte {
	file_web3eye_nftmeta_v1_token_token_proto_rawDescOnce.Do(func() {
		file_web3eye_nftmeta_v1_token_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_web3eye_nftmeta_v1_token_token_proto_rawDescData)
	})
	return file_web3eye_nftmeta_v1_token_token_proto_rawDescData
}

var file_web3eye_nftmeta_v1_token_token_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_web3eye_nftmeta_v1_token_token_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_web3eye_nftmeta_v1_token_token_proto_goTypes = []interface{}{
	(ConvertState)(0),                 // 0: nftmeta.v1.token.ConvertState
	(*TokenReq)(nil),                  // 1: nftmeta.v1.token.TokenReq
	(*Token)(nil),                     // 2: nftmeta.v1.token.Token
	(*Conds)(nil),                     // 3: nftmeta.v1.token.Conds
	(*CreateTokenRequest)(nil),        // 4: nftmeta.v1.token.CreateTokenRequest
	(*CreateTokenResponse)(nil),       // 5: nftmeta.v1.token.CreateTokenResponse
	(*UpsertTokenRequest)(nil),        // 6: nftmeta.v1.token.UpsertTokenRequest
	(*UpsertTokenResponse)(nil),       // 7: nftmeta.v1.token.UpsertTokenResponse
	(*CreateTokensRequest)(nil),       // 8: nftmeta.v1.token.CreateTokensRequest
	(*CreateTokensResponse)(nil),      // 9: nftmeta.v1.token.CreateTokensResponse
	(*GetTokenRequest)(nil),           // 10: nftmeta.v1.token.GetTokenRequest
	(*GetTokenResponse)(nil),          // 11: nftmeta.v1.token.GetTokenResponse
	(*GetTokensRequest)(nil),          // 12: nftmeta.v1.token.GetTokensRequest
	(*GetTokensResponse)(nil),         // 13: nftmeta.v1.token.GetTokensResponse
	(*GetTokenOnlyRequest)(nil),       // 14: nftmeta.v1.token.GetTokenOnlyRequest
	(*GetTokenOnlyResponse)(nil),      // 15: nftmeta.v1.token.GetTokenOnlyResponse
	(*UpdateTokenRequest)(nil),        // 16: nftmeta.v1.token.UpdateTokenRequest
	(*UpdateTokenResponse)(nil),       // 17: nftmeta.v1.token.UpdateTokenResponse
	(*UpdateImageVectorRequest)(nil),  // 18: nftmeta.v1.token.UpdateImageVectorRequest
	(*UpdateImageVectorResponse)(nil), // 19: nftmeta.v1.token.UpdateImageVectorResponse
	(*ExistTokenRequest)(nil),         // 20: nftmeta.v1.token.ExistTokenRequest
	(*ExistTokenResponse)(nil),        // 21: nftmeta.v1.token.ExistTokenResponse
	(*ExistTokenCondsRequest)(nil),    // 22: nftmeta.v1.token.ExistTokenCondsRequest
	(*ExistTokenCondsResponse)(nil),   // 23: nftmeta.v1.token.ExistTokenCondsResponse
	(*DeleteTokenRequest)(nil),        // 24: nftmeta.v1.token.DeleteTokenRequest
	(*DeleteTokenResponse)(nil),       // 25: nftmeta.v1.token.DeleteTokenResponse
	(v1.ChainType)(0),                 // 26: chain.ChainType
	(v1.TokenType)(0),                 // 27: chain.TokenType
	(*web3eye.Uint32Val)(nil),         // 28: web3eye.Uint32Val
	(*web3eye.StringVal)(nil),         // 29: web3eye.StringVal
	(*web3eye.Int64Val)(nil),          // 30: web3eye.Int64Val
	(*web3eye.StringSliceVal)(nil),    // 31: web3eye.StringSliceVal
	(*web3eye.Int64SliceVal)(nil),     // 32: web3eye.Int64SliceVal
}
var file_web3eye_nftmeta_v1_token_token_proto_depIdxs = []int32{
	26, // 0: nftmeta.v1.token.TokenReq.ChainType:type_name -> chain.ChainType
	27, // 1: nftmeta.v1.token.TokenReq.TokenType:type_name -> chain.TokenType
	0,  // 2: nftmeta.v1.token.TokenReq.VectorState:type_name -> nftmeta.v1.token.ConvertState
	26, // 3: nftmeta.v1.token.Token.ChainType:type_name -> chain.ChainType
	27, // 4: nftmeta.v1.token.Token.TokenType:type_name -> chain.TokenType
	0,  // 5: nftmeta.v1.token.Token.VectorState:type_name -> nftmeta.v1.token.ConvertState
	28, // 6: nftmeta.v1.token.Conds.ID:type_name -> web3eye.Uint32Val
	29, // 7: nftmeta.v1.token.Conds.EntID:type_name -> web3eye.StringVal
	28, // 8: nftmeta.v1.token.Conds.ChainType:type_name -> web3eye.Uint32Val
	29, // 9: nftmeta.v1.token.Conds.ChainID:type_name -> web3eye.StringVal
	29, // 10: nftmeta.v1.token.Conds.Contract:type_name -> web3eye.StringVal
	28, // 11: nftmeta.v1.token.Conds.TokenType:type_name -> web3eye.Uint32Val
	29, // 12: nftmeta.v1.token.Conds.TokenID:type_name -> web3eye.StringVal
	29, // 13: nftmeta.v1.token.Conds.Owner:type_name -> web3eye.StringVal
	29, // 14: nftmeta.v1.token.Conds.URI:type_name -> web3eye.StringVal
	29, // 15: nftmeta.v1.token.Conds.URIType:type_name -> web3eye.StringVal
	29, // 16: nftmeta.v1.token.Conds.ImageURL:type_name -> web3eye.StringVal
	29, // 17: nftmeta.v1.token.Conds.VideoURL:type_name -> web3eye.StringVal
	29, // 18: nftmeta.v1.token.Conds.Description:type_name -> web3eye.StringVal
	29, // 19: nftmeta.v1.token.Conds.Name:type_name -> web3eye.StringVal
	28, // 20: nftmeta.v1.token.Conds.VectorState:type_name -> web3eye.Uint32Val
	30, // 21: nftmeta.v1.token.Conds.VectorID:type_name -> web3eye.Int64Val
	29, // 22: nftmeta.v1.token.Conds.Remark:type_name -> web3eye.StringVal
	29, // 23: nftmeta.v1.token.Conds.IPFSImageURL:type_name -> web3eye.StringVal
	28, // 24: nftmeta.v1.token.Conds.ImageSnapshotID:type_name -> web3eye.Uint32Val
	31, // 25: nftmeta.v1.token.Conds.EntIDs:type_name -> web3eye.StringSliceVal
	32, // 26: nftmeta.v1.token.Conds.VectorIDs:type_name -> web3eye.Int64SliceVal
	1,  // 27: nftmeta.v1.token.CreateTokenRequest.Info:type_name -> nftmeta.v1.token.TokenReq
	2,  // 28: nftmeta.v1.token.CreateTokenResponse.Info:type_name -> nftmeta.v1.token.Token
	1,  // 29: nftmeta.v1.token.UpsertTokenRequest.Info:type_name -> nftmeta.v1.token.TokenReq
	2,  // 30: nftmeta.v1.token.UpsertTokenResponse.Info:type_name -> nftmeta.v1.token.Token
	1,  // 31: nftmeta.v1.token.CreateTokensRequest.Infos:type_name -> nftmeta.v1.token.TokenReq
	2,  // 32: nftmeta.v1.token.CreateTokensResponse.Infos:type_name -> nftmeta.v1.token.Token
	2,  // 33: nftmeta.v1.token.GetTokenResponse.Info:type_name -> nftmeta.v1.token.Token
	3,  // 34: nftmeta.v1.token.GetTokensRequest.Conds:type_name -> nftmeta.v1.token.Conds
	2,  // 35: nftmeta.v1.token.GetTokensResponse.Infos:type_name -> nftmeta.v1.token.Token
	3,  // 36: nftmeta.v1.token.GetTokenOnlyRequest.Conds:type_name -> nftmeta.v1.token.Conds
	2,  // 37: nftmeta.v1.token.GetTokenOnlyResponse.Info:type_name -> nftmeta.v1.token.Token
	1,  // 38: nftmeta.v1.token.UpdateTokenRequest.Info:type_name -> nftmeta.v1.token.TokenReq
	2,  // 39: nftmeta.v1.token.UpdateTokenResponse.Info:type_name -> nftmeta.v1.token.Token
	2,  // 40: nftmeta.v1.token.UpdateImageVectorResponse.Info:type_name -> nftmeta.v1.token.Token
	3,  // 41: nftmeta.v1.token.ExistTokenCondsRequest.Conds:type_name -> nftmeta.v1.token.Conds
	2,  // 42: nftmeta.v1.token.DeleteTokenResponse.Info:type_name -> nftmeta.v1.token.Token
	4,  // 43: nftmeta.v1.token.Manager.CreateToken:input_type -> nftmeta.v1.token.CreateTokenRequest
	8,  // 44: nftmeta.v1.token.Manager.CreateTokens:input_type -> nftmeta.v1.token.CreateTokensRequest
	16, // 45: nftmeta.v1.token.Manager.UpdateToken:input_type -> nftmeta.v1.token.UpdateTokenRequest
	6,  // 46: nftmeta.v1.token.Manager.UpsertToken:input_type -> nftmeta.v1.token.UpsertTokenRequest
	18, // 47: nftmeta.v1.token.Manager.UpdateImageVector:input_type -> nftmeta.v1.token.UpdateImageVectorRequest
	10, // 48: nftmeta.v1.token.Manager.GetToken:input_type -> nftmeta.v1.token.GetTokenRequest
	14, // 49: nftmeta.v1.token.Manager.GetTokenOnly:input_type -> nftmeta.v1.token.GetTokenOnlyRequest
	12, // 50: nftmeta.v1.token.Manager.GetTokens:input_type -> nftmeta.v1.token.GetTokensRequest
	20, // 51: nftmeta.v1.token.Manager.ExistToken:input_type -> nftmeta.v1.token.ExistTokenRequest
	22, // 52: nftmeta.v1.token.Manager.ExistTokenConds:input_type -> nftmeta.v1.token.ExistTokenCondsRequest
	24, // 53: nftmeta.v1.token.Manager.DeleteToken:input_type -> nftmeta.v1.token.DeleteTokenRequest
	5,  // 54: nftmeta.v1.token.Manager.CreateToken:output_type -> nftmeta.v1.token.CreateTokenResponse
	9,  // 55: nftmeta.v1.token.Manager.CreateTokens:output_type -> nftmeta.v1.token.CreateTokensResponse
	17, // 56: nftmeta.v1.token.Manager.UpdateToken:output_type -> nftmeta.v1.token.UpdateTokenResponse
	7,  // 57: nftmeta.v1.token.Manager.UpsertToken:output_type -> nftmeta.v1.token.UpsertTokenResponse
	19, // 58: nftmeta.v1.token.Manager.UpdateImageVector:output_type -> nftmeta.v1.token.UpdateImageVectorResponse
	11, // 59: nftmeta.v1.token.Manager.GetToken:output_type -> nftmeta.v1.token.GetTokenResponse
	15, // 60: nftmeta.v1.token.Manager.GetTokenOnly:output_type -> nftmeta.v1.token.GetTokenOnlyResponse
	13, // 61: nftmeta.v1.token.Manager.GetTokens:output_type -> nftmeta.v1.token.GetTokensResponse
	21, // 62: nftmeta.v1.token.Manager.ExistToken:output_type -> nftmeta.v1.token.ExistTokenResponse
	23, // 63: nftmeta.v1.token.Manager.ExistTokenConds:output_type -> nftmeta.v1.token.ExistTokenCondsResponse
	25, // 64: nftmeta.v1.token.Manager.DeleteToken:output_type -> nftmeta.v1.token.DeleteTokenResponse
	54, // [54:65] is the sub-list for method output_type
	43, // [43:54] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_web3eye_nftmeta_v1_token_token_proto_init() }
func file_web3eye_nftmeta_v1_token_token_proto_init() {
	if File_web3eye_nftmeta_v1_token_token_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageVectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageVectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTokenCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTokenCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_token_token_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_web3eye_nftmeta_v1_token_token_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web3eye_nftmeta_v1_token_token_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web3eye_nftmeta_v1_token_token_proto_goTypes,
		DependencyIndexes: file_web3eye_nftmeta_v1_token_token_proto_depIdxs,
		EnumInfos:         file_web3eye_nftmeta_v1_token_token_proto_enumTypes,
		MessageInfos:      file_web3eye_nftmeta_v1_token_token_proto_msgTypes,
	}.Build()
	File_web3eye_nftmeta_v1_token_token_proto = out.File
	file_web3eye_nftmeta_v1_token_token_proto_rawDesc = nil
	file_web3eye_nftmeta_v1_token_token_proto_goTypes = nil
	file_web3eye_nftmeta_v1_token_token_proto_depIdxs = nil
}
