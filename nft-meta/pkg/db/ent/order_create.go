// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/order"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (oc *OrderCreate) SetEntID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetEntID(u)
	return oc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableEntID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetEntID(*u)
	}
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(u uint32) *OrderCreate {
	oc.mutation.SetCreatedAt(u)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetCreatedAt(*u)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(u uint32) *OrderCreate {
	oc.mutation.SetUpdatedAt(u)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetUpdatedAt(*u)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OrderCreate) SetDeletedAt(u uint32) *OrderCreate {
	oc.mutation.SetDeletedAt(u)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeletedAt(u *uint32) *OrderCreate {
	if u != nil {
		oc.SetDeletedAt(*u)
	}
	return oc
}

// SetChainType sets the "chain_type" field.
func (oc *OrderCreate) SetChainType(s string) *OrderCreate {
	oc.mutation.SetChainType(s)
	return oc
}

// SetChainID sets the "chain_id" field.
func (oc *OrderCreate) SetChainID(s string) *OrderCreate {
	oc.mutation.SetChainID(s)
	return oc
}

// SetTxHash sets the "tx_hash" field.
func (oc *OrderCreate) SetTxHash(s string) *OrderCreate {
	oc.mutation.SetTxHash(s)
	return oc
}

// SetBlockNumber sets the "block_number" field.
func (oc *OrderCreate) SetBlockNumber(u uint64) *OrderCreate {
	oc.mutation.SetBlockNumber(u)
	return oc
}

// SetTxIndex sets the "tx_index" field.
func (oc *OrderCreate) SetTxIndex(u uint32) *OrderCreate {
	oc.mutation.SetTxIndex(u)
	return oc
}

// SetLogIndex sets the "log_index" field.
func (oc *OrderCreate) SetLogIndex(u uint32) *OrderCreate {
	oc.mutation.SetLogIndex(u)
	return oc
}

// SetRecipient sets the "recipient" field.
func (oc *OrderCreate) SetRecipient(s string) *OrderCreate {
	oc.mutation.SetRecipient(s)
	return oc
}

// SetRemark sets the "remark" field.
func (oc *OrderCreate) SetRemark(s string) *OrderCreate {
	oc.mutation.SetRemark(s)
	return oc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRemark(s *string) *OrderCreate {
	if s != nil {
		oc.SetRemark(*s)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uint32) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Order)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() error {
	if _, ok := oc.mutation.EntID(); !ok {
		if order.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := order.DefaultEntID()
		oc.mutation.SetEntID(v)
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		if order.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		if order.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.DeletedAt(); !ok {
		if order.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultDeletedAt()
		oc.mutation.SetDeletedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Order.ent_id"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Order.deleted_at"`)}
	}
	if _, ok := oc.mutation.ChainType(); !ok {
		return &ValidationError{Name: "chain_type", err: errors.New(`ent: missing required field "Order.chain_type"`)}
	}
	if _, ok := oc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Order.chain_id"`)}
	}
	if _, ok := oc.mutation.TxHash(); !ok {
		return &ValidationError{Name: "tx_hash", err: errors.New(`ent: missing required field "Order.tx_hash"`)}
	}
	if v, ok := oc.mutation.TxHash(); ok {
		if err := order.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "tx_hash", err: fmt.Errorf(`ent: validator failed for field "Order.tx_hash": %w`, err)}
		}
	}
	if _, ok := oc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "Order.block_number"`)}
	}
	if _, ok := oc.mutation.TxIndex(); !ok {
		return &ValidationError{Name: "tx_index", err: errors.New(`ent: missing required field "Order.tx_index"`)}
	}
	if _, ok := oc.mutation.LogIndex(); !ok {
		return &ValidationError{Name: "log_index", err: errors.New(`ent: missing required field "Order.log_index"`)}
	}
	if _, ok := oc.mutation.Recipient(); !ok {
		return &ValidationError{Name: "recipient", err: errors.New(`ent: missing required field "Order.recipient"`)}
	}
	if v, ok := oc.mutation.Recipient(); ok {
		if err := order.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "Order.recipient": %w`, err)}
		}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: order.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: order.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := oc.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := oc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := oc.mutation.TxHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldTxHash,
		})
		_node.TxHash = value
	}
	if value, ok := oc.mutation.BlockNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: order.FieldBlockNumber,
		})
		_node.BlockNumber = value
	}
	if value, ok := oc.mutation.TxIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldTxIndex,
		})
		_node.TxIndex = value
	}
	if value, ok := oc.mutation.LogIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: order.FieldLogIndex,
		})
		_node.LogIndex = value
	}
	if value, ok := oc.mutation.Recipient(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRecipient,
		})
		_node.Recipient = value
	}
	if value, ok := oc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *OrderUpsert) SetEntID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateEntID() *OrderUpsert {
	u.SetExcluded(order.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsert) SetCreatedAt(v uint32) *OrderUpsert {
	u.Set(order.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUpsert) AddCreatedAt(v uint32) *OrderUpsert {
	u.Add(order.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsert) SetUpdatedAt(v uint32) *OrderUpsert {
	u.Set(order.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUpsert) AddUpdatedAt(v uint32) *OrderUpsert {
	u.Add(order.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsert) SetDeletedAt(v uint32) *OrderUpsert {
	u.Set(order.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDeletedAt() *OrderUpsert {
	u.SetExcluded(order.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUpsert) AddDeletedAt(v uint32) *OrderUpsert {
	u.Add(order.FieldDeletedAt, v)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *OrderUpsert) SetChainType(v string) *OrderUpsert {
	u.Set(order.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *OrderUpsert) UpdateChainType() *OrderUpsert {
	u.SetExcluded(order.FieldChainType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *OrderUpsert) SetChainID(v string) *OrderUpsert {
	u.Set(order.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateChainID() *OrderUpsert {
	u.SetExcluded(order.FieldChainID)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *OrderUpsert) SetTxHash(v string) *OrderUpsert {
	u.Set(order.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTxHash() *OrderUpsert {
	u.SetExcluded(order.FieldTxHash)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *OrderUpsert) SetBlockNumber(v uint64) *OrderUpsert {
	u.Set(order.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *OrderUpsert) UpdateBlockNumber() *OrderUpsert {
	u.SetExcluded(order.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "block_number" field.
func (u *OrderUpsert) AddBlockNumber(v uint64) *OrderUpsert {
	u.Add(order.FieldBlockNumber, v)
	return u
}

// SetTxIndex sets the "tx_index" field.
func (u *OrderUpsert) SetTxIndex(v uint32) *OrderUpsert {
	u.Set(order.FieldTxIndex, v)
	return u
}

// UpdateTxIndex sets the "tx_index" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTxIndex() *OrderUpsert {
	u.SetExcluded(order.FieldTxIndex)
	return u
}

// AddTxIndex adds v to the "tx_index" field.
func (u *OrderUpsert) AddTxIndex(v uint32) *OrderUpsert {
	u.Add(order.FieldTxIndex, v)
	return u
}

// SetLogIndex sets the "log_index" field.
func (u *OrderUpsert) SetLogIndex(v uint32) *OrderUpsert {
	u.Set(order.FieldLogIndex, v)
	return u
}

// UpdateLogIndex sets the "log_index" field to the value that was provided on create.
func (u *OrderUpsert) UpdateLogIndex() *OrderUpsert {
	u.SetExcluded(order.FieldLogIndex)
	return u
}

// AddLogIndex adds v to the "log_index" field.
func (u *OrderUpsert) AddLogIndex(v uint32) *OrderUpsert {
	u.Add(order.FieldLogIndex, v)
	return u
}

// SetRecipient sets the "recipient" field.
func (u *OrderUpsert) SetRecipient(v string) *OrderUpsert {
	u.Set(order.FieldRecipient, v)
	return u
}

// UpdateRecipient sets the "recipient" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRecipient() *OrderUpsert {
	u.SetExcluded(order.FieldRecipient)
	return u
}

// SetRemark sets the "remark" field.
func (u *OrderUpsert) SetRemark(v string) *OrderUpsert {
	u.Set(order.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRemark() *OrderUpsert {
	u.SetExcluded(order.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderUpsert) ClearRemark() *OrderUpsert {
	u.SetNull(order.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(order.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderUpsertOne) SetEntID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateEntID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertOne) SetCreatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUpsertOne) AddCreatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertOne) SetUpdatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUpsertOne) AddUpdatedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsertOne) SetDeletedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUpsertOne) AddDeletedAt(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDeletedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *OrderUpsertOne) SetChainType(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateChainType() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *OrderUpsertOne) SetChainID(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateChainID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateChainID()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *OrderUpsertOne) SetTxHash(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTxHash() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *OrderUpsertOne) SetBlockNumber(v uint64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *OrderUpsertOne) AddBlockNumber(v uint64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateBlockNumber() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetTxIndex sets the "tx_index" field.
func (u *OrderUpsertOne) SetTxIndex(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTxIndex(v)
	})
}

// AddTxIndex adds v to the "tx_index" field.
func (u *OrderUpsertOne) AddTxIndex(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddTxIndex(v)
	})
}

// UpdateTxIndex sets the "tx_index" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTxIndex() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTxIndex()
	})
}

// SetLogIndex sets the "log_index" field.
func (u *OrderUpsertOne) SetLogIndex(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetLogIndex(v)
	})
}

// AddLogIndex adds v to the "log_index" field.
func (u *OrderUpsertOne) AddLogIndex(v uint32) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddLogIndex(v)
	})
}

// UpdateLogIndex sets the "log_index" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateLogIndex() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateLogIndex()
	})
}

// SetRecipient sets the "recipient" field.
func (u *OrderUpsertOne) SetRecipient(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRecipient(v)
	})
}

// UpdateRecipient sets the "recipient" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRecipient() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRecipient()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderUpsertOne) SetRemark(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRemark() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderUpsertOne) ClearRemark() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(order.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderUpsertBulk) SetEntID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateEntID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertBulk) SetCreatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUpsertBulk) AddCreatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertBulk) SetUpdatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUpsertBulk) AddUpdatedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsertBulk) SetDeletedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUpsertBulk) AddDeletedAt(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDeletedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *OrderUpsertBulk) SetChainType(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateChainType() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *OrderUpsertBulk) SetChainID(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateChainID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateChainID()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *OrderUpsertBulk) SetTxHash(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTxHash() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *OrderUpsertBulk) SetBlockNumber(v uint64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *OrderUpsertBulk) AddBlockNumber(v uint64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateBlockNumber() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetTxIndex sets the "tx_index" field.
func (u *OrderUpsertBulk) SetTxIndex(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTxIndex(v)
	})
}

// AddTxIndex adds v to the "tx_index" field.
func (u *OrderUpsertBulk) AddTxIndex(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddTxIndex(v)
	})
}

// UpdateTxIndex sets the "tx_index" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTxIndex() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTxIndex()
	})
}

// SetLogIndex sets the "log_index" field.
func (u *OrderUpsertBulk) SetLogIndex(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetLogIndex(v)
	})
}

// AddLogIndex adds v to the "log_index" field.
func (u *OrderUpsertBulk) AddLogIndex(v uint32) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddLogIndex(v)
	})
}

// UpdateLogIndex sets the "log_index" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateLogIndex() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateLogIndex()
	})
}

// SetRecipient sets the "recipient" field.
func (u *OrderUpsertBulk) SetRecipient(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRecipient(v)
	})
}

// UpdateRecipient sets the "recipient" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRecipient() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRecipient()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderUpsertBulk) SetRemark(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRemark() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderUpsertBulk) ClearRemark() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
