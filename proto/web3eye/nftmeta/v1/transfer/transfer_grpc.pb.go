// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: web3eye/nftmeta/v1/transfer/transfer.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateTransfer_FullMethodName     = "/nftmeta.v1.transfer.Manager/CreateTransfer"
	Manager_UpsertTransfer_FullMethodName     = "/nftmeta.v1.transfer.Manager/UpsertTransfer"
	Manager_UpdateTransfer_FullMethodName     = "/nftmeta.v1.transfer.Manager/UpdateTransfer"
	Manager_CreateTransfers_FullMethodName    = "/nftmeta.v1.transfer.Manager/CreateTransfers"
	Manager_UpsertTransfers_FullMethodName    = "/nftmeta.v1.transfer.Manager/UpsertTransfers"
	Manager_GetTransfer_FullMethodName        = "/nftmeta.v1.transfer.Manager/GetTransfer"
	Manager_GetTransferOnly_FullMethodName    = "/nftmeta.v1.transfer.Manager/GetTransferOnly"
	Manager_GetTransfers_FullMethodName       = "/nftmeta.v1.transfer.Manager/GetTransfers"
	Manager_ExistTransfer_FullMethodName      = "/nftmeta.v1.transfer.Manager/ExistTransfer"
	Manager_ExistTransferConds_FullMethodName = "/nftmeta.v1.transfer.Manager/ExistTransferConds"
	Manager_CountTransfers_FullMethodName     = "/nftmeta.v1.transfer.Manager/CountTransfers"
	Manager_DeleteTransfer_FullMethodName     = "/nftmeta.v1.transfer.Manager/DeleteTransfer"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*CreateTransferResponse, error)
	UpsertTransfer(ctx context.Context, in *UpsertTransferRequest, opts ...grpc.CallOption) (*UpsertTransferResponse, error)
	UpdateTransfer(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*UpdateTransferResponse, error)
	CreateTransfers(ctx context.Context, in *CreateTransfersRequest, opts ...grpc.CallOption) (*CreateTransfersResponse, error)
	UpsertTransfers(ctx context.Context, in *UpsertTransfersRequest, opts ...grpc.CallOption) (*UpsertTransfersResponse, error)
	GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*GetTransferResponse, error)
	GetTransferOnly(ctx context.Context, in *GetTransferOnlyRequest, opts ...grpc.CallOption) (*GetTransferOnlyResponse, error)
	GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error)
	ExistTransfer(ctx context.Context, in *ExistTransferRequest, opts ...grpc.CallOption) (*ExistTransferResponse, error)
	ExistTransferConds(ctx context.Context, in *ExistTransferCondsRequest, opts ...grpc.CallOption) (*ExistTransferCondsResponse, error)
	CountTransfers(ctx context.Context, in *CountTransfersRequest, opts ...grpc.CallOption) (*CountTransfersResponse, error)
	DeleteTransfer(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*DeleteTransferResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*CreateTransferResponse, error) {
	out := new(CreateTransferResponse)
	err := c.cc.Invoke(ctx, Manager_CreateTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpsertTransfer(ctx context.Context, in *UpsertTransferRequest, opts ...grpc.CallOption) (*UpsertTransferResponse, error) {
	out := new(UpsertTransferResponse)
	err := c.cc.Invoke(ctx, Manager_UpsertTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateTransfer(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*UpdateTransferResponse, error) {
	out := new(UpdateTransferResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateTransfers(ctx context.Context, in *CreateTransfersRequest, opts ...grpc.CallOption) (*CreateTransfersResponse, error) {
	out := new(CreateTransfersResponse)
	err := c.cc.Invoke(ctx, Manager_CreateTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpsertTransfers(ctx context.Context, in *UpsertTransfersRequest, opts ...grpc.CallOption) (*UpsertTransfersResponse, error) {
	out := new(UpsertTransfersResponse)
	err := c.cc.Invoke(ctx, Manager_UpsertTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*GetTransferResponse, error) {
	out := new(GetTransferResponse)
	err := c.cc.Invoke(ctx, Manager_GetTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTransferOnly(ctx context.Context, in *GetTransferOnlyRequest, opts ...grpc.CallOption) (*GetTransferOnlyResponse, error) {
	out := new(GetTransferOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetTransferOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error) {
	out := new(GetTransfersResponse)
	err := c.cc.Invoke(ctx, Manager_GetTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistTransfer(ctx context.Context, in *ExistTransferRequest, opts ...grpc.CallOption) (*ExistTransferResponse, error) {
	out := new(ExistTransferResponse)
	err := c.cc.Invoke(ctx, Manager_ExistTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistTransferConds(ctx context.Context, in *ExistTransferCondsRequest, opts ...grpc.CallOption) (*ExistTransferCondsResponse, error) {
	out := new(ExistTransferCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistTransferConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountTransfers(ctx context.Context, in *CountTransfersRequest, opts ...grpc.CallOption) (*CountTransfersResponse, error) {
	out := new(CountTransfersResponse)
	err := c.cc.Invoke(ctx, Manager_CountTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteTransfer(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*DeleteTransferResponse, error) {
	out := new(DeleteTransferResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateTransfer(context.Context, *CreateTransferRequest) (*CreateTransferResponse, error)
	UpsertTransfer(context.Context, *UpsertTransferRequest) (*UpsertTransferResponse, error)
	UpdateTransfer(context.Context, *UpdateTransferRequest) (*UpdateTransferResponse, error)
	CreateTransfers(context.Context, *CreateTransfersRequest) (*CreateTransfersResponse, error)
	UpsertTransfers(context.Context, *UpsertTransfersRequest) (*UpsertTransfersResponse, error)
	GetTransfer(context.Context, *GetTransferRequest) (*GetTransferResponse, error)
	GetTransferOnly(context.Context, *GetTransferOnlyRequest) (*GetTransferOnlyResponse, error)
	GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error)
	ExistTransfer(context.Context, *ExistTransferRequest) (*ExistTransferResponse, error)
	ExistTransferConds(context.Context, *ExistTransferCondsRequest) (*ExistTransferCondsResponse, error)
	CountTransfers(context.Context, *CountTransfersRequest) (*CountTransfersResponse, error)
	DeleteTransfer(context.Context, *DeleteTransferRequest) (*DeleteTransferResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateTransfer(context.Context, *CreateTransferRequest) (*CreateTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedManagerServer) UpsertTransfer(context.Context, *UpsertTransferRequest) (*UpsertTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTransfer not implemented")
}
func (UnimplementedManagerServer) UpdateTransfer(context.Context, *UpdateTransferRequest) (*UpdateTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransfer not implemented")
}
func (UnimplementedManagerServer) CreateTransfers(context.Context, *CreateTransfersRequest) (*CreateTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfers not implemented")
}
func (UnimplementedManagerServer) UpsertTransfers(context.Context, *UpsertTransfersRequest) (*UpsertTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTransfers not implemented")
}
func (UnimplementedManagerServer) GetTransfer(context.Context, *GetTransferRequest) (*GetTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfer not implemented")
}
func (UnimplementedManagerServer) GetTransferOnly(context.Context, *GetTransferOnlyRequest) (*GetTransferOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferOnly not implemented")
}
func (UnimplementedManagerServer) GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}
func (UnimplementedManagerServer) ExistTransfer(context.Context, *ExistTransferRequest) (*ExistTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTransfer not implemented")
}
func (UnimplementedManagerServer) ExistTransferConds(context.Context, *ExistTransferCondsRequest) (*ExistTransferCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTransferConds not implemented")
}
func (UnimplementedManagerServer) CountTransfers(context.Context, *CountTransfersRequest) (*CountTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTransfers not implemented")
}
func (UnimplementedManagerServer) DeleteTransfer(context.Context, *DeleteTransferRequest) (*DeleteTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransfer not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpsertTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpsertTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpsertTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpsertTransfer(ctx, req.(*UpsertTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateTransfer(ctx, req.(*UpdateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateTransfers(ctx, req.(*CreateTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpsertTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpsertTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpsertTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpsertTransfers(ctx, req.(*UpsertTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTransfer(ctx, req.(*GetTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTransferOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTransferOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetTransferOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTransferOnly(ctx, req.(*GetTransferOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTransfers(ctx, req.(*GetTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistTransfer(ctx, req.(*ExistTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistTransferConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTransferCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistTransferConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistTransferConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistTransferConds(ctx, req.(*ExistTransferCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountTransfers(ctx, req.(*CountTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteTransfer(ctx, req.(*DeleteTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nftmeta.v1.transfer.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransfer",
			Handler:    _Manager_CreateTransfer_Handler,
		},
		{
			MethodName: "UpsertTransfer",
			Handler:    _Manager_UpsertTransfer_Handler,
		},
		{
			MethodName: "UpdateTransfer",
			Handler:    _Manager_UpdateTransfer_Handler,
		},
		{
			MethodName: "CreateTransfers",
			Handler:    _Manager_CreateTransfers_Handler,
		},
		{
			MethodName: "UpsertTransfers",
			Handler:    _Manager_UpsertTransfers_Handler,
		},
		{
			MethodName: "GetTransfer",
			Handler:    _Manager_GetTransfer_Handler,
		},
		{
			MethodName: "GetTransferOnly",
			Handler:    _Manager_GetTransferOnly_Handler,
		},
		{
			MethodName: "GetTransfers",
			Handler:    _Manager_GetTransfers_Handler,
		},
		{
			MethodName: "ExistTransfer",
			Handler:    _Manager_ExistTransfer_Handler,
		},
		{
			MethodName: "ExistTransferConds",
			Handler:    _Manager_ExistTransferConds_Handler,
		},
		{
			MethodName: "CountTransfers",
			Handler:    _Manager_CountTransfers_Handler,
		},
		{
			MethodName: "DeleteTransfer",
			Handler:    _Manager_DeleteTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3eye/nftmeta/v1/transfer/transfer.proto",
}
