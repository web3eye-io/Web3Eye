// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/endpoint"
)

// Endpoint is the model entity for the Endpoint schema.
type Endpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// ChainType holds the value of the "chain_type" field.
	ChainType string `json:"chain_type,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID string `json:"chain_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Rps holds the value of the "rps" field.
	Rps uint32 `json:"rps,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Endpoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID, endpoint.FieldCreatedAt, endpoint.FieldUpdatedAt, endpoint.FieldDeletedAt, endpoint.FieldRps:
			values[i] = new(sql.NullInt64)
		case endpoint.FieldChainType, endpoint.FieldChainID, endpoint.FieldAddress, endpoint.FieldState, endpoint.FieldRemark:
			values[i] = new(sql.NullString)
		case endpoint.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Endpoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Endpoint fields.
func (e *Endpoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint32(value.Int64)
		case endpoint.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				e.EntID = *value
			}
		case endpoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = uint32(value.Int64)
			}
		case endpoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = uint32(value.Int64)
			}
		case endpoint.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = uint32(value.Int64)
			}
		case endpoint.FieldChainType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_type", values[i])
			} else if value.Valid {
				e.ChainType = value.String
			}
		case endpoint.FieldChainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				e.ChainID = value.String
			}
		case endpoint.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				e.Address = value.String
			}
		case endpoint.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				e.State = value.String
			}
		case endpoint.FieldRps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rps", values[i])
			} else if value.Valid {
				e.Rps = uint32(value.Int64)
			}
		case endpoint.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				e.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Endpoint.
// Note that you need to call Endpoint.Unwrap() before calling this method if this Endpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Endpoint) Update() *EndpointUpdateOne {
	return (&EndpointClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Endpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Endpoint) Unwrap() *Endpoint {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Endpoint is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Endpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Endpoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EntID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", e.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("chain_type=")
	builder.WriteString(e.ChainType)
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(e.ChainID)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(e.Address)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(e.State)
	builder.WriteString(", ")
	builder.WriteString("rps=")
	builder.WriteString(fmt.Sprintf("%v", e.Rps))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(e.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// Endpoints is a parsable slice of Endpoint.
type Endpoints []*Endpoint

func (e Endpoints) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
