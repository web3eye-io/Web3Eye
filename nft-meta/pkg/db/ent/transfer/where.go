// Code generated by ent, DO NOT EDIT.

package transfer

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ChainType applies equality check predicate on the "chain_type" field. It's identical to ChainTypeEQ.
func ChainType(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainType), v))
	})
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// Contract applies equality check predicate on the "contract" field. It's identical to ContractEQ.
func Contract(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContract), v))
	})
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenType), v))
	})
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenID), v))
	})
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrom), v))
	})
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTo), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v uint64) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockNumber), v))
	})
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxHash), v))
	})
}

// BlockHash applies equality check predicate on the "block_hash" field. It's identical to BlockHashEQ.
func BlockHash(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockHash), v))
	})
}

// TxTime applies equality check predicate on the "tx_time" field. It's identical to TxTimeEQ.
func TxTime(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxTime), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// ChainTypeEQ applies the EQ predicate on the "chain_type" field.
func ChainTypeEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainType), v))
	})
}

// ChainTypeNEQ applies the NEQ predicate on the "chain_type" field.
func ChainTypeNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainType), v))
	})
}

// ChainTypeIn applies the In predicate on the "chain_type" field.
func ChainTypeIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainType), v...))
	})
}

// ChainTypeNotIn applies the NotIn predicate on the "chain_type" field.
func ChainTypeNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainType), v...))
	})
}

// ChainTypeGT applies the GT predicate on the "chain_type" field.
func ChainTypeGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainType), v))
	})
}

// ChainTypeGTE applies the GTE predicate on the "chain_type" field.
func ChainTypeGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainType), v))
	})
}

// ChainTypeLT applies the LT predicate on the "chain_type" field.
func ChainTypeLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainType), v))
	})
}

// ChainTypeLTE applies the LTE predicate on the "chain_type" field.
func ChainTypeLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainType), v))
	})
}

// ChainTypeContains applies the Contains predicate on the "chain_type" field.
func ChainTypeContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainType), v))
	})
}

// ChainTypeHasPrefix applies the HasPrefix predicate on the "chain_type" field.
func ChainTypeHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainType), v))
	})
}

// ChainTypeHasSuffix applies the HasSuffix predicate on the "chain_type" field.
func ChainTypeHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainType), v))
	})
}

// ChainTypeEqualFold applies the EqualFold predicate on the "chain_type" field.
func ChainTypeEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainType), v))
	})
}

// ChainTypeContainsFold applies the ContainsFold predicate on the "chain_type" field.
func ChainTypeContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainType), v))
	})
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainID), v))
	})
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainID), v...))
	})
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainID), v...))
	})
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainID), v))
	})
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainID), v))
	})
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainID), v))
	})
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainID), v))
	})
}

// ChainIDContains applies the Contains predicate on the "chain_id" field.
func ChainIDContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainID), v))
	})
}

// ChainIDHasPrefix applies the HasPrefix predicate on the "chain_id" field.
func ChainIDHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainID), v))
	})
}

// ChainIDHasSuffix applies the HasSuffix predicate on the "chain_id" field.
func ChainIDHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainID), v))
	})
}

// ChainIDEqualFold applies the EqualFold predicate on the "chain_id" field.
func ChainIDEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainID), v))
	})
}

// ChainIDContainsFold applies the ContainsFold predicate on the "chain_id" field.
func ChainIDContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainID), v))
	})
}

// ContractEQ applies the EQ predicate on the "contract" field.
func ContractEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContract), v))
	})
}

// ContractNEQ applies the NEQ predicate on the "contract" field.
func ContractNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContract), v))
	})
}

// ContractIn applies the In predicate on the "contract" field.
func ContractIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContract), v...))
	})
}

// ContractNotIn applies the NotIn predicate on the "contract" field.
func ContractNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContract), v...))
	})
}

// ContractGT applies the GT predicate on the "contract" field.
func ContractGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContract), v))
	})
}

// ContractGTE applies the GTE predicate on the "contract" field.
func ContractGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContract), v))
	})
}

// ContractLT applies the LT predicate on the "contract" field.
func ContractLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContract), v))
	})
}

// ContractLTE applies the LTE predicate on the "contract" field.
func ContractLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContract), v))
	})
}

// ContractContains applies the Contains predicate on the "contract" field.
func ContractContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContract), v))
	})
}

// ContractHasPrefix applies the HasPrefix predicate on the "contract" field.
func ContractHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContract), v))
	})
}

// ContractHasSuffix applies the HasSuffix predicate on the "contract" field.
func ContractHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContract), v))
	})
}

// ContractEqualFold applies the EqualFold predicate on the "contract" field.
func ContractEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContract), v))
	})
}

// ContractContainsFold applies the ContainsFold predicate on the "contract" field.
func ContractContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContract), v))
	})
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenType), v))
	})
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenType), v))
	})
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenType), v...))
	})
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenType), v...))
	})
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenType), v))
	})
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenType), v))
	})
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenType), v))
	})
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenType), v))
	})
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenType), v))
	})
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenType), v))
	})
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenType), v))
	})
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenType), v))
	})
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenType), v))
	})
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenID), v))
	})
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenID), v))
	})
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenID), v...))
	})
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenID), v...))
	})
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenID), v))
	})
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenID), v))
	})
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenID), v))
	})
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenID), v))
	})
}

// TokenIDContains applies the Contains predicate on the "token_id" field.
func TokenIDContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenID), v))
	})
}

// TokenIDHasPrefix applies the HasPrefix predicate on the "token_id" field.
func TokenIDHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenID), v))
	})
}

// TokenIDHasSuffix applies the HasSuffix predicate on the "token_id" field.
func TokenIDHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenID), v))
	})
}

// TokenIDEqualFold applies the EqualFold predicate on the "token_id" field.
func TokenIDEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenID), v))
	})
}

// TokenIDContainsFold applies the ContainsFold predicate on the "token_id" field.
func TokenIDContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenID), v))
	})
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrom), v))
	})
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrom), v))
	})
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFrom), v...))
	})
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFrom), v...))
	})
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrom), v))
	})
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrom), v))
	})
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrom), v))
	})
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrom), v))
	})
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrom), v))
	})
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrom), v))
	})
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrom), v))
	})
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrom), v))
	})
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrom), v))
	})
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTo), v))
	})
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTo), v))
	})
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTo), v...))
	})
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTo), v...))
	})
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTo), v))
	})
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTo), v))
	})
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTo), v))
	})
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTo), v))
	})
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTo), v))
	})
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTo), v))
	})
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTo), v))
	})
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTo), v))
	})
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTo), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAmount), v))
	})
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAmount), v))
	})
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAmount), v))
	})
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAmount), v))
	})
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAmount), v))
	})
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v uint64) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v uint64) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...uint64) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlockNumber), v...))
	})
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...uint64) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlockNumber), v...))
	})
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v uint64) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v uint64) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v uint64) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlockNumber), v))
	})
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v uint64) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlockNumber), v))
	})
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxHash), v))
	})
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxHash), v))
	})
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTxHash), v...))
	})
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTxHash), v...))
	})
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxHash), v))
	})
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxHash), v))
	})
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxHash), v))
	})
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxHash), v))
	})
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxHash), v))
	})
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxHash), v))
	})
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxHash), v))
	})
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxHash), v))
	})
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxHash), v))
	})
}

// BlockHashEQ applies the EQ predicate on the "block_hash" field.
func BlockHashEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockHash), v))
	})
}

// BlockHashNEQ applies the NEQ predicate on the "block_hash" field.
func BlockHashNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlockHash), v))
	})
}

// BlockHashIn applies the In predicate on the "block_hash" field.
func BlockHashIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlockHash), v...))
	})
}

// BlockHashNotIn applies the NotIn predicate on the "block_hash" field.
func BlockHashNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlockHash), v...))
	})
}

// BlockHashGT applies the GT predicate on the "block_hash" field.
func BlockHashGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlockHash), v))
	})
}

// BlockHashGTE applies the GTE predicate on the "block_hash" field.
func BlockHashGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlockHash), v))
	})
}

// BlockHashLT applies the LT predicate on the "block_hash" field.
func BlockHashLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlockHash), v))
	})
}

// BlockHashLTE applies the LTE predicate on the "block_hash" field.
func BlockHashLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlockHash), v))
	})
}

// BlockHashContains applies the Contains predicate on the "block_hash" field.
func BlockHashContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBlockHash), v))
	})
}

// BlockHashHasPrefix applies the HasPrefix predicate on the "block_hash" field.
func BlockHashHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBlockHash), v))
	})
}

// BlockHashHasSuffix applies the HasSuffix predicate on the "block_hash" field.
func BlockHashHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBlockHash), v))
	})
}

// BlockHashEqualFold applies the EqualFold predicate on the "block_hash" field.
func BlockHashEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBlockHash), v))
	})
}

// BlockHashContainsFold applies the ContainsFold predicate on the "block_hash" field.
func BlockHashContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBlockHash), v))
	})
}

// TxTimeEQ applies the EQ predicate on the "tx_time" field.
func TxTimeEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxTime), v))
	})
}

// TxTimeNEQ applies the NEQ predicate on the "tx_time" field.
func TxTimeNEQ(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxTime), v))
	})
}

// TxTimeIn applies the In predicate on the "tx_time" field.
func TxTimeIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTxTime), v...))
	})
}

// TxTimeNotIn applies the NotIn predicate on the "tx_time" field.
func TxTimeNotIn(vs ...uint32) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTxTime), v...))
	})
}

// TxTimeGT applies the GT predicate on the "tx_time" field.
func TxTimeGT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxTime), v))
	})
}

// TxTimeGTE applies the GTE predicate on the "tx_time" field.
func TxTimeGTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxTime), v))
	})
}

// TxTimeLT applies the LT predicate on the "tx_time" field.
func TxTimeLT(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxTime), v))
	})
}

// TxTimeLTE applies the LTE predicate on the "tx_time" field.
func TxTimeLTE(v uint32) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxTime), v))
	})
}

// TxTimeIsNil applies the IsNil predicate on the "tx_time" field.
func TxTimeIsNil() predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxTime)))
	})
}

// TxTimeNotNil applies the NotNil predicate on the "tx_time" field.
func TxTimeNotNil() predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxTime)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		p(s.Not())
	})
}
