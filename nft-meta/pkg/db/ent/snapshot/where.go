// Code generated by ent, DO NOT EDIT.

package snapshot

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v uint64) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// SnapshotCommP applies equality check predicate on the "snapshot_comm_p" field. It's identical to SnapshotCommPEQ.
func SnapshotCommP(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotRoot applies equality check predicate on the "snapshot_root" field. It's identical to SnapshotRootEQ.
func SnapshotRoot(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotURI applies equality check predicate on the "snapshot_uri" field. It's identical to SnapshotURIEQ.
func SnapshotURI(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnapshotURI), v))
	})
}

// BackupState applies equality check predicate on the "backup_state" field. It's identical to BackupStateEQ.
func BackupState(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackupState), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v uint64) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v uint64) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndex), v))
	})
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...uint64) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIndex), v...))
	})
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...uint64) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIndex), v...))
	})
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v uint64) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndex), v))
	})
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v uint64) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndex), v))
	})
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v uint64) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndex), v))
	})
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v uint64) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndex), v))
	})
}

// SnapshotCommPEQ applies the EQ predicate on the "snapshot_comm_p" field.
func SnapshotCommPEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPNEQ applies the NEQ predicate on the "snapshot_comm_p" field.
func SnapshotCommPNEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPIn applies the In predicate on the "snapshot_comm_p" field.
func SnapshotCommPIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSnapshotCommP), v...))
	})
}

// SnapshotCommPNotIn applies the NotIn predicate on the "snapshot_comm_p" field.
func SnapshotCommPNotIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSnapshotCommP), v...))
	})
}

// SnapshotCommPGT applies the GT predicate on the "snapshot_comm_p" field.
func SnapshotCommPGT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPGTE applies the GTE predicate on the "snapshot_comm_p" field.
func SnapshotCommPGTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPLT applies the LT predicate on the "snapshot_comm_p" field.
func SnapshotCommPLT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPLTE applies the LTE predicate on the "snapshot_comm_p" field.
func SnapshotCommPLTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPContains applies the Contains predicate on the "snapshot_comm_p" field.
func SnapshotCommPContains(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPHasPrefix applies the HasPrefix predicate on the "snapshot_comm_p" field.
func SnapshotCommPHasPrefix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPHasSuffix applies the HasSuffix predicate on the "snapshot_comm_p" field.
func SnapshotCommPHasSuffix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPEqualFold applies the EqualFold predicate on the "snapshot_comm_p" field.
func SnapshotCommPEqualFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotCommPContainsFold applies the ContainsFold predicate on the "snapshot_comm_p" field.
func SnapshotCommPContainsFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSnapshotCommP), v))
	})
}

// SnapshotRootEQ applies the EQ predicate on the "snapshot_root" field.
func SnapshotRootEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootNEQ applies the NEQ predicate on the "snapshot_root" field.
func SnapshotRootNEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootIn applies the In predicate on the "snapshot_root" field.
func SnapshotRootIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSnapshotRoot), v...))
	})
}

// SnapshotRootNotIn applies the NotIn predicate on the "snapshot_root" field.
func SnapshotRootNotIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSnapshotRoot), v...))
	})
}

// SnapshotRootGT applies the GT predicate on the "snapshot_root" field.
func SnapshotRootGT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootGTE applies the GTE predicate on the "snapshot_root" field.
func SnapshotRootGTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootLT applies the LT predicate on the "snapshot_root" field.
func SnapshotRootLT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootLTE applies the LTE predicate on the "snapshot_root" field.
func SnapshotRootLTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootContains applies the Contains predicate on the "snapshot_root" field.
func SnapshotRootContains(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootHasPrefix applies the HasPrefix predicate on the "snapshot_root" field.
func SnapshotRootHasPrefix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootHasSuffix applies the HasSuffix predicate on the "snapshot_root" field.
func SnapshotRootHasSuffix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootEqualFold applies the EqualFold predicate on the "snapshot_root" field.
func SnapshotRootEqualFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotRootContainsFold applies the ContainsFold predicate on the "snapshot_root" field.
func SnapshotRootContainsFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSnapshotRoot), v))
	})
}

// SnapshotURIEQ applies the EQ predicate on the "snapshot_uri" field.
func SnapshotURIEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURINEQ applies the NEQ predicate on the "snapshot_uri" field.
func SnapshotURINEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURIIn applies the In predicate on the "snapshot_uri" field.
func SnapshotURIIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSnapshotURI), v...))
	})
}

// SnapshotURINotIn applies the NotIn predicate on the "snapshot_uri" field.
func SnapshotURINotIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSnapshotURI), v...))
	})
}

// SnapshotURIGT applies the GT predicate on the "snapshot_uri" field.
func SnapshotURIGT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURIGTE applies the GTE predicate on the "snapshot_uri" field.
func SnapshotURIGTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURILT applies the LT predicate on the "snapshot_uri" field.
func SnapshotURILT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURILTE applies the LTE predicate on the "snapshot_uri" field.
func SnapshotURILTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURIContains applies the Contains predicate on the "snapshot_uri" field.
func SnapshotURIContains(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURIHasPrefix applies the HasPrefix predicate on the "snapshot_uri" field.
func SnapshotURIHasPrefix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURIHasSuffix applies the HasSuffix predicate on the "snapshot_uri" field.
func SnapshotURIHasSuffix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURIEqualFold applies the EqualFold predicate on the "snapshot_uri" field.
func SnapshotURIEqualFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSnapshotURI), v))
	})
}

// SnapshotURIContainsFold applies the ContainsFold predicate on the "snapshot_uri" field.
func SnapshotURIContainsFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSnapshotURI), v))
	})
}

// BackupStateEQ applies the EQ predicate on the "backup_state" field.
func BackupStateEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackupState), v))
	})
}

// BackupStateNEQ applies the NEQ predicate on the "backup_state" field.
func BackupStateNEQ(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBackupState), v))
	})
}

// BackupStateIn applies the In predicate on the "backup_state" field.
func BackupStateIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBackupState), v...))
	})
}

// BackupStateNotIn applies the NotIn predicate on the "backup_state" field.
func BackupStateNotIn(vs ...string) predicate.Snapshot {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBackupState), v...))
	})
}

// BackupStateGT applies the GT predicate on the "backup_state" field.
func BackupStateGT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBackupState), v))
	})
}

// BackupStateGTE applies the GTE predicate on the "backup_state" field.
func BackupStateGTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBackupState), v))
	})
}

// BackupStateLT applies the LT predicate on the "backup_state" field.
func BackupStateLT(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBackupState), v))
	})
}

// BackupStateLTE applies the LTE predicate on the "backup_state" field.
func BackupStateLTE(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBackupState), v))
	})
}

// BackupStateContains applies the Contains predicate on the "backup_state" field.
func BackupStateContains(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBackupState), v))
	})
}

// BackupStateHasPrefix applies the HasPrefix predicate on the "backup_state" field.
func BackupStateHasPrefix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBackupState), v))
	})
}

// BackupStateHasSuffix applies the HasSuffix predicate on the "backup_state" field.
func BackupStateHasSuffix(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBackupState), v))
	})
}

// BackupStateEqualFold applies the EqualFold predicate on the "backup_state" field.
func BackupStateEqualFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBackupState), v))
	})
}

// BackupStateContainsFold applies the ContainsFold predicate on the "backup_state" field.
func BackupStateContainsFold(v string) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBackupState), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Snapshot) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Snapshot) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Snapshot) predicate.Snapshot {
	return predicate.Snapshot(func(s *sql.Selector) {
		p(s.Not())
	})
}
