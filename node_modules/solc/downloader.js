"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const fs = __importStar(require("fs"));
const follow_redirects_1 = require("follow-redirects");
const memorystream_1 = __importDefault(require("memorystream"));
const js_sha3_1 = require("js-sha3");
function getVersionList(url, options = {}) {
    console.log('Retrieving available version list...');
    return new Promise((resolve, reject) => {
        const mem = new memorystream_1.default(null, { readable: false });
        follow_redirects_1.https.get(url, options, function (response) {
            if (response.statusCode !== 200) {
                reject(new Error('Error downloading file: ' + response.statusCode));
            }
            response.pipe(mem);
            response.on('end', function () {
                resolve(mem.toString());
            });
        }).on('error', (err) => {
            reject(err);
        });
    });
}
function downloadBinary(binURL, outputName, version, expectedHash, options = {}) {
    console.log('Downloading version', version);
    return new Promise((resolve, reject) => {
        // Remove if existing
        if (fs.existsSync(outputName)) {
            fs.unlinkSync(outputName);
        }
        process.on('SIGINT', function () {
            fs.unlinkSync(outputName);
            reject(new Error('Interrupted, removing file.'));
        });
        const file = fs.createWriteStream(outputName, { encoding: 'binary' });
        follow_redirects_1.https.get(binURL + version, options, function (response) {
            if (response.statusCode !== 200) {
                reject(new Error('Error downloading file: ' + response.statusCode));
            }
            response.pipe(file);
            file.on('finish', function () {
                file.close();
                const hash = '0x' + (0, js_sha3_1.keccak256)(fs.readFileSync(outputName, { encoding: 'binary' }));
                if (expectedHash !== hash) {
                    reject(new Error('Hash mismatch: ' + expectedHash + ' vs ' + hash));
                }
                else {
                    console.log('Done.');
                    resolve();
                }
            });
        }).on('error', (err) => {
            reject(err);
        });
    });
}
module.exports = {
    getVersionList,
    downloadBinary
};
