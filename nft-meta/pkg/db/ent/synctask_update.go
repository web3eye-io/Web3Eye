// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/synctask"
)

// SyncTaskUpdate is the builder for updating SyncTask entities.
type SyncTaskUpdate struct {
	config
	hooks     []Hook
	mutation  *SyncTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SyncTaskUpdate builder.
func (stu *SyncTaskUpdate) Where(ps ...predicate.SyncTask) *SyncTaskUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetCreatedAt sets the "created_at" field.
func (stu *SyncTaskUpdate) SetCreatedAt(u uint32) *SyncTaskUpdate {
	stu.mutation.ResetCreatedAt()
	stu.mutation.SetCreatedAt(u)
	return stu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stu *SyncTaskUpdate) SetNillableCreatedAt(u *uint32) *SyncTaskUpdate {
	if u != nil {
		stu.SetCreatedAt(*u)
	}
	return stu
}

// AddCreatedAt adds u to the "created_at" field.
func (stu *SyncTaskUpdate) AddCreatedAt(u int32) *SyncTaskUpdate {
	stu.mutation.AddCreatedAt(u)
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *SyncTaskUpdate) SetUpdatedAt(u uint32) *SyncTaskUpdate {
	stu.mutation.ResetUpdatedAt()
	stu.mutation.SetUpdatedAt(u)
	return stu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (stu *SyncTaskUpdate) AddUpdatedAt(u int32) *SyncTaskUpdate {
	stu.mutation.AddUpdatedAt(u)
	return stu
}

// SetDeletedAt sets the "deleted_at" field.
func (stu *SyncTaskUpdate) SetDeletedAt(u uint32) *SyncTaskUpdate {
	stu.mutation.ResetDeletedAt()
	stu.mutation.SetDeletedAt(u)
	return stu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stu *SyncTaskUpdate) SetNillableDeletedAt(u *uint32) *SyncTaskUpdate {
	if u != nil {
		stu.SetDeletedAt(*u)
	}
	return stu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (stu *SyncTaskUpdate) AddDeletedAt(u int32) *SyncTaskUpdate {
	stu.mutation.AddDeletedAt(u)
	return stu
}

// SetEntID sets the "ent_id" field.
func (stu *SyncTaskUpdate) SetEntID(u uuid.UUID) *SyncTaskUpdate {
	stu.mutation.SetEntID(u)
	return stu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (stu *SyncTaskUpdate) SetNillableEntID(u *uuid.UUID) *SyncTaskUpdate {
	if u != nil {
		stu.SetEntID(*u)
	}
	return stu
}

// SetChainType sets the "chain_type" field.
func (stu *SyncTaskUpdate) SetChainType(s string) *SyncTaskUpdate {
	stu.mutation.SetChainType(s)
	return stu
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (stu *SyncTaskUpdate) SetNillableChainType(s *string) *SyncTaskUpdate {
	if s != nil {
		stu.SetChainType(*s)
	}
	return stu
}

// ClearChainType clears the value of the "chain_type" field.
func (stu *SyncTaskUpdate) ClearChainType() *SyncTaskUpdate {
	stu.mutation.ClearChainType()
	return stu
}

// SetChainID sets the "chain_id" field.
func (stu *SyncTaskUpdate) SetChainID(s string) *SyncTaskUpdate {
	stu.mutation.SetChainID(s)
	return stu
}

// SetStart sets the "start" field.
func (stu *SyncTaskUpdate) SetStart(u uint64) *SyncTaskUpdate {
	stu.mutation.ResetStart()
	stu.mutation.SetStart(u)
	return stu
}

// AddStart adds u to the "start" field.
func (stu *SyncTaskUpdate) AddStart(u int64) *SyncTaskUpdate {
	stu.mutation.AddStart(u)
	return stu
}

// SetEnd sets the "end" field.
func (stu *SyncTaskUpdate) SetEnd(u uint64) *SyncTaskUpdate {
	stu.mutation.ResetEnd()
	stu.mutation.SetEnd(u)
	return stu
}

// AddEnd adds u to the "end" field.
func (stu *SyncTaskUpdate) AddEnd(u int64) *SyncTaskUpdate {
	stu.mutation.AddEnd(u)
	return stu
}

// SetCurrent sets the "current" field.
func (stu *SyncTaskUpdate) SetCurrent(u uint64) *SyncTaskUpdate {
	stu.mutation.ResetCurrent()
	stu.mutation.SetCurrent(u)
	return stu
}

// AddCurrent adds u to the "current" field.
func (stu *SyncTaskUpdate) AddCurrent(u int64) *SyncTaskUpdate {
	stu.mutation.AddCurrent(u)
	return stu
}

// SetTopic sets the "topic" field.
func (stu *SyncTaskUpdate) SetTopic(s string) *SyncTaskUpdate {
	stu.mutation.SetTopic(s)
	return stu
}

// SetDescription sets the "description" field.
func (stu *SyncTaskUpdate) SetDescription(s string) *SyncTaskUpdate {
	stu.mutation.SetDescription(s)
	return stu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stu *SyncTaskUpdate) SetNillableDescription(s *string) *SyncTaskUpdate {
	if s != nil {
		stu.SetDescription(*s)
	}
	return stu
}

// ClearDescription clears the value of the "description" field.
func (stu *SyncTaskUpdate) ClearDescription() *SyncTaskUpdate {
	stu.mutation.ClearDescription()
	return stu
}

// SetSyncState sets the "sync_state" field.
func (stu *SyncTaskUpdate) SetSyncState(s string) *SyncTaskUpdate {
	stu.mutation.SetSyncState(s)
	return stu
}

// SetNillableSyncState sets the "sync_state" field if the given value is not nil.
func (stu *SyncTaskUpdate) SetNillableSyncState(s *string) *SyncTaskUpdate {
	if s != nil {
		stu.SetSyncState(*s)
	}
	return stu
}

// ClearSyncState clears the value of the "sync_state" field.
func (stu *SyncTaskUpdate) ClearSyncState() *SyncTaskUpdate {
	stu.mutation.ClearSyncState()
	return stu
}

// SetRemark sets the "remark" field.
func (stu *SyncTaskUpdate) SetRemark(s string) *SyncTaskUpdate {
	stu.mutation.SetRemark(s)
	return stu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stu *SyncTaskUpdate) SetNillableRemark(s *string) *SyncTaskUpdate {
	if s != nil {
		stu.SetRemark(*s)
	}
	return stu
}

// ClearRemark clears the value of the "remark" field.
func (stu *SyncTaskUpdate) ClearRemark() *SyncTaskUpdate {
	stu.mutation.ClearRemark()
	return stu
}

// Mutation returns the SyncTaskMutation object of the builder.
func (stu *SyncTaskUpdate) Mutation() *SyncTaskMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SyncTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := stu.defaults(); err != nil {
		return 0, err
	}
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SyncTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SyncTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SyncTaskUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SyncTaskUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SyncTaskUpdate) defaults() error {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		if synctask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized synctask.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := synctask.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stu *SyncTaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SyncTaskUpdate {
	stu.modifiers = append(stu.modifiers, modifiers...)
	return stu
}

func (stu *SyncTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   synctask.Table,
			Columns: synctask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: synctask.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldCreatedAt,
		})
	}
	if value, ok := stu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldCreatedAt,
		})
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldDeletedAt,
		})
	}
	if value, ok := stu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldDeletedAt,
		})
	}
	if value, ok := stu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: synctask.FieldEntID,
		})
	}
	if value, ok := stu.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldChainType,
		})
	}
	if stu.mutation.ChainTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldChainType,
		})
	}
	if value, ok := stu.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldChainID,
		})
	}
	if value, ok := stu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldStart,
		})
	}
	if value, ok := stu.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldStart,
		})
	}
	if value, ok := stu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldEnd,
		})
	}
	if value, ok := stu.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldEnd,
		})
	}
	if value, ok := stu.mutation.Current(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldCurrent,
		})
	}
	if value, ok := stu.mutation.AddedCurrent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldCurrent,
		})
	}
	if value, ok := stu.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldTopic,
		})
	}
	if value, ok := stu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldDescription,
		})
	}
	if stu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldDescription,
		})
	}
	if value, ok := stu.mutation.SyncState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldSyncState,
		})
	}
	if stu.mutation.SyncStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldSyncState,
		})
	}
	if value, ok := stu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldRemark,
		})
	}
	if stu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldRemark,
		})
	}
	_spec.Modifiers = stu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synctask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SyncTaskUpdateOne is the builder for updating a single SyncTask entity.
type SyncTaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SyncTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (stuo *SyncTaskUpdateOne) SetCreatedAt(u uint32) *SyncTaskUpdateOne {
	stuo.mutation.ResetCreatedAt()
	stuo.mutation.SetCreatedAt(u)
	return stuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stuo *SyncTaskUpdateOne) SetNillableCreatedAt(u *uint32) *SyncTaskUpdateOne {
	if u != nil {
		stuo.SetCreatedAt(*u)
	}
	return stuo
}

// AddCreatedAt adds u to the "created_at" field.
func (stuo *SyncTaskUpdateOne) AddCreatedAt(u int32) *SyncTaskUpdateOne {
	stuo.mutation.AddCreatedAt(u)
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *SyncTaskUpdateOne) SetUpdatedAt(u uint32) *SyncTaskUpdateOne {
	stuo.mutation.ResetUpdatedAt()
	stuo.mutation.SetUpdatedAt(u)
	return stuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (stuo *SyncTaskUpdateOne) AddUpdatedAt(u int32) *SyncTaskUpdateOne {
	stuo.mutation.AddUpdatedAt(u)
	return stuo
}

// SetDeletedAt sets the "deleted_at" field.
func (stuo *SyncTaskUpdateOne) SetDeletedAt(u uint32) *SyncTaskUpdateOne {
	stuo.mutation.ResetDeletedAt()
	stuo.mutation.SetDeletedAt(u)
	return stuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stuo *SyncTaskUpdateOne) SetNillableDeletedAt(u *uint32) *SyncTaskUpdateOne {
	if u != nil {
		stuo.SetDeletedAt(*u)
	}
	return stuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (stuo *SyncTaskUpdateOne) AddDeletedAt(u int32) *SyncTaskUpdateOne {
	stuo.mutation.AddDeletedAt(u)
	return stuo
}

// SetEntID sets the "ent_id" field.
func (stuo *SyncTaskUpdateOne) SetEntID(u uuid.UUID) *SyncTaskUpdateOne {
	stuo.mutation.SetEntID(u)
	return stuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (stuo *SyncTaskUpdateOne) SetNillableEntID(u *uuid.UUID) *SyncTaskUpdateOne {
	if u != nil {
		stuo.SetEntID(*u)
	}
	return stuo
}

// SetChainType sets the "chain_type" field.
func (stuo *SyncTaskUpdateOne) SetChainType(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetChainType(s)
	return stuo
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (stuo *SyncTaskUpdateOne) SetNillableChainType(s *string) *SyncTaskUpdateOne {
	if s != nil {
		stuo.SetChainType(*s)
	}
	return stuo
}

// ClearChainType clears the value of the "chain_type" field.
func (stuo *SyncTaskUpdateOne) ClearChainType() *SyncTaskUpdateOne {
	stuo.mutation.ClearChainType()
	return stuo
}

// SetChainID sets the "chain_id" field.
func (stuo *SyncTaskUpdateOne) SetChainID(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetChainID(s)
	return stuo
}

// SetStart sets the "start" field.
func (stuo *SyncTaskUpdateOne) SetStart(u uint64) *SyncTaskUpdateOne {
	stuo.mutation.ResetStart()
	stuo.mutation.SetStart(u)
	return stuo
}

// AddStart adds u to the "start" field.
func (stuo *SyncTaskUpdateOne) AddStart(u int64) *SyncTaskUpdateOne {
	stuo.mutation.AddStart(u)
	return stuo
}

// SetEnd sets the "end" field.
func (stuo *SyncTaskUpdateOne) SetEnd(u uint64) *SyncTaskUpdateOne {
	stuo.mutation.ResetEnd()
	stuo.mutation.SetEnd(u)
	return stuo
}

// AddEnd adds u to the "end" field.
func (stuo *SyncTaskUpdateOne) AddEnd(u int64) *SyncTaskUpdateOne {
	stuo.mutation.AddEnd(u)
	return stuo
}

// SetCurrent sets the "current" field.
func (stuo *SyncTaskUpdateOne) SetCurrent(u uint64) *SyncTaskUpdateOne {
	stuo.mutation.ResetCurrent()
	stuo.mutation.SetCurrent(u)
	return stuo
}

// AddCurrent adds u to the "current" field.
func (stuo *SyncTaskUpdateOne) AddCurrent(u int64) *SyncTaskUpdateOne {
	stuo.mutation.AddCurrent(u)
	return stuo
}

// SetTopic sets the "topic" field.
func (stuo *SyncTaskUpdateOne) SetTopic(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetTopic(s)
	return stuo
}

// SetDescription sets the "description" field.
func (stuo *SyncTaskUpdateOne) SetDescription(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetDescription(s)
	return stuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stuo *SyncTaskUpdateOne) SetNillableDescription(s *string) *SyncTaskUpdateOne {
	if s != nil {
		stuo.SetDescription(*s)
	}
	return stuo
}

// ClearDescription clears the value of the "description" field.
func (stuo *SyncTaskUpdateOne) ClearDescription() *SyncTaskUpdateOne {
	stuo.mutation.ClearDescription()
	return stuo
}

// SetSyncState sets the "sync_state" field.
func (stuo *SyncTaskUpdateOne) SetSyncState(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetSyncState(s)
	return stuo
}

// SetNillableSyncState sets the "sync_state" field if the given value is not nil.
func (stuo *SyncTaskUpdateOne) SetNillableSyncState(s *string) *SyncTaskUpdateOne {
	if s != nil {
		stuo.SetSyncState(*s)
	}
	return stuo
}

// ClearSyncState clears the value of the "sync_state" field.
func (stuo *SyncTaskUpdateOne) ClearSyncState() *SyncTaskUpdateOne {
	stuo.mutation.ClearSyncState()
	return stuo
}

// SetRemark sets the "remark" field.
func (stuo *SyncTaskUpdateOne) SetRemark(s string) *SyncTaskUpdateOne {
	stuo.mutation.SetRemark(s)
	return stuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stuo *SyncTaskUpdateOne) SetNillableRemark(s *string) *SyncTaskUpdateOne {
	if s != nil {
		stuo.SetRemark(*s)
	}
	return stuo
}

// ClearRemark clears the value of the "remark" field.
func (stuo *SyncTaskUpdateOne) ClearRemark() *SyncTaskUpdateOne {
	stuo.mutation.ClearRemark()
	return stuo
}

// Mutation returns the SyncTaskMutation object of the builder.
func (stuo *SyncTaskUpdateOne) Mutation() *SyncTaskMutation {
	return stuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SyncTaskUpdateOne) Select(field string, fields ...string) *SyncTaskUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SyncTask entity.
func (stuo *SyncTaskUpdateOne) Save(ctx context.Context) (*SyncTask, error) {
	var (
		err  error
		node *SyncTask
	)
	if err := stuo.defaults(); err != nil {
		return nil, err
	}
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SyncTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, stuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SyncTask)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SyncTaskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SyncTaskUpdateOne) SaveX(ctx context.Context) *SyncTask {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SyncTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SyncTaskUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SyncTaskUpdateOne) defaults() error {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		if synctask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized synctask.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := synctask.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stuo *SyncTaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SyncTaskUpdateOne {
	stuo.modifiers = append(stuo.modifiers, modifiers...)
	return stuo
}

func (stuo *SyncTaskUpdateOne) sqlSave(ctx context.Context) (_node *SyncTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   synctask.Table,
			Columns: synctask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: synctask.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SyncTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, synctask.FieldID)
		for _, f := range fields {
			if !synctask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != synctask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldCreatedAt,
		})
	}
	if value, ok := stuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldCreatedAt,
		})
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldDeletedAt,
		})
	}
	if value, ok := stuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldDeletedAt,
		})
	}
	if value, ok := stuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: synctask.FieldEntID,
		})
	}
	if value, ok := stuo.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldChainType,
		})
	}
	if stuo.mutation.ChainTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldChainType,
		})
	}
	if value, ok := stuo.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldChainID,
		})
	}
	if value, ok := stuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldStart,
		})
	}
	if value, ok := stuo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldStart,
		})
	}
	if value, ok := stuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldEnd,
		})
	}
	if value, ok := stuo.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldEnd,
		})
	}
	if value, ok := stuo.mutation.Current(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldCurrent,
		})
	}
	if value, ok := stuo.mutation.AddedCurrent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldCurrent,
		})
	}
	if value, ok := stuo.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldTopic,
		})
	}
	if value, ok := stuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldDescription,
		})
	}
	if stuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldDescription,
		})
	}
	if value, ok := stuo.mutation.SyncState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldSyncState,
		})
	}
	if stuo.mutation.SyncStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldSyncState,
		})
	}
	if value, ok := stuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldRemark,
		})
	}
	if stuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: synctask.FieldRemark,
		})
	}
	_spec.Modifiers = stuo.modifiers
	_node = &SyncTask{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synctask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
