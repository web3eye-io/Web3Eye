// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/token"
)

// TokenUpdate is the builder for updating Token entities.
type TokenUpdate struct {
	config
	hooks     []Hook
	mutation  *TokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TokenUpdate builder.
func (tu *TokenUpdate) Where(ps ...predicate.Token) *TokenUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetEntID sets the "ent_id" field.
func (tu *TokenUpdate) SetEntID(u uuid.UUID) *TokenUpdate {
	tu.mutation.SetEntID(u)
	return tu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableEntID(u *uuid.UUID) *TokenUpdate {
	if u != nil {
		tu.SetEntID(*u)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TokenUpdate) SetCreatedAt(u uint32) *TokenUpdate {
	tu.mutation.ResetCreatedAt()
	tu.mutation.SetCreatedAt(u)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableCreatedAt(u *uint32) *TokenUpdate {
	if u != nil {
		tu.SetCreatedAt(*u)
	}
	return tu
}

// AddCreatedAt adds u to the "created_at" field.
func (tu *TokenUpdate) AddCreatedAt(u int32) *TokenUpdate {
	tu.mutation.AddCreatedAt(u)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TokenUpdate) SetUpdatedAt(u uint32) *TokenUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(u)
	return tu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tu *TokenUpdate) AddUpdatedAt(u int32) *TokenUpdate {
	tu.mutation.AddUpdatedAt(u)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TokenUpdate) SetDeletedAt(u uint32) *TokenUpdate {
	tu.mutation.ResetDeletedAt()
	tu.mutation.SetDeletedAt(u)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableDeletedAt(u *uint32) *TokenUpdate {
	if u != nil {
		tu.SetDeletedAt(*u)
	}
	return tu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tu *TokenUpdate) AddDeletedAt(u int32) *TokenUpdate {
	tu.mutation.AddDeletedAt(u)
	return tu
}

// SetChainType sets the "chain_type" field.
func (tu *TokenUpdate) SetChainType(s string) *TokenUpdate {
	tu.mutation.SetChainType(s)
	return tu
}

// SetChainID sets the "chain_id" field.
func (tu *TokenUpdate) SetChainID(s string) *TokenUpdate {
	tu.mutation.SetChainID(s)
	return tu
}

// SetContract sets the "contract" field.
func (tu *TokenUpdate) SetContract(s string) *TokenUpdate {
	tu.mutation.SetContract(s)
	return tu
}

// SetTokenType sets the "token_type" field.
func (tu *TokenUpdate) SetTokenType(s string) *TokenUpdate {
	tu.mutation.SetTokenType(s)
	return tu
}

// SetTokenID sets the "token_id" field.
func (tu *TokenUpdate) SetTokenID(s string) *TokenUpdate {
	tu.mutation.SetTokenID(s)
	return tu
}

// SetOwner sets the "owner" field.
func (tu *TokenUpdate) SetOwner(s string) *TokenUpdate {
	tu.mutation.SetOwner(s)
	return tu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableOwner(s *string) *TokenUpdate {
	if s != nil {
		tu.SetOwner(*s)
	}
	return tu
}

// ClearOwner clears the value of the "owner" field.
func (tu *TokenUpdate) ClearOwner() *TokenUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// SetURI sets the "uri" field.
func (tu *TokenUpdate) SetURI(s string) *TokenUpdate {
	tu.mutation.SetURI(s)
	return tu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableURI(s *string) *TokenUpdate {
	if s != nil {
		tu.SetURI(*s)
	}
	return tu
}

// ClearURI clears the value of the "uri" field.
func (tu *TokenUpdate) ClearURI() *TokenUpdate {
	tu.mutation.ClearURI()
	return tu
}

// SetURIState sets the "uri_state" field.
func (tu *TokenUpdate) SetURIState(s string) *TokenUpdate {
	tu.mutation.SetURIState(s)
	return tu
}

// SetNillableURIState sets the "uri_state" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableURIState(s *string) *TokenUpdate {
	if s != nil {
		tu.SetURIState(*s)
	}
	return tu
}

// ClearURIState clears the value of the "uri_state" field.
func (tu *TokenUpdate) ClearURIState() *TokenUpdate {
	tu.mutation.ClearURIState()
	return tu
}

// SetURIType sets the "uri_type" field.
func (tu *TokenUpdate) SetURIType(s string) *TokenUpdate {
	tu.mutation.SetURIType(s)
	return tu
}

// SetNillableURIType sets the "uri_type" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableURIType(s *string) *TokenUpdate {
	if s != nil {
		tu.SetURIType(*s)
	}
	return tu
}

// ClearURIType clears the value of the "uri_type" field.
func (tu *TokenUpdate) ClearURIType() *TokenUpdate {
	tu.mutation.ClearURIType()
	return tu
}

// SetImageURL sets the "image_url" field.
func (tu *TokenUpdate) SetImageURL(s string) *TokenUpdate {
	tu.mutation.SetImageURL(s)
	return tu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableImageURL(s *string) *TokenUpdate {
	if s != nil {
		tu.SetImageURL(*s)
	}
	return tu
}

// ClearImageURL clears the value of the "image_url" field.
func (tu *TokenUpdate) ClearImageURL() *TokenUpdate {
	tu.mutation.ClearImageURL()
	return tu
}

// SetVideoURL sets the "video_url" field.
func (tu *TokenUpdate) SetVideoURL(s string) *TokenUpdate {
	tu.mutation.SetVideoURL(s)
	return tu
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableVideoURL(s *string) *TokenUpdate {
	if s != nil {
		tu.SetVideoURL(*s)
	}
	return tu
}

// ClearVideoURL clears the value of the "video_url" field.
func (tu *TokenUpdate) ClearVideoURL() *TokenUpdate {
	tu.mutation.ClearVideoURL()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TokenUpdate) SetDescription(s string) *TokenUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableDescription(s *string) *TokenUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TokenUpdate) ClearDescription() *TokenUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetName sets the "name" field.
func (tu *TokenUpdate) SetName(s string) *TokenUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableName(s *string) *TokenUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TokenUpdate) ClearName() *TokenUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetVectorID sets the "vector_id" field.
func (tu *TokenUpdate) SetVectorID(i int64) *TokenUpdate {
	tu.mutation.ResetVectorID()
	tu.mutation.SetVectorID(i)
	return tu
}

// SetNillableVectorID sets the "vector_id" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableVectorID(i *int64) *TokenUpdate {
	if i != nil {
		tu.SetVectorID(*i)
	}
	return tu
}

// AddVectorID adds i to the "vector_id" field.
func (tu *TokenUpdate) AddVectorID(i int64) *TokenUpdate {
	tu.mutation.AddVectorID(i)
	return tu
}

// ClearVectorID clears the value of the "vector_id" field.
func (tu *TokenUpdate) ClearVectorID() *TokenUpdate {
	tu.mutation.ClearVectorID()
	return tu
}

// SetVectorState sets the "vector_state" field.
func (tu *TokenUpdate) SetVectorState(s string) *TokenUpdate {
	tu.mutation.SetVectorState(s)
	return tu
}

// SetNillableVectorState sets the "vector_state" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableVectorState(s *string) *TokenUpdate {
	if s != nil {
		tu.SetVectorState(*s)
	}
	return tu
}

// ClearVectorState clears the value of the "vector_state" field.
func (tu *TokenUpdate) ClearVectorState() *TokenUpdate {
	tu.mutation.ClearVectorState()
	return tu
}

// SetRemark sets the "remark" field.
func (tu *TokenUpdate) SetRemark(s string) *TokenUpdate {
	tu.mutation.SetRemark(s)
	return tu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableRemark(s *string) *TokenUpdate {
	if s != nil {
		tu.SetRemark(*s)
	}
	return tu
}

// ClearRemark clears the value of the "remark" field.
func (tu *TokenUpdate) ClearRemark() *TokenUpdate {
	tu.mutation.ClearRemark()
	return tu
}

// SetIpfsImageURL sets the "ipfs_image_url" field.
func (tu *TokenUpdate) SetIpfsImageURL(s string) *TokenUpdate {
	tu.mutation.SetIpfsImageURL(s)
	return tu
}

// SetNillableIpfsImageURL sets the "ipfs_image_url" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableIpfsImageURL(s *string) *TokenUpdate {
	if s != nil {
		tu.SetIpfsImageURL(*s)
	}
	return tu
}

// ClearIpfsImageURL clears the value of the "ipfs_image_url" field.
func (tu *TokenUpdate) ClearIpfsImageURL() *TokenUpdate {
	tu.mutation.ClearIpfsImageURL()
	return tu
}

// SetImageSnapshotID sets the "image_snapshot_id" field.
func (tu *TokenUpdate) SetImageSnapshotID(u uint32) *TokenUpdate {
	tu.mutation.ResetImageSnapshotID()
	tu.mutation.SetImageSnapshotID(u)
	return tu
}

// SetNillableImageSnapshotID sets the "image_snapshot_id" field if the given value is not nil.
func (tu *TokenUpdate) SetNillableImageSnapshotID(u *uint32) *TokenUpdate {
	if u != nil {
		tu.SetImageSnapshotID(*u)
	}
	return tu
}

// AddImageSnapshotID adds u to the "image_snapshot_id" field.
func (tu *TokenUpdate) AddImageSnapshotID(u int32) *TokenUpdate {
	tu.mutation.AddImageSnapshotID(u)
	return tu
}

// ClearImageSnapshotID clears the value of the "image_snapshot_id" field.
func (tu *TokenUpdate) ClearImageSnapshotID() *TokenUpdate {
	tu.mutation.ClearImageSnapshotID()
	return tu
}

// Mutation returns the TokenMutation object of the builder.
func (tu *TokenUpdate) Mutation() *TokenMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TokenUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TokenUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TokenUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if token.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized token.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := token.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TokenUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   token.Table,
			Columns: token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: token.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: token.FieldEntID,
		})
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldChainType,
		})
	}
	if value, ok := tu.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldChainID,
		})
	}
	if value, ok := tu.mutation.Contract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldContract,
		})
	}
	if value, ok := tu.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldTokenType,
		})
	}
	if value, ok := tu.mutation.TokenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldTokenID,
		})
	}
	if value, ok := tu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldOwner,
		})
	}
	if tu.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldOwner,
		})
	}
	if value, ok := tu.mutation.URI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURI,
		})
	}
	if tu.mutation.URICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldURI,
		})
	}
	if value, ok := tu.mutation.URIState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURIState,
		})
	}
	if tu.mutation.URIStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldURIState,
		})
	}
	if value, ok := tu.mutation.URIType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURIType,
		})
	}
	if tu.mutation.URITypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldURIType,
		})
	}
	if value, ok := tu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldImageURL,
		})
	}
	if tu.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldImageURL,
		})
	}
	if value, ok := tu.mutation.VideoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldVideoURL,
		})
	}
	if tu.mutation.VideoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldVideoURL,
		})
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldDescription,
		})
	}
	if tu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldName,
		})
	}
	if tu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldName,
		})
	}
	if value, ok := tu.mutation.VectorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: token.FieldVectorID,
		})
	}
	if value, ok := tu.mutation.AddedVectorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: token.FieldVectorID,
		})
	}
	if tu.mutation.VectorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: token.FieldVectorID,
		})
	}
	if value, ok := tu.mutation.VectorState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldVectorState,
		})
	}
	if tu.mutation.VectorStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldVectorState,
		})
	}
	if value, ok := tu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldRemark,
		})
	}
	if tu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldRemark,
		})
	}
	if value, ok := tu.mutation.IpfsImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldIpfsImageURL,
		})
	}
	if tu.mutation.IpfsImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldIpfsImageURL,
		})
	}
	if value, ok := tu.mutation.ImageSnapshotID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldImageSnapshotID,
		})
	}
	if value, ok := tu.mutation.AddedImageSnapshotID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldImageSnapshotID,
		})
	}
	if tu.mutation.ImageSnapshotIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: token.FieldImageSnapshotID,
		})
	}
	_spec.Modifiers = tu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TokenUpdateOne is the builder for updating a single Token entity.
type TokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (tuo *TokenUpdateOne) SetEntID(u uuid.UUID) *TokenUpdateOne {
	tuo.mutation.SetEntID(u)
	return tuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableEntID(u *uuid.UUID) *TokenUpdateOne {
	if u != nil {
		tuo.SetEntID(*u)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TokenUpdateOne) SetCreatedAt(u uint32) *TokenUpdateOne {
	tuo.mutation.ResetCreatedAt()
	tuo.mutation.SetCreatedAt(u)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableCreatedAt(u *uint32) *TokenUpdateOne {
	if u != nil {
		tuo.SetCreatedAt(*u)
	}
	return tuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tuo *TokenUpdateOne) AddCreatedAt(u int32) *TokenUpdateOne {
	tuo.mutation.AddCreatedAt(u)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TokenUpdateOne) SetUpdatedAt(u uint32) *TokenUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(u)
	return tuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tuo *TokenUpdateOne) AddUpdatedAt(u int32) *TokenUpdateOne {
	tuo.mutation.AddUpdatedAt(u)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TokenUpdateOne) SetDeletedAt(u uint32) *TokenUpdateOne {
	tuo.mutation.ResetDeletedAt()
	tuo.mutation.SetDeletedAt(u)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableDeletedAt(u *uint32) *TokenUpdateOne {
	if u != nil {
		tuo.SetDeletedAt(*u)
	}
	return tuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tuo *TokenUpdateOne) AddDeletedAt(u int32) *TokenUpdateOne {
	tuo.mutation.AddDeletedAt(u)
	return tuo
}

// SetChainType sets the "chain_type" field.
func (tuo *TokenUpdateOne) SetChainType(s string) *TokenUpdateOne {
	tuo.mutation.SetChainType(s)
	return tuo
}

// SetChainID sets the "chain_id" field.
func (tuo *TokenUpdateOne) SetChainID(s string) *TokenUpdateOne {
	tuo.mutation.SetChainID(s)
	return tuo
}

// SetContract sets the "contract" field.
func (tuo *TokenUpdateOne) SetContract(s string) *TokenUpdateOne {
	tuo.mutation.SetContract(s)
	return tuo
}

// SetTokenType sets the "token_type" field.
func (tuo *TokenUpdateOne) SetTokenType(s string) *TokenUpdateOne {
	tuo.mutation.SetTokenType(s)
	return tuo
}

// SetTokenID sets the "token_id" field.
func (tuo *TokenUpdateOne) SetTokenID(s string) *TokenUpdateOne {
	tuo.mutation.SetTokenID(s)
	return tuo
}

// SetOwner sets the "owner" field.
func (tuo *TokenUpdateOne) SetOwner(s string) *TokenUpdateOne {
	tuo.mutation.SetOwner(s)
	return tuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableOwner(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetOwner(*s)
	}
	return tuo
}

// ClearOwner clears the value of the "owner" field.
func (tuo *TokenUpdateOne) ClearOwner() *TokenUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// SetURI sets the "uri" field.
func (tuo *TokenUpdateOne) SetURI(s string) *TokenUpdateOne {
	tuo.mutation.SetURI(s)
	return tuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableURI(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetURI(*s)
	}
	return tuo
}

// ClearURI clears the value of the "uri" field.
func (tuo *TokenUpdateOne) ClearURI() *TokenUpdateOne {
	tuo.mutation.ClearURI()
	return tuo
}

// SetURIState sets the "uri_state" field.
func (tuo *TokenUpdateOne) SetURIState(s string) *TokenUpdateOne {
	tuo.mutation.SetURIState(s)
	return tuo
}

// SetNillableURIState sets the "uri_state" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableURIState(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetURIState(*s)
	}
	return tuo
}

// ClearURIState clears the value of the "uri_state" field.
func (tuo *TokenUpdateOne) ClearURIState() *TokenUpdateOne {
	tuo.mutation.ClearURIState()
	return tuo
}

// SetURIType sets the "uri_type" field.
func (tuo *TokenUpdateOne) SetURIType(s string) *TokenUpdateOne {
	tuo.mutation.SetURIType(s)
	return tuo
}

// SetNillableURIType sets the "uri_type" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableURIType(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetURIType(*s)
	}
	return tuo
}

// ClearURIType clears the value of the "uri_type" field.
func (tuo *TokenUpdateOne) ClearURIType() *TokenUpdateOne {
	tuo.mutation.ClearURIType()
	return tuo
}

// SetImageURL sets the "image_url" field.
func (tuo *TokenUpdateOne) SetImageURL(s string) *TokenUpdateOne {
	tuo.mutation.SetImageURL(s)
	return tuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableImageURL(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetImageURL(*s)
	}
	return tuo
}

// ClearImageURL clears the value of the "image_url" field.
func (tuo *TokenUpdateOne) ClearImageURL() *TokenUpdateOne {
	tuo.mutation.ClearImageURL()
	return tuo
}

// SetVideoURL sets the "video_url" field.
func (tuo *TokenUpdateOne) SetVideoURL(s string) *TokenUpdateOne {
	tuo.mutation.SetVideoURL(s)
	return tuo
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableVideoURL(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetVideoURL(*s)
	}
	return tuo
}

// ClearVideoURL clears the value of the "video_url" field.
func (tuo *TokenUpdateOne) ClearVideoURL() *TokenUpdateOne {
	tuo.mutation.ClearVideoURL()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TokenUpdateOne) SetDescription(s string) *TokenUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableDescription(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TokenUpdateOne) ClearDescription() *TokenUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TokenUpdateOne) SetName(s string) *TokenUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableName(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TokenUpdateOne) ClearName() *TokenUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetVectorID sets the "vector_id" field.
func (tuo *TokenUpdateOne) SetVectorID(i int64) *TokenUpdateOne {
	tuo.mutation.ResetVectorID()
	tuo.mutation.SetVectorID(i)
	return tuo
}

// SetNillableVectorID sets the "vector_id" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableVectorID(i *int64) *TokenUpdateOne {
	if i != nil {
		tuo.SetVectorID(*i)
	}
	return tuo
}

// AddVectorID adds i to the "vector_id" field.
func (tuo *TokenUpdateOne) AddVectorID(i int64) *TokenUpdateOne {
	tuo.mutation.AddVectorID(i)
	return tuo
}

// ClearVectorID clears the value of the "vector_id" field.
func (tuo *TokenUpdateOne) ClearVectorID() *TokenUpdateOne {
	tuo.mutation.ClearVectorID()
	return tuo
}

// SetVectorState sets the "vector_state" field.
func (tuo *TokenUpdateOne) SetVectorState(s string) *TokenUpdateOne {
	tuo.mutation.SetVectorState(s)
	return tuo
}

// SetNillableVectorState sets the "vector_state" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableVectorState(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetVectorState(*s)
	}
	return tuo
}

// ClearVectorState clears the value of the "vector_state" field.
func (tuo *TokenUpdateOne) ClearVectorState() *TokenUpdateOne {
	tuo.mutation.ClearVectorState()
	return tuo
}

// SetRemark sets the "remark" field.
func (tuo *TokenUpdateOne) SetRemark(s string) *TokenUpdateOne {
	tuo.mutation.SetRemark(s)
	return tuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableRemark(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetRemark(*s)
	}
	return tuo
}

// ClearRemark clears the value of the "remark" field.
func (tuo *TokenUpdateOne) ClearRemark() *TokenUpdateOne {
	tuo.mutation.ClearRemark()
	return tuo
}

// SetIpfsImageURL sets the "ipfs_image_url" field.
func (tuo *TokenUpdateOne) SetIpfsImageURL(s string) *TokenUpdateOne {
	tuo.mutation.SetIpfsImageURL(s)
	return tuo
}

// SetNillableIpfsImageURL sets the "ipfs_image_url" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableIpfsImageURL(s *string) *TokenUpdateOne {
	if s != nil {
		tuo.SetIpfsImageURL(*s)
	}
	return tuo
}

// ClearIpfsImageURL clears the value of the "ipfs_image_url" field.
func (tuo *TokenUpdateOne) ClearIpfsImageURL() *TokenUpdateOne {
	tuo.mutation.ClearIpfsImageURL()
	return tuo
}

// SetImageSnapshotID sets the "image_snapshot_id" field.
func (tuo *TokenUpdateOne) SetImageSnapshotID(u uint32) *TokenUpdateOne {
	tuo.mutation.ResetImageSnapshotID()
	tuo.mutation.SetImageSnapshotID(u)
	return tuo
}

// SetNillableImageSnapshotID sets the "image_snapshot_id" field if the given value is not nil.
func (tuo *TokenUpdateOne) SetNillableImageSnapshotID(u *uint32) *TokenUpdateOne {
	if u != nil {
		tuo.SetImageSnapshotID(*u)
	}
	return tuo
}

// AddImageSnapshotID adds u to the "image_snapshot_id" field.
func (tuo *TokenUpdateOne) AddImageSnapshotID(u int32) *TokenUpdateOne {
	tuo.mutation.AddImageSnapshotID(u)
	return tuo
}

// ClearImageSnapshotID clears the value of the "image_snapshot_id" field.
func (tuo *TokenUpdateOne) ClearImageSnapshotID() *TokenUpdateOne {
	tuo.mutation.ClearImageSnapshotID()
	return tuo
}

// Mutation returns the TokenMutation object of the builder.
func (tuo *TokenUpdateOne) Mutation() *TokenMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TokenUpdateOne) Select(field string, fields ...string) *TokenUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Token entity.
func (tuo *TokenUpdateOne) Save(ctx context.Context) (*Token, error) {
	var (
		err  error
		node *Token
	)
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Token)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TokenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TokenUpdateOne) SaveX(ctx context.Context) *Token {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TokenUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TokenUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if token.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized token.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := token.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TokenUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TokenUpdateOne) sqlSave(ctx context.Context) (_node *Token, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   token.Table,
			Columns: token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: token.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, token.FieldID)
		for _, f := range fields {
			if !token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: token.FieldEntID,
		})
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldChainType,
		})
	}
	if value, ok := tuo.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldChainID,
		})
	}
	if value, ok := tuo.mutation.Contract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldContract,
		})
	}
	if value, ok := tuo.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldTokenType,
		})
	}
	if value, ok := tuo.mutation.TokenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldTokenID,
		})
	}
	if value, ok := tuo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldOwner,
		})
	}
	if tuo.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldOwner,
		})
	}
	if value, ok := tuo.mutation.URI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURI,
		})
	}
	if tuo.mutation.URICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldURI,
		})
	}
	if value, ok := tuo.mutation.URIState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURIState,
		})
	}
	if tuo.mutation.URIStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldURIState,
		})
	}
	if value, ok := tuo.mutation.URIType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldURIType,
		})
	}
	if tuo.mutation.URITypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldURIType,
		})
	}
	if value, ok := tuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldImageURL,
		})
	}
	if tuo.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldImageURL,
		})
	}
	if value, ok := tuo.mutation.VideoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldVideoURL,
		})
	}
	if tuo.mutation.VideoURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldVideoURL,
		})
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldDescription,
		})
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldName,
		})
	}
	if tuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldName,
		})
	}
	if value, ok := tuo.mutation.VectorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: token.FieldVectorID,
		})
	}
	if value, ok := tuo.mutation.AddedVectorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: token.FieldVectorID,
		})
	}
	if tuo.mutation.VectorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: token.FieldVectorID,
		})
	}
	if value, ok := tuo.mutation.VectorState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldVectorState,
		})
	}
	if tuo.mutation.VectorStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldVectorState,
		})
	}
	if value, ok := tuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldRemark,
		})
	}
	if tuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldRemark,
		})
	}
	if value, ok := tuo.mutation.IpfsImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: token.FieldIpfsImageURL,
		})
	}
	if tuo.mutation.IpfsImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: token.FieldIpfsImageURL,
		})
	}
	if value, ok := tuo.mutation.ImageSnapshotID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldImageSnapshotID,
		})
	}
	if value, ok := tuo.mutation.AddedImageSnapshotID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: token.FieldImageSnapshotID,
		})
	}
	if tuo.mutation.ImageSnapshotIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: token.FieldImageSnapshotID,
		})
	}
	_spec.Modifiers = tuo.modifiers
	_node = &Token{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
