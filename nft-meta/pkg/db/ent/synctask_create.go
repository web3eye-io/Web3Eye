// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/synctask"
)

// SyncTaskCreate is the builder for creating a SyncTask entity.
type SyncTaskCreate struct {
	config
	mutation *SyncTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (stc *SyncTaskCreate) SetCreatedAt(u uint32) *SyncTaskCreate {
	stc.mutation.SetCreatedAt(u)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableCreatedAt(u *uint32) *SyncTaskCreate {
	if u != nil {
		stc.SetCreatedAt(*u)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *SyncTaskCreate) SetUpdatedAt(u uint32) *SyncTaskCreate {
	stc.mutation.SetUpdatedAt(u)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableUpdatedAt(u *uint32) *SyncTaskCreate {
	if u != nil {
		stc.SetUpdatedAt(*u)
	}
	return stc
}

// SetDeletedAt sets the "deleted_at" field.
func (stc *SyncTaskCreate) SetDeletedAt(u uint32) *SyncTaskCreate {
	stc.mutation.SetDeletedAt(u)
	return stc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableDeletedAt(u *uint32) *SyncTaskCreate {
	if u != nil {
		stc.SetDeletedAt(*u)
	}
	return stc
}

// SetEntID sets the "ent_id" field.
func (stc *SyncTaskCreate) SetEntID(u uuid.UUID) *SyncTaskCreate {
	stc.mutation.SetEntID(u)
	return stc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableEntID(u *uuid.UUID) *SyncTaskCreate {
	if u != nil {
		stc.SetEntID(*u)
	}
	return stc
}

// SetChainType sets the "chain_type" field.
func (stc *SyncTaskCreate) SetChainType(s string) *SyncTaskCreate {
	stc.mutation.SetChainType(s)
	return stc
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableChainType(s *string) *SyncTaskCreate {
	if s != nil {
		stc.SetChainType(*s)
	}
	return stc
}

// SetChainID sets the "chain_id" field.
func (stc *SyncTaskCreate) SetChainID(s string) *SyncTaskCreate {
	stc.mutation.SetChainID(s)
	return stc
}

// SetStart sets the "start" field.
func (stc *SyncTaskCreate) SetStart(u uint64) *SyncTaskCreate {
	stc.mutation.SetStart(u)
	return stc
}

// SetEnd sets the "end" field.
func (stc *SyncTaskCreate) SetEnd(u uint64) *SyncTaskCreate {
	stc.mutation.SetEnd(u)
	return stc
}

// SetCurrent sets the "current" field.
func (stc *SyncTaskCreate) SetCurrent(u uint64) *SyncTaskCreate {
	stc.mutation.SetCurrent(u)
	return stc
}

// SetTopic sets the "topic" field.
func (stc *SyncTaskCreate) SetTopic(s string) *SyncTaskCreate {
	stc.mutation.SetTopic(s)
	return stc
}

// SetDescription sets the "description" field.
func (stc *SyncTaskCreate) SetDescription(s string) *SyncTaskCreate {
	stc.mutation.SetDescription(s)
	return stc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableDescription(s *string) *SyncTaskCreate {
	if s != nil {
		stc.SetDescription(*s)
	}
	return stc
}

// SetSyncState sets the "sync_state" field.
func (stc *SyncTaskCreate) SetSyncState(s string) *SyncTaskCreate {
	stc.mutation.SetSyncState(s)
	return stc
}

// SetNillableSyncState sets the "sync_state" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableSyncState(s *string) *SyncTaskCreate {
	if s != nil {
		stc.SetSyncState(*s)
	}
	return stc
}

// SetRemark sets the "remark" field.
func (stc *SyncTaskCreate) SetRemark(s string) *SyncTaskCreate {
	stc.mutation.SetRemark(s)
	return stc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stc *SyncTaskCreate) SetNillableRemark(s *string) *SyncTaskCreate {
	if s != nil {
		stc.SetRemark(*s)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *SyncTaskCreate) SetID(u uint32) *SyncTaskCreate {
	stc.mutation.SetID(u)
	return stc
}

// Mutation returns the SyncTaskMutation object of the builder.
func (stc *SyncTaskCreate) Mutation() *SyncTaskMutation {
	return stc.mutation
}

// Save creates the SyncTask in the database.
func (stc *SyncTaskCreate) Save(ctx context.Context) (*SyncTask, error) {
	var (
		err  error
		node *SyncTask
	)
	if err := stc.defaults(); err != nil {
		return nil, err
	}
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SyncTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			if node, err = stc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			if stc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, stc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SyncTask)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SyncTaskMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SyncTaskCreate) SaveX(ctx context.Context) *SyncTask {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SyncTaskCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SyncTaskCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SyncTaskCreate) defaults() error {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		if synctask.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized synctask.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := synctask.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		if synctask.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized synctask.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := synctask.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stc.mutation.DeletedAt(); !ok {
		if synctask.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized synctask.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := synctask.DefaultDeletedAt()
		stc.mutation.SetDeletedAt(v)
	}
	if _, ok := stc.mutation.EntID(); !ok {
		if synctask.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized synctask.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := synctask.DefaultEntID()
		stc.mutation.SetEntID(v)
	}
	if _, ok := stc.mutation.ChainType(); !ok {
		v := synctask.DefaultChainType
		stc.mutation.SetChainType(v)
	}
	if _, ok := stc.mutation.SyncState(); !ok {
		v := synctask.DefaultSyncState
		stc.mutation.SetSyncState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (stc *SyncTaskCreate) check() error {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SyncTask.created_at"`)}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SyncTask.updated_at"`)}
	}
	if _, ok := stc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "SyncTask.deleted_at"`)}
	}
	if _, ok := stc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "SyncTask.ent_id"`)}
	}
	if _, ok := stc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "SyncTask.chain_id"`)}
	}
	if _, ok := stc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "SyncTask.start"`)}
	}
	if _, ok := stc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "SyncTask.end"`)}
	}
	if _, ok := stc.mutation.Current(); !ok {
		return &ValidationError{Name: "current", err: errors.New(`ent: missing required field "SyncTask.current"`)}
	}
	if _, ok := stc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required field "SyncTask.topic"`)}
	}
	return nil
}

func (stc *SyncTaskCreate) sqlSave(ctx context.Context) (*SyncTask, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (stc *SyncTaskCreate) createSpec() (*SyncTask, *sqlgraph.CreateSpec) {
	var (
		_node = &SyncTask{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: synctask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: synctask.FieldID,
			},
		}
	)
	_spec.OnConflict = stc.conflict
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := stc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: synctask.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := stc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: synctask.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := stc.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := stc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := stc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := stc.mutation.End(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldEnd,
		})
		_node.End = value
	}
	if value, ok := stc.mutation.Current(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: synctask.FieldCurrent,
		})
		_node.Current = value
	}
	if value, ok := stc.mutation.Topic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldTopic,
		})
		_node.Topic = value
	}
	if value, ok := stc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := stc.mutation.SyncState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldSyncState,
		})
		_node.SyncState = value
	}
	if value, ok := stc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: synctask.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SyncTask.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SyncTaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (stc *SyncTaskCreate) OnConflict(opts ...sql.ConflictOption) *SyncTaskUpsertOne {
	stc.conflict = opts
	return &SyncTaskUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SyncTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SyncTaskCreate) OnConflictColumns(columns ...string) *SyncTaskUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SyncTaskUpsertOne{
		create: stc,
	}
}

type (
	// SyncTaskUpsertOne is the builder for "upsert"-ing
	//  one SyncTask node.
	SyncTaskUpsertOne struct {
		create *SyncTaskCreate
	}

	// SyncTaskUpsert is the "OnConflict" setter.
	SyncTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SyncTaskUpsert) SetCreatedAt(v uint32) *SyncTaskUpsert {
	u.Set(synctask.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateCreatedAt() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SyncTaskUpsert) AddCreatedAt(v uint32) *SyncTaskUpsert {
	u.Add(synctask.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SyncTaskUpsert) SetUpdatedAt(v uint32) *SyncTaskUpsert {
	u.Set(synctask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateUpdatedAt() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SyncTaskUpsert) AddUpdatedAt(v uint32) *SyncTaskUpsert {
	u.Add(synctask.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SyncTaskUpsert) SetDeletedAt(v uint32) *SyncTaskUpsert {
	u.Set(synctask.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateDeletedAt() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SyncTaskUpsert) AddDeletedAt(v uint32) *SyncTaskUpsert {
	u.Add(synctask.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *SyncTaskUpsert) SetEntID(v uuid.UUID) *SyncTaskUpsert {
	u.Set(synctask.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateEntID() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldEntID)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *SyncTaskUpsert) SetChainType(v string) *SyncTaskUpsert {
	u.Set(synctask.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateChainType() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldChainType)
	return u
}

// ClearChainType clears the value of the "chain_type" field.
func (u *SyncTaskUpsert) ClearChainType() *SyncTaskUpsert {
	u.SetNull(synctask.FieldChainType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *SyncTaskUpsert) SetChainID(v string) *SyncTaskUpsert {
	u.Set(synctask.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateChainID() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldChainID)
	return u
}

// SetStart sets the "start" field.
func (u *SyncTaskUpsert) SetStart(v uint64) *SyncTaskUpsert {
	u.Set(synctask.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateStart() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *SyncTaskUpsert) AddStart(v uint64) *SyncTaskUpsert {
	u.Add(synctask.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *SyncTaskUpsert) SetEnd(v uint64) *SyncTaskUpsert {
	u.Set(synctask.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateEnd() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *SyncTaskUpsert) AddEnd(v uint64) *SyncTaskUpsert {
	u.Add(synctask.FieldEnd, v)
	return u
}

// SetCurrent sets the "current" field.
func (u *SyncTaskUpsert) SetCurrent(v uint64) *SyncTaskUpsert {
	u.Set(synctask.FieldCurrent, v)
	return u
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateCurrent() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldCurrent)
	return u
}

// AddCurrent adds v to the "current" field.
func (u *SyncTaskUpsert) AddCurrent(v uint64) *SyncTaskUpsert {
	u.Add(synctask.FieldCurrent, v)
	return u
}

// SetTopic sets the "topic" field.
func (u *SyncTaskUpsert) SetTopic(v string) *SyncTaskUpsert {
	u.Set(synctask.FieldTopic, v)
	return u
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateTopic() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldTopic)
	return u
}

// SetDescription sets the "description" field.
func (u *SyncTaskUpsert) SetDescription(v string) *SyncTaskUpsert {
	u.Set(synctask.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateDescription() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *SyncTaskUpsert) ClearDescription() *SyncTaskUpsert {
	u.SetNull(synctask.FieldDescription)
	return u
}

// SetSyncState sets the "sync_state" field.
func (u *SyncTaskUpsert) SetSyncState(v string) *SyncTaskUpsert {
	u.Set(synctask.FieldSyncState, v)
	return u
}

// UpdateSyncState sets the "sync_state" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateSyncState() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldSyncState)
	return u
}

// ClearSyncState clears the value of the "sync_state" field.
func (u *SyncTaskUpsert) ClearSyncState() *SyncTaskUpsert {
	u.SetNull(synctask.FieldSyncState)
	return u
}

// SetRemark sets the "remark" field.
func (u *SyncTaskUpsert) SetRemark(v string) *SyncTaskUpsert {
	u.Set(synctask.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SyncTaskUpsert) UpdateRemark() *SyncTaskUpsert {
	u.SetExcluded(synctask.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *SyncTaskUpsert) ClearRemark() *SyncTaskUpsert {
	u.SetNull(synctask.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SyncTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(synctask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SyncTaskUpsertOne) UpdateNewValues() *SyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(synctask.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SyncTask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SyncTaskUpsertOne) Ignore() *SyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SyncTaskUpsertOne) DoNothing() *SyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SyncTaskCreate.OnConflict
// documentation for more info.
func (u *SyncTaskUpsertOne) Update(set func(*SyncTaskUpsert)) *SyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SyncTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SyncTaskUpsertOne) SetCreatedAt(v uint32) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SyncTaskUpsertOne) AddCreatedAt(v uint32) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateCreatedAt() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SyncTaskUpsertOne) SetUpdatedAt(v uint32) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SyncTaskUpsertOne) AddUpdatedAt(v uint32) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateUpdatedAt() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SyncTaskUpsertOne) SetDeletedAt(v uint32) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SyncTaskUpsertOne) AddDeletedAt(v uint32) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateDeletedAt() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SyncTaskUpsertOne) SetEntID(v uuid.UUID) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateEntID() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *SyncTaskUpsertOne) SetChainType(v string) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateChainType() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateChainType()
	})
}

// ClearChainType clears the value of the "chain_type" field.
func (u *SyncTaskUpsertOne) ClearChainType() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *SyncTaskUpsertOne) SetChainID(v string) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateChainID() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateChainID()
	})
}

// SetStart sets the "start" field.
func (u *SyncTaskUpsertOne) SetStart(v uint64) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *SyncTaskUpsertOne) AddStart(v uint64) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateStart() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *SyncTaskUpsertOne) SetEnd(v uint64) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *SyncTaskUpsertOne) AddEnd(v uint64) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateEnd() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateEnd()
	})
}

// SetCurrent sets the "current" field.
func (u *SyncTaskUpsertOne) SetCurrent(v uint64) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *SyncTaskUpsertOne) AddCurrent(v uint64) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateCurrent() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateCurrent()
	})
}

// SetTopic sets the "topic" field.
func (u *SyncTaskUpsertOne) SetTopic(v string) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateTopic() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateTopic()
	})
}

// SetDescription sets the "description" field.
func (u *SyncTaskUpsertOne) SetDescription(v string) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateDescription() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SyncTaskUpsertOne) ClearDescription() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearDescription()
	})
}

// SetSyncState sets the "sync_state" field.
func (u *SyncTaskUpsertOne) SetSyncState(v string) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetSyncState(v)
	})
}

// UpdateSyncState sets the "sync_state" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateSyncState() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateSyncState()
	})
}

// ClearSyncState clears the value of the "sync_state" field.
func (u *SyncTaskUpsertOne) ClearSyncState() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearSyncState()
	})
}

// SetRemark sets the "remark" field.
func (u *SyncTaskUpsertOne) SetRemark(v string) *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SyncTaskUpsertOne) UpdateRemark() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SyncTaskUpsertOne) ClearRemark() *SyncTaskUpsertOne {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *SyncTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SyncTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SyncTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SyncTaskUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SyncTaskUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SyncTaskCreateBulk is the builder for creating many SyncTask entities in bulk.
type SyncTaskCreateBulk struct {
	config
	builders []*SyncTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the SyncTask entities in the database.
func (stcb *SyncTaskCreateBulk) Save(ctx context.Context) ([]*SyncTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SyncTask, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SyncTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SyncTaskCreateBulk) SaveX(ctx context.Context) []*SyncTask {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SyncTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SyncTaskCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SyncTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SyncTaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (stcb *SyncTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *SyncTaskUpsertBulk {
	stcb.conflict = opts
	return &SyncTaskUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SyncTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SyncTaskCreateBulk) OnConflictColumns(columns ...string) *SyncTaskUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SyncTaskUpsertBulk{
		create: stcb,
	}
}

// SyncTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of SyncTask nodes.
type SyncTaskUpsertBulk struct {
	create *SyncTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SyncTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(synctask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SyncTaskUpsertBulk) UpdateNewValues() *SyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(synctask.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SyncTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SyncTaskUpsertBulk) Ignore() *SyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SyncTaskUpsertBulk) DoNothing() *SyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SyncTaskCreateBulk.OnConflict
// documentation for more info.
func (u *SyncTaskUpsertBulk) Update(set func(*SyncTaskUpsert)) *SyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SyncTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SyncTaskUpsertBulk) SetCreatedAt(v uint32) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *SyncTaskUpsertBulk) AddCreatedAt(v uint32) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateCreatedAt() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SyncTaskUpsertBulk) SetUpdatedAt(v uint32) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SyncTaskUpsertBulk) AddUpdatedAt(v uint32) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateUpdatedAt() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SyncTaskUpsertBulk) SetDeletedAt(v uint32) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SyncTaskUpsertBulk) AddDeletedAt(v uint32) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateDeletedAt() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *SyncTaskUpsertBulk) SetEntID(v uuid.UUID) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateEntID() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *SyncTaskUpsertBulk) SetChainType(v string) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateChainType() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateChainType()
	})
}

// ClearChainType clears the value of the "chain_type" field.
func (u *SyncTaskUpsertBulk) ClearChainType() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *SyncTaskUpsertBulk) SetChainID(v string) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateChainID() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateChainID()
	})
}

// SetStart sets the "start" field.
func (u *SyncTaskUpsertBulk) SetStart(v uint64) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *SyncTaskUpsertBulk) AddStart(v uint64) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateStart() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *SyncTaskUpsertBulk) SetEnd(v uint64) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *SyncTaskUpsertBulk) AddEnd(v uint64) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateEnd() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateEnd()
	})
}

// SetCurrent sets the "current" field.
func (u *SyncTaskUpsertBulk) SetCurrent(v uint64) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *SyncTaskUpsertBulk) AddCurrent(v uint64) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateCurrent() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateCurrent()
	})
}

// SetTopic sets the "topic" field.
func (u *SyncTaskUpsertBulk) SetTopic(v string) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetTopic(v)
	})
}

// UpdateTopic sets the "topic" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateTopic() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateTopic()
	})
}

// SetDescription sets the "description" field.
func (u *SyncTaskUpsertBulk) SetDescription(v string) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateDescription() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *SyncTaskUpsertBulk) ClearDescription() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearDescription()
	})
}

// SetSyncState sets the "sync_state" field.
func (u *SyncTaskUpsertBulk) SetSyncState(v string) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetSyncState(v)
	})
}

// UpdateSyncState sets the "sync_state" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateSyncState() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateSyncState()
	})
}

// ClearSyncState clears the value of the "sync_state" field.
func (u *SyncTaskUpsertBulk) ClearSyncState() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearSyncState()
	})
}

// SetRemark sets the "remark" field.
func (u *SyncTaskUpsertBulk) SetRemark(v string) *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SyncTaskUpsertBulk) UpdateRemark() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SyncTaskUpsertBulk) ClearRemark() *SyncTaskUpsertBulk {
	return u.Update(func(s *SyncTaskUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *SyncTaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SyncTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SyncTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SyncTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
