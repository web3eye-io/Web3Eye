// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/contract"
)

// ContractCreate is the builder for creating a Contract entity.
type ContractCreate struct {
	config
	mutation *ContractMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContractCreate) SetCreatedAt(u uint32) *ContractCreate {
	cc.mutation.SetCreatedAt(u)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableCreatedAt(u *uint32) *ContractCreate {
	if u != nil {
		cc.SetCreatedAt(*u)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContractCreate) SetUpdatedAt(u uint32) *ContractCreate {
	cc.mutation.SetUpdatedAt(u)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableUpdatedAt(u *uint32) *ContractCreate {
	if u != nil {
		cc.SetUpdatedAt(*u)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *ContractCreate) SetDeletedAt(u uint32) *ContractCreate {
	cc.mutation.SetDeletedAt(u)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableDeletedAt(u *uint32) *ContractCreate {
	if u != nil {
		cc.SetDeletedAt(*u)
	}
	return cc
}

// SetEntID sets the "ent_id" field.
func (cc *ContractCreate) SetEntID(u uuid.UUID) *ContractCreate {
	cc.mutation.SetEntID(u)
	return cc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cc *ContractCreate) SetNillableEntID(u *uuid.UUID) *ContractCreate {
	if u != nil {
		cc.SetEntID(*u)
	}
	return cc
}

// SetChainType sets the "chain_type" field.
func (cc *ContractCreate) SetChainType(s string) *ContractCreate {
	cc.mutation.SetChainType(s)
	return cc
}

// SetChainID sets the "chain_id" field.
func (cc *ContractCreate) SetChainID(s string) *ContractCreate {
	cc.mutation.SetChainID(s)
	return cc
}

// SetAddress sets the "address" field.
func (cc *ContractCreate) SetAddress(s string) *ContractCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetName sets the "name" field.
func (cc *ContractCreate) SetName(s string) *ContractCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetSymbol sets the "symbol" field.
func (cc *ContractCreate) SetSymbol(s string) *ContractCreate {
	cc.mutation.SetSymbol(s)
	return cc
}

// SetDecimals sets the "decimals" field.
func (cc *ContractCreate) SetDecimals(u uint32) *ContractCreate {
	cc.mutation.SetDecimals(u)
	return cc
}

// SetNillableDecimals sets the "decimals" field if the given value is not nil.
func (cc *ContractCreate) SetNillableDecimals(u *uint32) *ContractCreate {
	if u != nil {
		cc.SetDecimals(*u)
	}
	return cc
}

// SetCreator sets the "creator" field.
func (cc *ContractCreate) SetCreator(s string) *ContractCreate {
	cc.mutation.SetCreator(s)
	return cc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (cc *ContractCreate) SetNillableCreator(s *string) *ContractCreate {
	if s != nil {
		cc.SetCreator(*s)
	}
	return cc
}

// SetBlockNum sets the "block_num" field.
func (cc *ContractCreate) SetBlockNum(u uint64) *ContractCreate {
	cc.mutation.SetBlockNum(u)
	return cc
}

// SetNillableBlockNum sets the "block_num" field if the given value is not nil.
func (cc *ContractCreate) SetNillableBlockNum(u *uint64) *ContractCreate {
	if u != nil {
		cc.SetBlockNum(*u)
	}
	return cc
}

// SetTxHash sets the "tx_hash" field.
func (cc *ContractCreate) SetTxHash(s string) *ContractCreate {
	cc.mutation.SetTxHash(s)
	return cc
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (cc *ContractCreate) SetNillableTxHash(s *string) *ContractCreate {
	if s != nil {
		cc.SetTxHash(*s)
	}
	return cc
}

// SetTxTime sets the "tx_time" field.
func (cc *ContractCreate) SetTxTime(u uint32) *ContractCreate {
	cc.mutation.SetTxTime(u)
	return cc
}

// SetNillableTxTime sets the "tx_time" field if the given value is not nil.
func (cc *ContractCreate) SetNillableTxTime(u *uint32) *ContractCreate {
	if u != nil {
		cc.SetTxTime(*u)
	}
	return cc
}

// SetProfileURL sets the "profile_url" field.
func (cc *ContractCreate) SetProfileURL(s string) *ContractCreate {
	cc.mutation.SetProfileURL(s)
	return cc
}

// SetNillableProfileURL sets the "profile_url" field if the given value is not nil.
func (cc *ContractCreate) SetNillableProfileURL(s *string) *ContractCreate {
	if s != nil {
		cc.SetProfileURL(*s)
	}
	return cc
}

// SetBaseURL sets the "base_url" field.
func (cc *ContractCreate) SetBaseURL(s string) *ContractCreate {
	cc.mutation.SetBaseURL(s)
	return cc
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (cc *ContractCreate) SetNillableBaseURL(s *string) *ContractCreate {
	if s != nil {
		cc.SetBaseURL(*s)
	}
	return cc
}

// SetBannerURL sets the "banner_url" field.
func (cc *ContractCreate) SetBannerURL(s string) *ContractCreate {
	cc.mutation.SetBannerURL(s)
	return cc
}

// SetNillableBannerURL sets the "banner_url" field if the given value is not nil.
func (cc *ContractCreate) SetNillableBannerURL(s *string) *ContractCreate {
	if s != nil {
		cc.SetBannerURL(*s)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *ContractCreate) SetDescription(s string) *ContractCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ContractCreate) SetNillableDescription(s *string) *ContractCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetRemark sets the "remark" field.
func (cc *ContractCreate) SetRemark(s string) *ContractCreate {
	cc.mutation.SetRemark(s)
	return cc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cc *ContractCreate) SetNillableRemark(s *string) *ContractCreate {
	if s != nil {
		cc.SetRemark(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContractCreate) SetID(u uint32) *ContractCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the ContractMutation object of the builder.
func (cc *ContractCreate) Mutation() *ContractMutation {
	return cc.mutation
}

// Save creates the Contract in the database.
func (cc *ContractCreate) Save(ctx context.Context) (*Contract, error) {
	var (
		err  error
		node *Contract
	)
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Contract)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ContractMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContractCreate) SaveX(ctx context.Context) *Contract {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContractCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContractCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContractCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if contract.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized contract.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := contract.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if contract.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized contract.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := contract.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		if contract.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized contract.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := contract.DefaultDeletedAt()
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.EntID(); !ok {
		if contract.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized contract.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := contract.DefaultEntID()
		cc.mutation.SetEntID(v)
	}
	if _, ok := cc.mutation.Decimals(); !ok {
		v := contract.DefaultDecimals
		cc.mutation.SetDecimals(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContractCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Contract.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Contract.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Contract.deleted_at"`)}
	}
	if _, ok := cc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Contract.ent_id"`)}
	}
	if _, ok := cc.mutation.ChainType(); !ok {
		return &ValidationError{Name: "chain_type", err: errors.New(`ent: missing required field "Contract.chain_type"`)}
	}
	if _, ok := cc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Contract.chain_id"`)}
	}
	if _, ok := cc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Contract.address"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Contract.name"`)}
	}
	if _, ok := cc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Contract.symbol"`)}
	}
	if _, ok := cc.mutation.Decimals(); !ok {
		return &ValidationError{Name: "decimals", err: errors.New(`ent: missing required field "Contract.decimals"`)}
	}
	return nil
}

func (cc *ContractCreate) sqlSave(ctx context.Context) (*Contract, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (cc *ContractCreate) createSpec() (*Contract, *sqlgraph.CreateSpec) {
	var (
		_node = &Contract{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contract.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: contract.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contract.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contract.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contract.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: contract.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := cc.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := cc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := cc.mutation.Decimals(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contract.FieldDecimals,
		})
		_node.Decimals = value
	}
	if value, ok := cc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := cc.mutation.BlockNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: contract.FieldBlockNum,
		})
		_node.BlockNum = value
	}
	if value, ok := cc.mutation.TxHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldTxHash,
		})
		_node.TxHash = value
	}
	if value, ok := cc.mutation.TxTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: contract.FieldTxTime,
		})
		_node.TxTime = value
	}
	if value, ok := cc.mutation.ProfileURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldProfileURL,
		})
		_node.ProfileURL = value
	}
	if value, ok := cc.mutation.BaseURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldBaseURL,
		})
		_node.BaseURL = value
	}
	if value, ok := cc.mutation.BannerURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldBannerURL,
		})
		_node.BannerURL = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := cc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contract.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ContractCreate) OnConflict(opts ...sql.ConflictOption) *ContractUpsertOne {
	cc.conflict = opts
	return &ContractUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ContractCreate) OnConflictColumns(columns ...string) *ContractUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContractUpsertOne{
		create: cc,
	}
}

type (
	// ContractUpsertOne is the builder for "upsert"-ing
	//  one Contract node.
	ContractUpsertOne struct {
		create *ContractCreate
	}

	// ContractUpsert is the "OnConflict" setter.
	ContractUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ContractUpsert) SetCreatedAt(v uint32) *ContractUpsert {
	u.Set(contract.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContractUpsert) UpdateCreatedAt() *ContractUpsert {
	u.SetExcluded(contract.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ContractUpsert) AddCreatedAt(v uint32) *ContractUpsert {
	u.Add(contract.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractUpsert) SetUpdatedAt(v uint32) *ContractUpsert {
	u.Set(contract.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractUpsert) UpdateUpdatedAt() *ContractUpsert {
	u.SetExcluded(contract.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ContractUpsert) AddUpdatedAt(v uint32) *ContractUpsert {
	u.Add(contract.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContractUpsert) SetDeletedAt(v uint32) *ContractUpsert {
	u.Set(contract.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContractUpsert) UpdateDeletedAt() *ContractUpsert {
	u.SetExcluded(contract.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ContractUpsert) AddDeletedAt(v uint32) *ContractUpsert {
	u.Add(contract.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *ContractUpsert) SetEntID(v uuid.UUID) *ContractUpsert {
	u.Set(contract.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ContractUpsert) UpdateEntID() *ContractUpsert {
	u.SetExcluded(contract.FieldEntID)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *ContractUpsert) SetChainType(v string) *ContractUpsert {
	u.Set(contract.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *ContractUpsert) UpdateChainType() *ContractUpsert {
	u.SetExcluded(contract.FieldChainType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *ContractUpsert) SetChainID(v string) *ContractUpsert {
	u.Set(contract.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ContractUpsert) UpdateChainID() *ContractUpsert {
	u.SetExcluded(contract.FieldChainID)
	return u
}

// SetAddress sets the "address" field.
func (u *ContractUpsert) SetAddress(v string) *ContractUpsert {
	u.Set(contract.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ContractUpsert) UpdateAddress() *ContractUpsert {
	u.SetExcluded(contract.FieldAddress)
	return u
}

// SetName sets the "name" field.
func (u *ContractUpsert) SetName(v string) *ContractUpsert {
	u.Set(contract.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContractUpsert) UpdateName() *ContractUpsert {
	u.SetExcluded(contract.FieldName)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *ContractUpsert) SetSymbol(v string) *ContractUpsert {
	u.Set(contract.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *ContractUpsert) UpdateSymbol() *ContractUpsert {
	u.SetExcluded(contract.FieldSymbol)
	return u
}

// SetDecimals sets the "decimals" field.
func (u *ContractUpsert) SetDecimals(v uint32) *ContractUpsert {
	u.Set(contract.FieldDecimals, v)
	return u
}

// UpdateDecimals sets the "decimals" field to the value that was provided on create.
func (u *ContractUpsert) UpdateDecimals() *ContractUpsert {
	u.SetExcluded(contract.FieldDecimals)
	return u
}

// AddDecimals adds v to the "decimals" field.
func (u *ContractUpsert) AddDecimals(v uint32) *ContractUpsert {
	u.Add(contract.FieldDecimals, v)
	return u
}

// SetCreator sets the "creator" field.
func (u *ContractUpsert) SetCreator(v string) *ContractUpsert {
	u.Set(contract.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ContractUpsert) UpdateCreator() *ContractUpsert {
	u.SetExcluded(contract.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *ContractUpsert) ClearCreator() *ContractUpsert {
	u.SetNull(contract.FieldCreator)
	return u
}

// SetBlockNum sets the "block_num" field.
func (u *ContractUpsert) SetBlockNum(v uint64) *ContractUpsert {
	u.Set(contract.FieldBlockNum, v)
	return u
}

// UpdateBlockNum sets the "block_num" field to the value that was provided on create.
func (u *ContractUpsert) UpdateBlockNum() *ContractUpsert {
	u.SetExcluded(contract.FieldBlockNum)
	return u
}

// AddBlockNum adds v to the "block_num" field.
func (u *ContractUpsert) AddBlockNum(v uint64) *ContractUpsert {
	u.Add(contract.FieldBlockNum, v)
	return u
}

// ClearBlockNum clears the value of the "block_num" field.
func (u *ContractUpsert) ClearBlockNum() *ContractUpsert {
	u.SetNull(contract.FieldBlockNum)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *ContractUpsert) SetTxHash(v string) *ContractUpsert {
	u.Set(contract.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *ContractUpsert) UpdateTxHash() *ContractUpsert {
	u.SetExcluded(contract.FieldTxHash)
	return u
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *ContractUpsert) ClearTxHash() *ContractUpsert {
	u.SetNull(contract.FieldTxHash)
	return u
}

// SetTxTime sets the "tx_time" field.
func (u *ContractUpsert) SetTxTime(v uint32) *ContractUpsert {
	u.Set(contract.FieldTxTime, v)
	return u
}

// UpdateTxTime sets the "tx_time" field to the value that was provided on create.
func (u *ContractUpsert) UpdateTxTime() *ContractUpsert {
	u.SetExcluded(contract.FieldTxTime)
	return u
}

// AddTxTime adds v to the "tx_time" field.
func (u *ContractUpsert) AddTxTime(v uint32) *ContractUpsert {
	u.Add(contract.FieldTxTime, v)
	return u
}

// ClearTxTime clears the value of the "tx_time" field.
func (u *ContractUpsert) ClearTxTime() *ContractUpsert {
	u.SetNull(contract.FieldTxTime)
	return u
}

// SetProfileURL sets the "profile_url" field.
func (u *ContractUpsert) SetProfileURL(v string) *ContractUpsert {
	u.Set(contract.FieldProfileURL, v)
	return u
}

// UpdateProfileURL sets the "profile_url" field to the value that was provided on create.
func (u *ContractUpsert) UpdateProfileURL() *ContractUpsert {
	u.SetExcluded(contract.FieldProfileURL)
	return u
}

// ClearProfileURL clears the value of the "profile_url" field.
func (u *ContractUpsert) ClearProfileURL() *ContractUpsert {
	u.SetNull(contract.FieldProfileURL)
	return u
}

// SetBaseURL sets the "base_url" field.
func (u *ContractUpsert) SetBaseURL(v string) *ContractUpsert {
	u.Set(contract.FieldBaseURL, v)
	return u
}

// UpdateBaseURL sets the "base_url" field to the value that was provided on create.
func (u *ContractUpsert) UpdateBaseURL() *ContractUpsert {
	u.SetExcluded(contract.FieldBaseURL)
	return u
}

// ClearBaseURL clears the value of the "base_url" field.
func (u *ContractUpsert) ClearBaseURL() *ContractUpsert {
	u.SetNull(contract.FieldBaseURL)
	return u
}

// SetBannerURL sets the "banner_url" field.
func (u *ContractUpsert) SetBannerURL(v string) *ContractUpsert {
	u.Set(contract.FieldBannerURL, v)
	return u
}

// UpdateBannerURL sets the "banner_url" field to the value that was provided on create.
func (u *ContractUpsert) UpdateBannerURL() *ContractUpsert {
	u.SetExcluded(contract.FieldBannerURL)
	return u
}

// ClearBannerURL clears the value of the "banner_url" field.
func (u *ContractUpsert) ClearBannerURL() *ContractUpsert {
	u.SetNull(contract.FieldBannerURL)
	return u
}

// SetDescription sets the "description" field.
func (u *ContractUpsert) SetDescription(v string) *ContractUpsert {
	u.Set(contract.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ContractUpsert) UpdateDescription() *ContractUpsert {
	u.SetExcluded(contract.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ContractUpsert) ClearDescription() *ContractUpsert {
	u.SetNull(contract.FieldDescription)
	return u
}

// SetRemark sets the "remark" field.
func (u *ContractUpsert) SetRemark(v string) *ContractUpsert {
	u.Set(contract.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ContractUpsert) UpdateRemark() *ContractUpsert {
	u.SetExcluded(contract.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ContractUpsert) ClearRemark() *ContractUpsert {
	u.SetNull(contract.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contract.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContractUpsertOne) UpdateNewValues() *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(contract.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contract.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContractUpsertOne) Ignore() *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContractUpsertOne) DoNothing() *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContractCreate.OnConflict
// documentation for more info.
func (u *ContractUpsertOne) Update(set func(*ContractUpsert)) *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ContractUpsertOne) SetCreatedAt(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ContractUpsertOne) AddCreatedAt(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateCreatedAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractUpsertOne) SetUpdatedAt(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ContractUpsertOne) AddUpdatedAt(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateUpdatedAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContractUpsertOne) SetDeletedAt(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ContractUpsertOne) AddDeletedAt(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateDeletedAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *ContractUpsertOne) SetEntID(v uuid.UUID) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateEntID() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *ContractUpsertOne) SetChainType(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateChainType() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *ContractUpsertOne) SetChainID(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateChainID() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateChainID()
	})
}

// SetAddress sets the "address" field.
func (u *ContractUpsertOne) SetAddress(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateAddress() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateAddress()
	})
}

// SetName sets the "name" field.
func (u *ContractUpsertOne) SetName(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateName() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateName()
	})
}

// SetSymbol sets the "symbol" field.
func (u *ContractUpsertOne) SetSymbol(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateSymbol() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateSymbol()
	})
}

// SetDecimals sets the "decimals" field.
func (u *ContractUpsertOne) SetDecimals(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetDecimals(v)
	})
}

// AddDecimals adds v to the "decimals" field.
func (u *ContractUpsertOne) AddDecimals(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddDecimals(v)
	})
}

// UpdateDecimals sets the "decimals" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateDecimals() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateDecimals()
	})
}

// SetCreator sets the "creator" field.
func (u *ContractUpsertOne) SetCreator(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateCreator() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *ContractUpsertOne) ClearCreator() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearCreator()
	})
}

// SetBlockNum sets the "block_num" field.
func (u *ContractUpsertOne) SetBlockNum(v uint64) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetBlockNum(v)
	})
}

// AddBlockNum adds v to the "block_num" field.
func (u *ContractUpsertOne) AddBlockNum(v uint64) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddBlockNum(v)
	})
}

// UpdateBlockNum sets the "block_num" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateBlockNum() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateBlockNum()
	})
}

// ClearBlockNum clears the value of the "block_num" field.
func (u *ContractUpsertOne) ClearBlockNum() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearBlockNum()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *ContractUpsertOne) SetTxHash(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateTxHash() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *ContractUpsertOne) ClearTxHash() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearTxHash()
	})
}

// SetTxTime sets the "tx_time" field.
func (u *ContractUpsertOne) SetTxTime(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetTxTime(v)
	})
}

// AddTxTime adds v to the "tx_time" field.
func (u *ContractUpsertOne) AddTxTime(v uint32) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddTxTime(v)
	})
}

// UpdateTxTime sets the "tx_time" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateTxTime() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateTxTime()
	})
}

// ClearTxTime clears the value of the "tx_time" field.
func (u *ContractUpsertOne) ClearTxTime() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearTxTime()
	})
}

// SetProfileURL sets the "profile_url" field.
func (u *ContractUpsertOne) SetProfileURL(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetProfileURL(v)
	})
}

// UpdateProfileURL sets the "profile_url" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateProfileURL() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateProfileURL()
	})
}

// ClearProfileURL clears the value of the "profile_url" field.
func (u *ContractUpsertOne) ClearProfileURL() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearProfileURL()
	})
}

// SetBaseURL sets the "base_url" field.
func (u *ContractUpsertOne) SetBaseURL(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetBaseURL(v)
	})
}

// UpdateBaseURL sets the "base_url" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateBaseURL() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateBaseURL()
	})
}

// ClearBaseURL clears the value of the "base_url" field.
func (u *ContractUpsertOne) ClearBaseURL() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearBaseURL()
	})
}

// SetBannerURL sets the "banner_url" field.
func (u *ContractUpsertOne) SetBannerURL(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetBannerURL(v)
	})
}

// UpdateBannerURL sets the "banner_url" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateBannerURL() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateBannerURL()
	})
}

// ClearBannerURL clears the value of the "banner_url" field.
func (u *ContractUpsertOne) ClearBannerURL() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearBannerURL()
	})
}

// SetDescription sets the "description" field.
func (u *ContractUpsertOne) SetDescription(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateDescription() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ContractUpsertOne) ClearDescription() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearDescription()
	})
}

// SetRemark sets the "remark" field.
func (u *ContractUpsertOne) SetRemark(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateRemark() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ContractUpsertOne) ClearRemark() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *ContractUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContractCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContractUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContractUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContractUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContractCreateBulk is the builder for creating many Contract entities in bulk.
type ContractCreateBulk struct {
	config
	builders []*ContractCreate
	conflict []sql.ConflictOption
}

// Save creates the Contract entities in the database.
func (ccb *ContractCreateBulk) Save(ctx context.Context) ([]*Contract, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contract, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContractCreateBulk) SaveX(ctx context.Context) []*Contract {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContractCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContractCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contract.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ContractCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContractUpsertBulk {
	ccb.conflict = opts
	return &ContractUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ContractCreateBulk) OnConflictColumns(columns ...string) *ContractUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContractUpsertBulk{
		create: ccb,
	}
}

// ContractUpsertBulk is the builder for "upsert"-ing
// a bulk of Contract nodes.
type ContractUpsertBulk struct {
	create *ContractCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(contract.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ContractUpsertBulk) UpdateNewValues() *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(contract.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContractUpsertBulk) Ignore() *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContractUpsertBulk) DoNothing() *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContractCreateBulk.OnConflict
// documentation for more info.
func (u *ContractUpsertBulk) Update(set func(*ContractUpsert)) *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ContractUpsertBulk) SetCreatedAt(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ContractUpsertBulk) AddCreatedAt(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateCreatedAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractUpsertBulk) SetUpdatedAt(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ContractUpsertBulk) AddUpdatedAt(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateUpdatedAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContractUpsertBulk) SetDeletedAt(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ContractUpsertBulk) AddDeletedAt(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateDeletedAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *ContractUpsertBulk) SetEntID(v uuid.UUID) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateEntID() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *ContractUpsertBulk) SetChainType(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateChainType() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *ContractUpsertBulk) SetChainID(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateChainID() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateChainID()
	})
}

// SetAddress sets the "address" field.
func (u *ContractUpsertBulk) SetAddress(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateAddress() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateAddress()
	})
}

// SetName sets the "name" field.
func (u *ContractUpsertBulk) SetName(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateName() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateName()
	})
}

// SetSymbol sets the "symbol" field.
func (u *ContractUpsertBulk) SetSymbol(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateSymbol() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateSymbol()
	})
}

// SetDecimals sets the "decimals" field.
func (u *ContractUpsertBulk) SetDecimals(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetDecimals(v)
	})
}

// AddDecimals adds v to the "decimals" field.
func (u *ContractUpsertBulk) AddDecimals(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddDecimals(v)
	})
}

// UpdateDecimals sets the "decimals" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateDecimals() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateDecimals()
	})
}

// SetCreator sets the "creator" field.
func (u *ContractUpsertBulk) SetCreator(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateCreator() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *ContractUpsertBulk) ClearCreator() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearCreator()
	})
}

// SetBlockNum sets the "block_num" field.
func (u *ContractUpsertBulk) SetBlockNum(v uint64) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetBlockNum(v)
	})
}

// AddBlockNum adds v to the "block_num" field.
func (u *ContractUpsertBulk) AddBlockNum(v uint64) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddBlockNum(v)
	})
}

// UpdateBlockNum sets the "block_num" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateBlockNum() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateBlockNum()
	})
}

// ClearBlockNum clears the value of the "block_num" field.
func (u *ContractUpsertBulk) ClearBlockNum() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearBlockNum()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *ContractUpsertBulk) SetTxHash(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateTxHash() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *ContractUpsertBulk) ClearTxHash() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearTxHash()
	})
}

// SetTxTime sets the "tx_time" field.
func (u *ContractUpsertBulk) SetTxTime(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetTxTime(v)
	})
}

// AddTxTime adds v to the "tx_time" field.
func (u *ContractUpsertBulk) AddTxTime(v uint32) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddTxTime(v)
	})
}

// UpdateTxTime sets the "tx_time" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateTxTime() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateTxTime()
	})
}

// ClearTxTime clears the value of the "tx_time" field.
func (u *ContractUpsertBulk) ClearTxTime() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearTxTime()
	})
}

// SetProfileURL sets the "profile_url" field.
func (u *ContractUpsertBulk) SetProfileURL(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetProfileURL(v)
	})
}

// UpdateProfileURL sets the "profile_url" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateProfileURL() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateProfileURL()
	})
}

// ClearProfileURL clears the value of the "profile_url" field.
func (u *ContractUpsertBulk) ClearProfileURL() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearProfileURL()
	})
}

// SetBaseURL sets the "base_url" field.
func (u *ContractUpsertBulk) SetBaseURL(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetBaseURL(v)
	})
}

// UpdateBaseURL sets the "base_url" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateBaseURL() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateBaseURL()
	})
}

// ClearBaseURL clears the value of the "base_url" field.
func (u *ContractUpsertBulk) ClearBaseURL() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearBaseURL()
	})
}

// SetBannerURL sets the "banner_url" field.
func (u *ContractUpsertBulk) SetBannerURL(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetBannerURL(v)
	})
}

// UpdateBannerURL sets the "banner_url" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateBannerURL() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateBannerURL()
	})
}

// ClearBannerURL clears the value of the "banner_url" field.
func (u *ContractUpsertBulk) ClearBannerURL() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearBannerURL()
	})
}

// SetDescription sets the "description" field.
func (u *ContractUpsertBulk) SetDescription(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateDescription() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ContractUpsertBulk) ClearDescription() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearDescription()
	})
}

// SetRemark sets the "remark" field.
func (u *ContractUpsertBulk) SetRemark(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateRemark() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ContractUpsertBulk) ClearRemark() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *ContractUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContractCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContractCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContractUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
