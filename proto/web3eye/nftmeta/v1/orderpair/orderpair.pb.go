// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: web3eye/nftmeta/v1/orderpair/orderpair.proto

package orderpair

import (
	web3eye "github.com/web3eye-io/Web3Eye/proto/web3eye"
	_ "github.com/web3eye-io/Web3Eye/proto/web3eye/basetype/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderPairReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TxHash    *string `protobuf:"bytes,20,opt,name=TxHash,proto3,oneof" json:"TxHash,omitempty"`
	Recipient *string `protobuf:"bytes,30,opt,name=Recipient,proto3,oneof" json:"Recipient,omitempty"`
	TargetID  *string `protobuf:"bytes,40,opt,name=TargetID,proto3,oneof" json:"TargetID,omitempty"`
	OfferID   *string `protobuf:"bytes,50,opt,name=OfferID,proto3,oneof" json:"OfferID,omitempty"`
	Remark    *string `protobuf:"bytes,60,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *OrderPairReq) Reset() {
	*x = OrderPairReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPairReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPairReq) ProtoMessage() {}

func (x *OrderPairReq) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPairReq.ProtoReflect.Descriptor instead.
func (*OrderPairReq) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{0}
}

func (x *OrderPairReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *OrderPairReq) GetTxHash() string {
	if x != nil && x.TxHash != nil {
		return *x.TxHash
	}
	return ""
}

func (x *OrderPairReq) GetRecipient() string {
	if x != nil && x.Recipient != nil {
		return *x.Recipient
	}
	return ""
}

func (x *OrderPairReq) GetTargetID() string {
	if x != nil && x.TargetID != nil {
		return *x.TargetID
	}
	return ""
}

func (x *OrderPairReq) GetOfferID() string {
	if x != nil && x.OfferID != nil {
		return *x.OfferID
	}
	return ""
}

func (x *OrderPairReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type OrderPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TxHash    string `protobuf:"bytes,20,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Recipient string `protobuf:"bytes,30,opt,name=Recipient,proto3" json:"Recipient,omitempty"`
	TargetID  string `protobuf:"bytes,40,opt,name=TargetID,proto3" json:"TargetID,omitempty"`
	OfferID   string `protobuf:"bytes,50,opt,name=OfferID,proto3" json:"OfferID,omitempty"`
	Remark    string `protobuf:"bytes,60,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (x *OrderPair) Reset() {
	*x = OrderPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPair) ProtoMessage() {}

func (x *OrderPair) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPair.ProtoReflect.Descriptor instead.
func (*OrderPair) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{1}
}

func (x *OrderPair) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OrderPair) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *OrderPair) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *OrderPair) GetTargetID() string {
	if x != nil {
		return x.TargetID
	}
	return ""
}

func (x *OrderPair) GetOfferID() string {
	if x != nil {
		return x.OfferID
	}
	return ""
}

func (x *OrderPair) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *web3eye.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TxHash    *web3eye.StringVal      `protobuf:"bytes,20,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Recipient *web3eye.StringVal      `protobuf:"bytes,30,opt,name=Recipient,proto3" json:"Recipient,omitempty"`
	TargetID  *web3eye.StringVal      `protobuf:"bytes,40,opt,name=TargetID,proto3" json:"TargetID,omitempty"`
	OfferID   *web3eye.StringVal      `protobuf:"bytes,50,opt,name=OfferID,proto3" json:"OfferID,omitempty"`
	Remark    *web3eye.StringVal      `protobuf:"bytes,60,opt,name=Remark,proto3" json:"Remark,omitempty"`
	IDs       *web3eye.StringSliceVal `protobuf:"bytes,150,opt,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *web3eye.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetTxHash() *web3eye.StringVal {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Conds) GetRecipient() *web3eye.StringVal {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Conds) GetTargetID() *web3eye.StringVal {
	if x != nil {
		return x.TargetID
	}
	return nil
}

func (x *Conds) GetOfferID() *web3eye.StringVal {
	if x != nil {
		return x.OfferID
	}
	return nil
}

func (x *Conds) GetRemark() *web3eye.StringVal {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *Conds) GetIDs() *web3eye.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

type CreateOrderPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPairReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderPairRequest) Reset() {
	*x = CreateOrderPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPairRequest) ProtoMessage() {}

func (x *CreateOrderPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPairRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderPairRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderPairRequest) GetInfo() *OrderPairReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPair `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderPairResponse) Reset() {
	*x = CreateOrderPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPairResponse) ProtoMessage() {}

func (x *CreateOrderPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPairResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderPairResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrderPairResponse) GetInfo() *OrderPair {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderPairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderPairReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrderPairsRequest) Reset() {
	*x = CreateOrderPairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPairsRequest) ProtoMessage() {}

func (x *CreateOrderPairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPairsRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderPairsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrderPairsRequest) GetInfos() []*OrderPairReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateOrderPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderPair `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrderPairsResponse) Reset() {
	*x = CreateOrderPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPairsResponse) ProtoMessage() {}

func (x *CreateOrderPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPairsResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderPairsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrderPairsResponse) GetInfos() []*OrderPair {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetOrderPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetOrderPairRequest) Reset() {
	*x = GetOrderPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPairRequest) ProtoMessage() {}

func (x *GetOrderPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPairRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPairRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrderPairRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetOrderPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPair `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetOrderPairResponse) Reset() {
	*x = GetOrderPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPairResponse) ProtoMessage() {}

func (x *GetOrderPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPairResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPairResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{8}
}

func (x *GetOrderPairResponse) GetInfo() *OrderPair {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetOrderPairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetOrderPairsRequest) Reset() {
	*x = GetOrderPairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPairsRequest) ProtoMessage() {}

func (x *GetOrderPairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPairsRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPairsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{9}
}

func (x *GetOrderPairsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetOrderPairsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetOrderPairsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetOrderPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderPair `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetOrderPairsResponse) Reset() {
	*x = GetOrderPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPairsResponse) ProtoMessage() {}

func (x *GetOrderPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPairsResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPairsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrderPairsResponse) GetInfos() []*OrderPair {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetOrderPairsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetOrderPairOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetOrderPairOnlyRequest) Reset() {
	*x = GetOrderPairOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPairOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPairOnlyRequest) ProtoMessage() {}

func (x *GetOrderPairOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPairOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPairOnlyRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrderPairOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetOrderPairOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPair `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetOrderPairOnlyResponse) Reset() {
	*x = GetOrderPairOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPairOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPairOnlyResponse) ProtoMessage() {}

func (x *GetOrderPairOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPairOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPairOnlyResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrderPairOnlyResponse) GetInfo() *OrderPair {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateOrderPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPairReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderPairRequest) Reset() {
	*x = UpdateOrderPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderPairRequest) ProtoMessage() {}

func (x *UpdateOrderPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderPairRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderPairRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateOrderPairRequest) GetInfo() *OrderPairReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateOrderPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPair `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderPairResponse) Reset() {
	*x = UpdateOrderPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderPairResponse) ProtoMessage() {}

func (x *UpdateOrderPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderPairResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderPairResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateOrderPairResponse) GetInfo() *OrderPair {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistOrderPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistOrderPairRequest) Reset() {
	*x = ExistOrderPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPairRequest) ProtoMessage() {}

func (x *ExistOrderPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPairRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderPairRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{15}
}

func (x *ExistOrderPairRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistOrderPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistOrderPairResponse) Reset() {
	*x = ExistOrderPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPairResponse) ProtoMessage() {}

func (x *ExistOrderPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPairResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderPairResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{16}
}

func (x *ExistOrderPairResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type ExistOrderPairCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistOrderPairCondsRequest) Reset() {
	*x = ExistOrderPairCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPairCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPairCondsRequest) ProtoMessage() {}

func (x *ExistOrderPairCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPairCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderPairCondsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{17}
}

func (x *ExistOrderPairCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistOrderPairCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistOrderPairCondsResponse) Reset() {
	*x = ExistOrderPairCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPairCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPairCondsResponse) ProtoMessage() {}

func (x *ExistOrderPairCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPairCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderPairCondsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{18}
}

func (x *ExistOrderPairCondsResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type CountOrderPairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountOrderPairsRequest) Reset() {
	*x = CountOrderPairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrderPairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrderPairsRequest) ProtoMessage() {}

func (x *CountOrderPairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrderPairsRequest.ProtoReflect.Descriptor instead.
func (*CountOrderPairsRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{19}
}

func (x *CountOrderPairsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountOrderPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountOrderPairsResponse) Reset() {
	*x = CountOrderPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrderPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrderPairsResponse) ProtoMessage() {}

func (x *CountOrderPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrderPairsResponse.ProtoReflect.Descriptor instead.
func (*CountOrderPairsResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{20}
}

func (x *CountOrderPairsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteOrderPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteOrderPairRequest) Reset() {
	*x = DeleteOrderPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderPairRequest) ProtoMessage() {}

func (x *DeleteOrderPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderPairRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrderPairRequest) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteOrderPairRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteOrderPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPair `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteOrderPairResponse) Reset() {
	*x = DeleteOrderPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderPairResponse) ProtoMessage() {}

func (x *DeleteOrderPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderPairResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrderPairResponse) Descriptor() ([]byte, []int) {
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteOrderPairResponse) GetInfo() *OrderPair {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_web3eye_nftmeta_v1_orderpair_orderpair_proto protoreflect.FileDescriptor

var file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x70, 0x61, 0x69, 0x72, 0x1a, 0x15, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x77, 0x65,
	0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x77, 0x65, 0x62,
	0x33, 0x65, 0x79, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x02, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xbf, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x22, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65,
	0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x30, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x03, 0x49,
	0x44, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x33,
	0x65, 0x79, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x51,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70,
	0x61, 0x69, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x64,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x4f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70,
	0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2e,
	0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x4f,
	0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x33, 0x0a, 0x1b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x70, 0x61, 0x69, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xfd, 0x08, 0x0a, 0x07, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70,
	0x61, 0x69, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x29, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x2e, 0x6e,
	0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70,
	0x61, 0x69, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2a,
	0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2b, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x30, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2c, 0x2e, 0x6e, 0x66,
	0x74, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x66, 0x74, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65,
	0x2d, 0x69, 0x6f, 0x2f, 0x57, 0x65, 0x62, 0x33, 0x45, 0x79, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x77, 0x65, 0x62, 0x33, 0x65, 0x79, 0x65, 0x2f, 0x6e, 0x66, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x61, 0x69, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescOnce sync.Once
	file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescData = file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDesc
)

func file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescGZIP() []byte {
	file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescOnce.Do(func() {
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescData = protoimpl.X.CompressGZIP(file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescData)
	})
	return file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDescData
}

var file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_web3eye_nftmeta_v1_orderpair_orderpair_proto_goTypes = []interface{}{
	(*OrderPairReq)(nil),                // 0: nftmeta.v1.orderpair.OrderPairReq
	(*OrderPair)(nil),                   // 1: nftmeta.v1.orderpair.OrderPair
	(*Conds)(nil),                       // 2: nftmeta.v1.orderpair.Conds
	(*CreateOrderPairRequest)(nil),      // 3: nftmeta.v1.orderpair.CreateOrderPairRequest
	(*CreateOrderPairResponse)(nil),     // 4: nftmeta.v1.orderpair.CreateOrderPairResponse
	(*CreateOrderPairsRequest)(nil),     // 5: nftmeta.v1.orderpair.CreateOrderPairsRequest
	(*CreateOrderPairsResponse)(nil),    // 6: nftmeta.v1.orderpair.CreateOrderPairsResponse
	(*GetOrderPairRequest)(nil),         // 7: nftmeta.v1.orderpair.GetOrderPairRequest
	(*GetOrderPairResponse)(nil),        // 8: nftmeta.v1.orderpair.GetOrderPairResponse
	(*GetOrderPairsRequest)(nil),        // 9: nftmeta.v1.orderpair.GetOrderPairsRequest
	(*GetOrderPairsResponse)(nil),       // 10: nftmeta.v1.orderpair.GetOrderPairsResponse
	(*GetOrderPairOnlyRequest)(nil),     // 11: nftmeta.v1.orderpair.GetOrderPairOnlyRequest
	(*GetOrderPairOnlyResponse)(nil),    // 12: nftmeta.v1.orderpair.GetOrderPairOnlyResponse
	(*UpdateOrderPairRequest)(nil),      // 13: nftmeta.v1.orderpair.UpdateOrderPairRequest
	(*UpdateOrderPairResponse)(nil),     // 14: nftmeta.v1.orderpair.UpdateOrderPairResponse
	(*ExistOrderPairRequest)(nil),       // 15: nftmeta.v1.orderpair.ExistOrderPairRequest
	(*ExistOrderPairResponse)(nil),      // 16: nftmeta.v1.orderpair.ExistOrderPairResponse
	(*ExistOrderPairCondsRequest)(nil),  // 17: nftmeta.v1.orderpair.ExistOrderPairCondsRequest
	(*ExistOrderPairCondsResponse)(nil), // 18: nftmeta.v1.orderpair.ExistOrderPairCondsResponse
	(*CountOrderPairsRequest)(nil),      // 19: nftmeta.v1.orderpair.CountOrderPairsRequest
	(*CountOrderPairsResponse)(nil),     // 20: nftmeta.v1.orderpair.CountOrderPairsResponse
	(*DeleteOrderPairRequest)(nil),      // 21: nftmeta.v1.orderpair.DeleteOrderPairRequest
	(*DeleteOrderPairResponse)(nil),     // 22: nftmeta.v1.orderpair.DeleteOrderPairResponse
	(*web3eye.StringVal)(nil),           // 23: web3eye.StringVal
	(*web3eye.StringSliceVal)(nil),      // 24: web3eye.StringSliceVal
}
var file_web3eye_nftmeta_v1_orderpair_orderpair_proto_depIdxs = []int32{
	23, // 0: nftmeta.v1.orderpair.Conds.ID:type_name -> web3eye.StringVal
	23, // 1: nftmeta.v1.orderpair.Conds.TxHash:type_name -> web3eye.StringVal
	23, // 2: nftmeta.v1.orderpair.Conds.Recipient:type_name -> web3eye.StringVal
	23, // 3: nftmeta.v1.orderpair.Conds.TargetID:type_name -> web3eye.StringVal
	23, // 4: nftmeta.v1.orderpair.Conds.OfferID:type_name -> web3eye.StringVal
	23, // 5: nftmeta.v1.orderpair.Conds.Remark:type_name -> web3eye.StringVal
	24, // 6: nftmeta.v1.orderpair.Conds.IDs:type_name -> web3eye.StringSliceVal
	0,  // 7: nftmeta.v1.orderpair.CreateOrderPairRequest.Info:type_name -> nftmeta.v1.orderpair.OrderPairReq
	1,  // 8: nftmeta.v1.orderpair.CreateOrderPairResponse.Info:type_name -> nftmeta.v1.orderpair.OrderPair
	0,  // 9: nftmeta.v1.orderpair.CreateOrderPairsRequest.Infos:type_name -> nftmeta.v1.orderpair.OrderPairReq
	1,  // 10: nftmeta.v1.orderpair.CreateOrderPairsResponse.Infos:type_name -> nftmeta.v1.orderpair.OrderPair
	1,  // 11: nftmeta.v1.orderpair.GetOrderPairResponse.Info:type_name -> nftmeta.v1.orderpair.OrderPair
	2,  // 12: nftmeta.v1.orderpair.GetOrderPairsRequest.Conds:type_name -> nftmeta.v1.orderpair.Conds
	1,  // 13: nftmeta.v1.orderpair.GetOrderPairsResponse.Infos:type_name -> nftmeta.v1.orderpair.OrderPair
	2,  // 14: nftmeta.v1.orderpair.GetOrderPairOnlyRequest.Conds:type_name -> nftmeta.v1.orderpair.Conds
	1,  // 15: nftmeta.v1.orderpair.GetOrderPairOnlyResponse.Info:type_name -> nftmeta.v1.orderpair.OrderPair
	0,  // 16: nftmeta.v1.orderpair.UpdateOrderPairRequest.Info:type_name -> nftmeta.v1.orderpair.OrderPairReq
	1,  // 17: nftmeta.v1.orderpair.UpdateOrderPairResponse.Info:type_name -> nftmeta.v1.orderpair.OrderPair
	2,  // 18: nftmeta.v1.orderpair.ExistOrderPairCondsRequest.Conds:type_name -> nftmeta.v1.orderpair.Conds
	2,  // 19: nftmeta.v1.orderpair.CountOrderPairsRequest.Conds:type_name -> nftmeta.v1.orderpair.Conds
	1,  // 20: nftmeta.v1.orderpair.DeleteOrderPairResponse.Info:type_name -> nftmeta.v1.orderpair.OrderPair
	3,  // 21: nftmeta.v1.orderpair.Manager.CreateOrderPair:input_type -> nftmeta.v1.orderpair.CreateOrderPairRequest
	5,  // 22: nftmeta.v1.orderpair.Manager.CreateOrderPairs:input_type -> nftmeta.v1.orderpair.CreateOrderPairsRequest
	13, // 23: nftmeta.v1.orderpair.Manager.UpdateOrderPair:input_type -> nftmeta.v1.orderpair.UpdateOrderPairRequest
	7,  // 24: nftmeta.v1.orderpair.Manager.GetOrderPair:input_type -> nftmeta.v1.orderpair.GetOrderPairRequest
	11, // 25: nftmeta.v1.orderpair.Manager.GetOrderPairOnly:input_type -> nftmeta.v1.orderpair.GetOrderPairOnlyRequest
	9,  // 26: nftmeta.v1.orderpair.Manager.GetOrderPairs:input_type -> nftmeta.v1.orderpair.GetOrderPairsRequest
	15, // 27: nftmeta.v1.orderpair.Manager.ExistOrderPair:input_type -> nftmeta.v1.orderpair.ExistOrderPairRequest
	17, // 28: nftmeta.v1.orderpair.Manager.ExistOrderPairConds:input_type -> nftmeta.v1.orderpair.ExistOrderPairCondsRequest
	19, // 29: nftmeta.v1.orderpair.Manager.CountOrderPairs:input_type -> nftmeta.v1.orderpair.CountOrderPairsRequest
	21, // 30: nftmeta.v1.orderpair.Manager.DeleteOrderPair:input_type -> nftmeta.v1.orderpair.DeleteOrderPairRequest
	4,  // 31: nftmeta.v1.orderpair.Manager.CreateOrderPair:output_type -> nftmeta.v1.orderpair.CreateOrderPairResponse
	6,  // 32: nftmeta.v1.orderpair.Manager.CreateOrderPairs:output_type -> nftmeta.v1.orderpair.CreateOrderPairsResponse
	14, // 33: nftmeta.v1.orderpair.Manager.UpdateOrderPair:output_type -> nftmeta.v1.orderpair.UpdateOrderPairResponse
	8,  // 34: nftmeta.v1.orderpair.Manager.GetOrderPair:output_type -> nftmeta.v1.orderpair.GetOrderPairResponse
	12, // 35: nftmeta.v1.orderpair.Manager.GetOrderPairOnly:output_type -> nftmeta.v1.orderpair.GetOrderPairOnlyResponse
	10, // 36: nftmeta.v1.orderpair.Manager.GetOrderPairs:output_type -> nftmeta.v1.orderpair.GetOrderPairsResponse
	16, // 37: nftmeta.v1.orderpair.Manager.ExistOrderPair:output_type -> nftmeta.v1.orderpair.ExistOrderPairResponse
	18, // 38: nftmeta.v1.orderpair.Manager.ExistOrderPairConds:output_type -> nftmeta.v1.orderpair.ExistOrderPairCondsResponse
	20, // 39: nftmeta.v1.orderpair.Manager.CountOrderPairs:output_type -> nftmeta.v1.orderpair.CountOrderPairsResponse
	22, // 40: nftmeta.v1.orderpair.Manager.DeleteOrderPair:output_type -> nftmeta.v1.orderpair.DeleteOrderPairResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_web3eye_nftmeta_v1_orderpair_orderpair_proto_init() }
func file_web3eye_nftmeta_v1_orderpair_orderpair_proto_init() {
	if File_web3eye_nftmeta_v1_orderpair_orderpair_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPairReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPairOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPairOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPairCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPairCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrderPairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrderPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web3eye_nftmeta_v1_orderpair_orderpair_proto_goTypes,
		DependencyIndexes: file_web3eye_nftmeta_v1_orderpair_orderpair_proto_depIdxs,
		MessageInfos:      file_web3eye_nftmeta_v1_orderpair_orderpair_proto_msgTypes,
	}.Build()
	File_web3eye_nftmeta_v1_orderpair_orderpair_proto = out.File
	file_web3eye_nftmeta_v1_orderpair_orderpair_proto_rawDesc = nil
	file_web3eye_nftmeta_v1_orderpair_orderpair_proto_goTypes = nil
	file_web3eye_nftmeta_v1_orderpair_orderpair_proto_depIdxs = nil
}
