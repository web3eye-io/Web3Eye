// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: web3eye/entrance/v1/endpoint/endpoint.proto

package endpoint

import (
	context "context"
	endpoint "github.com/web3eye-io/Web3Eye/proto/web3eye/nftmeta/v1/endpoint"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateEndpoint(ctx context.Context, in *endpoint.CreateEndpointRequest, opts ...grpc.CallOption) (*endpoint.CreateEndpointResponse, error)
	CreateEndpoints(ctx context.Context, in *endpoint.CreateEndpointsRequest, opts ...grpc.CallOption) (*endpoint.CreateEndpointsResponse, error)
	UpdateEndpoint(ctx context.Context, in *endpoint.UpdateEndpointRequest, opts ...grpc.CallOption) (*endpoint.UpdateEndpointResponse, error)
	UpdateEndpoints(ctx context.Context, in *endpoint.UpdateEndpointsRequest, opts ...grpc.CallOption) (*endpoint.UpdateEndpointsResponse, error)
	GetEndpoint(ctx context.Context, in *endpoint.GetEndpointRequest, opts ...grpc.CallOption) (*endpoint.GetEndpointResponse, error)
	GetEndpointOnly(ctx context.Context, in *endpoint.GetEndpointOnlyRequest, opts ...grpc.CallOption) (*endpoint.GetEndpointOnlyResponse, error)
	GetEndpoints(ctx context.Context, in *endpoint.GetEndpointsRequest, opts ...grpc.CallOption) (*endpoint.GetEndpointsResponse, error)
	ExistEndpoint(ctx context.Context, in *endpoint.ExistEndpointRequest, opts ...grpc.CallOption) (*endpoint.ExistEndpointResponse, error)
	ExistEndpointConds(ctx context.Context, in *endpoint.ExistEndpointCondsRequest, opts ...grpc.CallOption) (*endpoint.ExistEndpointCondsResponse, error)
	CountEndpoints(ctx context.Context, in *endpoint.CountEndpointsRequest, opts ...grpc.CallOption) (*endpoint.CountEndpointsResponse, error)
	DeleteEndpoint(ctx context.Context, in *endpoint.DeleteEndpointRequest, opts ...grpc.CallOption) (*endpoint.DeleteEndpointResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateEndpoint(ctx context.Context, in *endpoint.CreateEndpointRequest, opts ...grpc.CallOption) (*endpoint.CreateEndpointResponse, error) {
	out := new(endpoint.CreateEndpointResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/CreateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateEndpoints(ctx context.Context, in *endpoint.CreateEndpointsRequest, opts ...grpc.CallOption) (*endpoint.CreateEndpointsResponse, error) {
	out := new(endpoint.CreateEndpointsResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/CreateEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateEndpoint(ctx context.Context, in *endpoint.UpdateEndpointRequest, opts ...grpc.CallOption) (*endpoint.UpdateEndpointResponse, error) {
	out := new(endpoint.UpdateEndpointResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/UpdateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateEndpoints(ctx context.Context, in *endpoint.UpdateEndpointsRequest, opts ...grpc.CallOption) (*endpoint.UpdateEndpointsResponse, error) {
	out := new(endpoint.UpdateEndpointsResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/UpdateEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetEndpoint(ctx context.Context, in *endpoint.GetEndpointRequest, opts ...grpc.CallOption) (*endpoint.GetEndpointResponse, error) {
	out := new(endpoint.GetEndpointResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/GetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetEndpointOnly(ctx context.Context, in *endpoint.GetEndpointOnlyRequest, opts ...grpc.CallOption) (*endpoint.GetEndpointOnlyResponse, error) {
	out := new(endpoint.GetEndpointOnlyResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/GetEndpointOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetEndpoints(ctx context.Context, in *endpoint.GetEndpointsRequest, opts ...grpc.CallOption) (*endpoint.GetEndpointsResponse, error) {
	out := new(endpoint.GetEndpointsResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/GetEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistEndpoint(ctx context.Context, in *endpoint.ExistEndpointRequest, opts ...grpc.CallOption) (*endpoint.ExistEndpointResponse, error) {
	out := new(endpoint.ExistEndpointResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/ExistEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistEndpointConds(ctx context.Context, in *endpoint.ExistEndpointCondsRequest, opts ...grpc.CallOption) (*endpoint.ExistEndpointCondsResponse, error) {
	out := new(endpoint.ExistEndpointCondsResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/ExistEndpointConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountEndpoints(ctx context.Context, in *endpoint.CountEndpointsRequest, opts ...grpc.CallOption) (*endpoint.CountEndpointsResponse, error) {
	out := new(endpoint.CountEndpointsResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/CountEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteEndpoint(ctx context.Context, in *endpoint.DeleteEndpointRequest, opts ...grpc.CallOption) (*endpoint.DeleteEndpointResponse, error) {
	out := new(endpoint.DeleteEndpointResponse)
	err := c.cc.Invoke(ctx, "/entrance.v1.endpoint.Manager/DeleteEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateEndpoint(context.Context, *endpoint.CreateEndpointRequest) (*endpoint.CreateEndpointResponse, error)
	CreateEndpoints(context.Context, *endpoint.CreateEndpointsRequest) (*endpoint.CreateEndpointsResponse, error)
	UpdateEndpoint(context.Context, *endpoint.UpdateEndpointRequest) (*endpoint.UpdateEndpointResponse, error)
	UpdateEndpoints(context.Context, *endpoint.UpdateEndpointsRequest) (*endpoint.UpdateEndpointsResponse, error)
	GetEndpoint(context.Context, *endpoint.GetEndpointRequest) (*endpoint.GetEndpointResponse, error)
	GetEndpointOnly(context.Context, *endpoint.GetEndpointOnlyRequest) (*endpoint.GetEndpointOnlyResponse, error)
	GetEndpoints(context.Context, *endpoint.GetEndpointsRequest) (*endpoint.GetEndpointsResponse, error)
	ExistEndpoint(context.Context, *endpoint.ExistEndpointRequest) (*endpoint.ExistEndpointResponse, error)
	ExistEndpointConds(context.Context, *endpoint.ExistEndpointCondsRequest) (*endpoint.ExistEndpointCondsResponse, error)
	CountEndpoints(context.Context, *endpoint.CountEndpointsRequest) (*endpoint.CountEndpointsResponse, error)
	DeleteEndpoint(context.Context, *endpoint.DeleteEndpointRequest) (*endpoint.DeleteEndpointResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateEndpoint(context.Context, *endpoint.CreateEndpointRequest) (*endpoint.CreateEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoint not implemented")
}
func (UnimplementedManagerServer) CreateEndpoints(context.Context, *endpoint.CreateEndpointsRequest) (*endpoint.CreateEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoints not implemented")
}
func (UnimplementedManagerServer) UpdateEndpoint(context.Context, *endpoint.UpdateEndpointRequest) (*endpoint.UpdateEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpoint not implemented")
}
func (UnimplementedManagerServer) UpdateEndpoints(context.Context, *endpoint.UpdateEndpointsRequest) (*endpoint.UpdateEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpoints not implemented")
}
func (UnimplementedManagerServer) GetEndpoint(context.Context, *endpoint.GetEndpointRequest) (*endpoint.GetEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoint not implemented")
}
func (UnimplementedManagerServer) GetEndpointOnly(context.Context, *endpoint.GetEndpointOnlyRequest) (*endpoint.GetEndpointOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointOnly not implemented")
}
func (UnimplementedManagerServer) GetEndpoints(context.Context, *endpoint.GetEndpointsRequest) (*endpoint.GetEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoints not implemented")
}
func (UnimplementedManagerServer) ExistEndpoint(context.Context, *endpoint.ExistEndpointRequest) (*endpoint.ExistEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistEndpoint not implemented")
}
func (UnimplementedManagerServer) ExistEndpointConds(context.Context, *endpoint.ExistEndpointCondsRequest) (*endpoint.ExistEndpointCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistEndpointConds not implemented")
}
func (UnimplementedManagerServer) CountEndpoints(context.Context, *endpoint.CountEndpointsRequest) (*endpoint.CountEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountEndpoints not implemented")
}
func (UnimplementedManagerServer) DeleteEndpoint(context.Context, *endpoint.DeleteEndpointRequest) (*endpoint.DeleteEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpoint not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.CreateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/CreateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateEndpoint(ctx, req.(*endpoint.CreateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.CreateEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/CreateEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateEndpoints(ctx, req.(*endpoint.CreateEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.UpdateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/UpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateEndpoint(ctx, req.(*endpoint.UpdateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.UpdateEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/UpdateEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateEndpoints(ctx, req.(*endpoint.UpdateEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.GetEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/GetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetEndpoint(ctx, req.(*endpoint.GetEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetEndpointOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.GetEndpointOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetEndpointOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/GetEndpointOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetEndpointOnly(ctx, req.(*endpoint.GetEndpointOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.GetEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/GetEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetEndpoints(ctx, req.(*endpoint.GetEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.ExistEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/ExistEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistEndpoint(ctx, req.(*endpoint.ExistEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistEndpointConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.ExistEndpointCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistEndpointConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/ExistEndpointConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistEndpointConds(ctx, req.(*endpoint.ExistEndpointCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.CountEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/CountEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountEndpoints(ctx, req.(*endpoint.CountEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(endpoint.DeleteEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entrance.v1.endpoint.Manager/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteEndpoint(ctx, req.(*endpoint.DeleteEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entrance.v1.endpoint.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEndpoint",
			Handler:    _Manager_CreateEndpoint_Handler,
		},
		{
			MethodName: "CreateEndpoints",
			Handler:    _Manager_CreateEndpoints_Handler,
		},
		{
			MethodName: "UpdateEndpoint",
			Handler:    _Manager_UpdateEndpoint_Handler,
		},
		{
			MethodName: "UpdateEndpoints",
			Handler:    _Manager_UpdateEndpoints_Handler,
		},
		{
			MethodName: "GetEndpoint",
			Handler:    _Manager_GetEndpoint_Handler,
		},
		{
			MethodName: "GetEndpointOnly",
			Handler:    _Manager_GetEndpointOnly_Handler,
		},
		{
			MethodName: "GetEndpoints",
			Handler:    _Manager_GetEndpoints_Handler,
		},
		{
			MethodName: "ExistEndpoint",
			Handler:    _Manager_ExistEndpoint_Handler,
		},
		{
			MethodName: "ExistEndpointConds",
			Handler:    _Manager_ExistEndpointConds_Handler,
		},
		{
			MethodName: "CountEndpoints",
			Handler:    _Manager_CountEndpoints_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _Manager_DeleteEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3eye/entrance/v1/endpoint/endpoint.proto",
}
