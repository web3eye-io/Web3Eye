// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: web3eye/entrance/v1/synctask/synctask.proto

package synctask

import (
	context "context"
	synctask "github.com/web3eye-io/Web3Eye/proto/web3eye/ranker/v1/synctask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateSyncTask_FullMethodName = "/entrance.v1.synctask.Manager/CreateSyncTask"
	Manager_UpdateSyncTask_FullMethodName = "/entrance.v1.synctask.Manager/UpdateSyncTask"
	Manager_GetSyncTask_FullMethodName    = "/entrance.v1.synctask.Manager/GetSyncTask"
	Manager_GetSyncTasks_FullMethodName   = "/entrance.v1.synctask.Manager/GetSyncTasks"
	Manager_DeleteSyncTask_FullMethodName = "/entrance.v1.synctask.Manager/DeleteSyncTask"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateSyncTask(ctx context.Context, in *synctask.CreateSyncTaskRequest, opts ...grpc.CallOption) (*synctask.CreateSyncTaskResponse, error)
	UpdateSyncTask(ctx context.Context, in *synctask.UpdateSyncTaskRequest, opts ...grpc.CallOption) (*synctask.UpdateSyncTaskResponse, error)
	GetSyncTask(ctx context.Context, in *synctask.GetSyncTaskRequest, opts ...grpc.CallOption) (*synctask.GetSyncTaskResponse, error)
	GetSyncTasks(ctx context.Context, in *synctask.GetSyncTasksRequest, opts ...grpc.CallOption) (*synctask.GetSyncTasksResponse, error)
	DeleteSyncTask(ctx context.Context, in *synctask.DeleteSyncTaskRequest, opts ...grpc.CallOption) (*synctask.DeleteSyncTaskResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateSyncTask(ctx context.Context, in *synctask.CreateSyncTaskRequest, opts ...grpc.CallOption) (*synctask.CreateSyncTaskResponse, error) {
	out := new(synctask.CreateSyncTaskResponse)
	err := c.cc.Invoke(ctx, Manager_CreateSyncTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateSyncTask(ctx context.Context, in *synctask.UpdateSyncTaskRequest, opts ...grpc.CallOption) (*synctask.UpdateSyncTaskResponse, error) {
	out := new(synctask.UpdateSyncTaskResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateSyncTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSyncTask(ctx context.Context, in *synctask.GetSyncTaskRequest, opts ...grpc.CallOption) (*synctask.GetSyncTaskResponse, error) {
	out := new(synctask.GetSyncTaskResponse)
	err := c.cc.Invoke(ctx, Manager_GetSyncTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSyncTasks(ctx context.Context, in *synctask.GetSyncTasksRequest, opts ...grpc.CallOption) (*synctask.GetSyncTasksResponse, error) {
	out := new(synctask.GetSyncTasksResponse)
	err := c.cc.Invoke(ctx, Manager_GetSyncTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteSyncTask(ctx context.Context, in *synctask.DeleteSyncTaskRequest, opts ...grpc.CallOption) (*synctask.DeleteSyncTaskResponse, error) {
	out := new(synctask.DeleteSyncTaskResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteSyncTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateSyncTask(context.Context, *synctask.CreateSyncTaskRequest) (*synctask.CreateSyncTaskResponse, error)
	UpdateSyncTask(context.Context, *synctask.UpdateSyncTaskRequest) (*synctask.UpdateSyncTaskResponse, error)
	GetSyncTask(context.Context, *synctask.GetSyncTaskRequest) (*synctask.GetSyncTaskResponse, error)
	GetSyncTasks(context.Context, *synctask.GetSyncTasksRequest) (*synctask.GetSyncTasksResponse, error)
	DeleteSyncTask(context.Context, *synctask.DeleteSyncTaskRequest) (*synctask.DeleteSyncTaskResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateSyncTask(context.Context, *synctask.CreateSyncTaskRequest) (*synctask.CreateSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncTask not implemented")
}
func (UnimplementedManagerServer) UpdateSyncTask(context.Context, *synctask.UpdateSyncTaskRequest) (*synctask.UpdateSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncTask not implemented")
}
func (UnimplementedManagerServer) GetSyncTask(context.Context, *synctask.GetSyncTaskRequest) (*synctask.GetSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncTask not implemented")
}
func (UnimplementedManagerServer) GetSyncTasks(context.Context, *synctask.GetSyncTasksRequest) (*synctask.GetSyncTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncTasks not implemented")
}
func (UnimplementedManagerServer) DeleteSyncTask(context.Context, *synctask.DeleteSyncTaskRequest) (*synctask.DeleteSyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncTask not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(synctask.CreateSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateSyncTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSyncTask(ctx, req.(*synctask.CreateSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(synctask.UpdateSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateSyncTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateSyncTask(ctx, req.(*synctask.UpdateSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(synctask.GetSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetSyncTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSyncTask(ctx, req.(*synctask.GetSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSyncTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(synctask.GetSyncTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSyncTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetSyncTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSyncTasks(ctx, req.(*synctask.GetSyncTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteSyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(synctask.DeleteSyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteSyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteSyncTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteSyncTask(ctx, req.(*synctask.DeleteSyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entrance.v1.synctask.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSyncTask",
			Handler:    _Manager_CreateSyncTask_Handler,
		},
		{
			MethodName: "UpdateSyncTask",
			Handler:    _Manager_UpdateSyncTask_Handler,
		},
		{
			MethodName: "GetSyncTask",
			Handler:    _Manager_GetSyncTask_Handler,
		},
		{
			MethodName: "GetSyncTasks",
			Handler:    _Manager_GetSyncTasks_Handler,
		},
		{
			MethodName: "DeleteSyncTask",
			Handler:    _Manager_DeleteSyncTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3eye/entrance/v1/synctask/synctask.proto",
}
