// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/orderpair"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
)

// OrderPairUpdate is the builder for updating OrderPair entities.
type OrderPairUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderPairMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderPairUpdate builder.
func (opu *OrderPairUpdate) Where(ps ...predicate.OrderPair) *OrderPairUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetCreatedAt sets the "created_at" field.
func (opu *OrderPairUpdate) SetCreatedAt(u uint32) *OrderPairUpdate {
	opu.mutation.ResetCreatedAt()
	opu.mutation.SetCreatedAt(u)
	return opu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opu *OrderPairUpdate) SetNillableCreatedAt(u *uint32) *OrderPairUpdate {
	if u != nil {
		opu.SetCreatedAt(*u)
	}
	return opu
}

// AddCreatedAt adds u to the "created_at" field.
func (opu *OrderPairUpdate) AddCreatedAt(u int32) *OrderPairUpdate {
	opu.mutation.AddCreatedAt(u)
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrderPairUpdate) SetUpdatedAt(u uint32) *OrderPairUpdate {
	opu.mutation.ResetUpdatedAt()
	opu.mutation.SetUpdatedAt(u)
	return opu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opu *OrderPairUpdate) AddUpdatedAt(u int32) *OrderPairUpdate {
	opu.mutation.AddUpdatedAt(u)
	return opu
}

// SetDeletedAt sets the "deleted_at" field.
func (opu *OrderPairUpdate) SetDeletedAt(u uint32) *OrderPairUpdate {
	opu.mutation.ResetDeletedAt()
	opu.mutation.SetDeletedAt(u)
	return opu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opu *OrderPairUpdate) SetNillableDeletedAt(u *uint32) *OrderPairUpdate {
	if u != nil {
		opu.SetDeletedAt(*u)
	}
	return opu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opu *OrderPairUpdate) AddDeletedAt(u int32) *OrderPairUpdate {
	opu.mutation.AddDeletedAt(u)
	return opu
}

// SetTxHash sets the "tx_hash" field.
func (opu *OrderPairUpdate) SetTxHash(s string) *OrderPairUpdate {
	opu.mutation.SetTxHash(s)
	return opu
}

// SetRecipient sets the "recipient" field.
func (opu *OrderPairUpdate) SetRecipient(s string) *OrderPairUpdate {
	opu.mutation.SetRecipient(s)
	return opu
}

// SetTargetID sets the "target_id" field.
func (opu *OrderPairUpdate) SetTargetID(s string) *OrderPairUpdate {
	opu.mutation.SetTargetID(s)
	return opu
}

// SetOfferID sets the "offer_id" field.
func (opu *OrderPairUpdate) SetOfferID(s string) *OrderPairUpdate {
	opu.mutation.SetOfferID(s)
	return opu
}

// SetRemark sets the "remark" field.
func (opu *OrderPairUpdate) SetRemark(s string) *OrderPairUpdate {
	opu.mutation.SetRemark(s)
	return opu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (opu *OrderPairUpdate) SetNillableRemark(s *string) *OrderPairUpdate {
	if s != nil {
		opu.SetRemark(*s)
	}
	return opu
}

// ClearRemark clears the value of the "remark" field.
func (opu *OrderPairUpdate) ClearRemark() *OrderPairUpdate {
	opu.mutation.ClearRemark()
	return opu
}

// Mutation returns the OrderPairMutation object of the builder.
func (opu *OrderPairUpdate) Mutation() *OrderPairMutation {
	return opu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrderPairUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := opu.defaults(); err != nil {
		return 0, err
	}
	if len(opu.hooks) == 0 {
		affected, err = opu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPairMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opu.mutation = mutation
			affected, err = opu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(opu.hooks) - 1; i >= 0; i-- {
			if opu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, opu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrderPairUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrderPairUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrderPairUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrderPairUpdate) defaults() error {
	if _, ok := opu.mutation.UpdatedAt(); !ok {
		if orderpair.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpair.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpair.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opu *OrderPairUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPairUpdate {
	opu.modifiers = append(opu.modifiers, modifiers...)
	return opu
}

func (opu *OrderPairUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpair.Table,
			Columns: orderpair.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderpair.FieldID,
			},
		},
	}
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldCreatedAt,
		})
	}
	if value, ok := opu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldCreatedAt,
		})
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldUpdatedAt,
		})
	}
	if value, ok := opu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldUpdatedAt,
		})
	}
	if value, ok := opu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldDeletedAt,
		})
	}
	if value, ok := opu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldDeletedAt,
		})
	}
	if value, ok := opu.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldTxHash,
		})
	}
	if value, ok := opu.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldRecipient,
		})
	}
	if value, ok := opu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldTargetID,
		})
	}
	if value, ok := opu.mutation.OfferID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldOfferID,
		})
	}
	if value, ok := opu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldRemark,
		})
	}
	if opu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpair.FieldRemark,
		})
	}
	_spec.Modifiers = opu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderPairUpdateOne is the builder for updating a single OrderPair entity.
type OrderPairUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderPairMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (opuo *OrderPairUpdateOne) SetCreatedAt(u uint32) *OrderPairUpdateOne {
	opuo.mutation.ResetCreatedAt()
	opuo.mutation.SetCreatedAt(u)
	return opuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opuo *OrderPairUpdateOne) SetNillableCreatedAt(u *uint32) *OrderPairUpdateOne {
	if u != nil {
		opuo.SetCreatedAt(*u)
	}
	return opuo
}

// AddCreatedAt adds u to the "created_at" field.
func (opuo *OrderPairUpdateOne) AddCreatedAt(u int32) *OrderPairUpdateOne {
	opuo.mutation.AddCreatedAt(u)
	return opuo
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrderPairUpdateOne) SetUpdatedAt(u uint32) *OrderPairUpdateOne {
	opuo.mutation.ResetUpdatedAt()
	opuo.mutation.SetUpdatedAt(u)
	return opuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opuo *OrderPairUpdateOne) AddUpdatedAt(u int32) *OrderPairUpdateOne {
	opuo.mutation.AddUpdatedAt(u)
	return opuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opuo *OrderPairUpdateOne) SetDeletedAt(u uint32) *OrderPairUpdateOne {
	opuo.mutation.ResetDeletedAt()
	opuo.mutation.SetDeletedAt(u)
	return opuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opuo *OrderPairUpdateOne) SetNillableDeletedAt(u *uint32) *OrderPairUpdateOne {
	if u != nil {
		opuo.SetDeletedAt(*u)
	}
	return opuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opuo *OrderPairUpdateOne) AddDeletedAt(u int32) *OrderPairUpdateOne {
	opuo.mutation.AddDeletedAt(u)
	return opuo
}

// SetTxHash sets the "tx_hash" field.
func (opuo *OrderPairUpdateOne) SetTxHash(s string) *OrderPairUpdateOne {
	opuo.mutation.SetTxHash(s)
	return opuo
}

// SetRecipient sets the "recipient" field.
func (opuo *OrderPairUpdateOne) SetRecipient(s string) *OrderPairUpdateOne {
	opuo.mutation.SetRecipient(s)
	return opuo
}

// SetTargetID sets the "target_id" field.
func (opuo *OrderPairUpdateOne) SetTargetID(s string) *OrderPairUpdateOne {
	opuo.mutation.SetTargetID(s)
	return opuo
}

// SetOfferID sets the "offer_id" field.
func (opuo *OrderPairUpdateOne) SetOfferID(s string) *OrderPairUpdateOne {
	opuo.mutation.SetOfferID(s)
	return opuo
}

// SetRemark sets the "remark" field.
func (opuo *OrderPairUpdateOne) SetRemark(s string) *OrderPairUpdateOne {
	opuo.mutation.SetRemark(s)
	return opuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (opuo *OrderPairUpdateOne) SetNillableRemark(s *string) *OrderPairUpdateOne {
	if s != nil {
		opuo.SetRemark(*s)
	}
	return opuo
}

// ClearRemark clears the value of the "remark" field.
func (opuo *OrderPairUpdateOne) ClearRemark() *OrderPairUpdateOne {
	opuo.mutation.ClearRemark()
	return opuo
}

// Mutation returns the OrderPairMutation object of the builder.
func (opuo *OrderPairUpdateOne) Mutation() *OrderPairMutation {
	return opuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrderPairUpdateOne) Select(field string, fields ...string) *OrderPairUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrderPair entity.
func (opuo *OrderPairUpdateOne) Save(ctx context.Context) (*OrderPair, error) {
	var (
		err  error
		node *OrderPair
	)
	if err := opuo.defaults(); err != nil {
		return nil, err
	}
	if len(opuo.hooks) == 0 {
		node, err = opuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPairMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opuo.mutation = mutation
			node, err = opuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(opuo.hooks) - 1; i >= 0; i-- {
			if opuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPair)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPairMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrderPairUpdateOne) SaveX(ctx context.Context) *OrderPair {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrderPairUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrderPairUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrderPairUpdateOne) defaults() error {
	if _, ok := opuo.mutation.UpdatedAt(); !ok {
		if orderpair.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpair.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpair.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opuo *OrderPairUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPairUpdateOne {
	opuo.modifiers = append(opuo.modifiers, modifiers...)
	return opuo
}

func (opuo *OrderPairUpdateOne) sqlSave(ctx context.Context) (_node *OrderPair, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpair.Table,
			Columns: orderpair.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderpair.FieldID,
			},
		},
	}
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderPair.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpair.FieldID)
		for _, f := range fields {
			if !orderpair.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderpair.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldCreatedAt,
		})
	}
	if value, ok := opuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldCreatedAt,
		})
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldUpdatedAt,
		})
	}
	if value, ok := opuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldUpdatedAt,
		})
	}
	if value, ok := opuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldDeletedAt,
		})
	}
	if value, ok := opuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpair.FieldDeletedAt,
		})
	}
	if value, ok := opuo.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldTxHash,
		})
	}
	if value, ok := opuo.mutation.Recipient(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldRecipient,
		})
	}
	if value, ok := opuo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldTargetID,
		})
	}
	if value, ok := opuo.mutation.OfferID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldOfferID,
		})
	}
	if value, ok := opuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpair.FieldRemark,
		})
	}
	if opuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpair.FieldRemark,
		})
	}
	_spec.Modifiers = opuo.modifiers
	_node = &OrderPair{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpair.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
