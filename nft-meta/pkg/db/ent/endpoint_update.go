// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/endpoint"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
)

// EndpointUpdate is the builder for updating Endpoint entities.
type EndpointUpdate struct {
	config
	hooks     []Hook
	mutation  *EndpointMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EndpointUpdate builder.
func (eu *EndpointUpdate) Where(ps ...predicate.Endpoint) *EndpointUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEntID sets the "ent_id" field.
func (eu *EndpointUpdate) SetEntID(u uuid.UUID) *EndpointUpdate {
	eu.mutation.SetEntID(u)
	return eu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableEntID(u *uuid.UUID) *EndpointUpdate {
	if u != nil {
		eu.SetEntID(*u)
	}
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EndpointUpdate) SetCreatedAt(u uint32) *EndpointUpdate {
	eu.mutation.ResetCreatedAt()
	eu.mutation.SetCreatedAt(u)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableCreatedAt(u *uint32) *EndpointUpdate {
	if u != nil {
		eu.SetCreatedAt(*u)
	}
	return eu
}

// AddCreatedAt adds u to the "created_at" field.
func (eu *EndpointUpdate) AddCreatedAt(u int32) *EndpointUpdate {
	eu.mutation.AddCreatedAt(u)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EndpointUpdate) SetUpdatedAt(u uint32) *EndpointUpdate {
	eu.mutation.ResetUpdatedAt()
	eu.mutation.SetUpdatedAt(u)
	return eu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (eu *EndpointUpdate) AddUpdatedAt(u int32) *EndpointUpdate {
	eu.mutation.AddUpdatedAt(u)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EndpointUpdate) SetDeletedAt(u uint32) *EndpointUpdate {
	eu.mutation.ResetDeletedAt()
	eu.mutation.SetDeletedAt(u)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableDeletedAt(u *uint32) *EndpointUpdate {
	if u != nil {
		eu.SetDeletedAt(*u)
	}
	return eu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (eu *EndpointUpdate) AddDeletedAt(u int32) *EndpointUpdate {
	eu.mutation.AddDeletedAt(u)
	return eu
}

// SetChainType sets the "chain_type" field.
func (eu *EndpointUpdate) SetChainType(s string) *EndpointUpdate {
	eu.mutation.SetChainType(s)
	return eu
}

// SetChainID sets the "chain_id" field.
func (eu *EndpointUpdate) SetChainID(s string) *EndpointUpdate {
	eu.mutation.SetChainID(s)
	return eu
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableChainID(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetChainID(*s)
	}
	return eu
}

// ClearChainID clears the value of the "chain_id" field.
func (eu *EndpointUpdate) ClearChainID() *EndpointUpdate {
	eu.mutation.ClearChainID()
	return eu
}

// SetAddress sets the "address" field.
func (eu *EndpointUpdate) SetAddress(s string) *EndpointUpdate {
	eu.mutation.SetAddress(s)
	return eu
}

// SetState sets the "state" field.
func (eu *EndpointUpdate) SetState(s string) *EndpointUpdate {
	eu.mutation.SetState(s)
	return eu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableState(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetState(*s)
	}
	return eu
}

// ClearState clears the value of the "state" field.
func (eu *EndpointUpdate) ClearState() *EndpointUpdate {
	eu.mutation.ClearState()
	return eu
}

// SetRps sets the "rps" field.
func (eu *EndpointUpdate) SetRps(u uint32) *EndpointUpdate {
	eu.mutation.ResetRps()
	eu.mutation.SetRps(u)
	return eu
}

// SetNillableRps sets the "rps" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableRps(u *uint32) *EndpointUpdate {
	if u != nil {
		eu.SetRps(*u)
	}
	return eu
}

// AddRps adds u to the "rps" field.
func (eu *EndpointUpdate) AddRps(u int32) *EndpointUpdate {
	eu.mutation.AddRps(u)
	return eu
}

// SetRemark sets the "remark" field.
func (eu *EndpointUpdate) SetRemark(s string) *EndpointUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *EndpointUpdate) SetNillableRemark(s *string) *EndpointUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *EndpointUpdate) ClearRemark() *EndpointUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// Mutation returns the EndpointMutation object of the builder.
func (eu *EndpointUpdate) Mutation() *EndpointMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EndpointUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EndpointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EndpointUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EndpointUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EndpointUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EndpointUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if endpoint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized endpoint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := endpoint.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EndpointUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EndpointUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EndpointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endpoint.Table,
			Columns: endpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: endpoint.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: endpoint.FieldEntID,
		})
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldDeletedAt,
		})
	}
	if value, ok := eu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldDeletedAt,
		})
	}
	if value, ok := eu.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldChainType,
		})
	}
	if value, ok := eu.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldChainID,
		})
	}
	if eu.mutation.ChainIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: endpoint.FieldChainID,
		})
	}
	if value, ok := eu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldAddress,
		})
	}
	if value, ok := eu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldState,
		})
	}
	if eu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: endpoint.FieldState,
		})
	}
	if value, ok := eu.mutation.Rps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldRps,
		})
	}
	if value, ok := eu.mutation.AddedRps(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldRps,
		})
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldRemark,
		})
	}
	if eu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: endpoint.FieldRemark,
		})
	}
	_spec.Modifiers = eu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EndpointUpdateOne is the builder for updating a single Endpoint entity.
type EndpointUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EndpointMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (euo *EndpointUpdateOne) SetEntID(u uuid.UUID) *EndpointUpdateOne {
	euo.mutation.SetEntID(u)
	return euo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableEntID(u *uuid.UUID) *EndpointUpdateOne {
	if u != nil {
		euo.SetEntID(*u)
	}
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EndpointUpdateOne) SetCreatedAt(u uint32) *EndpointUpdateOne {
	euo.mutation.ResetCreatedAt()
	euo.mutation.SetCreatedAt(u)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableCreatedAt(u *uint32) *EndpointUpdateOne {
	if u != nil {
		euo.SetCreatedAt(*u)
	}
	return euo
}

// AddCreatedAt adds u to the "created_at" field.
func (euo *EndpointUpdateOne) AddCreatedAt(u int32) *EndpointUpdateOne {
	euo.mutation.AddCreatedAt(u)
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EndpointUpdateOne) SetUpdatedAt(u uint32) *EndpointUpdateOne {
	euo.mutation.ResetUpdatedAt()
	euo.mutation.SetUpdatedAt(u)
	return euo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (euo *EndpointUpdateOne) AddUpdatedAt(u int32) *EndpointUpdateOne {
	euo.mutation.AddUpdatedAt(u)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EndpointUpdateOne) SetDeletedAt(u uint32) *EndpointUpdateOne {
	euo.mutation.ResetDeletedAt()
	euo.mutation.SetDeletedAt(u)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableDeletedAt(u *uint32) *EndpointUpdateOne {
	if u != nil {
		euo.SetDeletedAt(*u)
	}
	return euo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (euo *EndpointUpdateOne) AddDeletedAt(u int32) *EndpointUpdateOne {
	euo.mutation.AddDeletedAt(u)
	return euo
}

// SetChainType sets the "chain_type" field.
func (euo *EndpointUpdateOne) SetChainType(s string) *EndpointUpdateOne {
	euo.mutation.SetChainType(s)
	return euo
}

// SetChainID sets the "chain_id" field.
func (euo *EndpointUpdateOne) SetChainID(s string) *EndpointUpdateOne {
	euo.mutation.SetChainID(s)
	return euo
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableChainID(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetChainID(*s)
	}
	return euo
}

// ClearChainID clears the value of the "chain_id" field.
func (euo *EndpointUpdateOne) ClearChainID() *EndpointUpdateOne {
	euo.mutation.ClearChainID()
	return euo
}

// SetAddress sets the "address" field.
func (euo *EndpointUpdateOne) SetAddress(s string) *EndpointUpdateOne {
	euo.mutation.SetAddress(s)
	return euo
}

// SetState sets the "state" field.
func (euo *EndpointUpdateOne) SetState(s string) *EndpointUpdateOne {
	euo.mutation.SetState(s)
	return euo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableState(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetState(*s)
	}
	return euo
}

// ClearState clears the value of the "state" field.
func (euo *EndpointUpdateOne) ClearState() *EndpointUpdateOne {
	euo.mutation.ClearState()
	return euo
}

// SetRps sets the "rps" field.
func (euo *EndpointUpdateOne) SetRps(u uint32) *EndpointUpdateOne {
	euo.mutation.ResetRps()
	euo.mutation.SetRps(u)
	return euo
}

// SetNillableRps sets the "rps" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableRps(u *uint32) *EndpointUpdateOne {
	if u != nil {
		euo.SetRps(*u)
	}
	return euo
}

// AddRps adds u to the "rps" field.
func (euo *EndpointUpdateOne) AddRps(u int32) *EndpointUpdateOne {
	euo.mutation.AddRps(u)
	return euo
}

// SetRemark sets the "remark" field.
func (euo *EndpointUpdateOne) SetRemark(s string) *EndpointUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *EndpointUpdateOne) SetNillableRemark(s *string) *EndpointUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *EndpointUpdateOne) ClearRemark() *EndpointUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// Mutation returns the EndpointMutation object of the builder.
func (euo *EndpointUpdateOne) Mutation() *EndpointMutation {
	return euo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EndpointUpdateOne) Select(field string, fields ...string) *EndpointUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Endpoint entity.
func (euo *EndpointUpdateOne) Save(ctx context.Context) (*Endpoint, error) {
	var (
		err  error
		node *Endpoint
	)
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EndpointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Endpoint)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EndpointMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EndpointUpdateOne) SaveX(ctx context.Context) *Endpoint {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EndpointUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EndpointUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EndpointUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if endpoint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized endpoint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := endpoint.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EndpointUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EndpointUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EndpointUpdateOne) sqlSave(ctx context.Context) (_node *Endpoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endpoint.Table,
			Columns: endpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: endpoint.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Endpoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, endpoint.FieldID)
		for _, f := range fields {
			if !endpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != endpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: endpoint.FieldEntID,
		})
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldDeletedAt,
		})
	}
	if value, ok := euo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldDeletedAt,
		})
	}
	if value, ok := euo.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldChainType,
		})
	}
	if value, ok := euo.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldChainID,
		})
	}
	if euo.mutation.ChainIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: endpoint.FieldChainID,
		})
	}
	if value, ok := euo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldAddress,
		})
	}
	if value, ok := euo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldState,
		})
	}
	if euo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: endpoint.FieldState,
		})
	}
	if value, ok := euo.mutation.Rps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldRps,
		})
	}
	if value, ok := euo.mutation.AddedRps(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: endpoint.FieldRps,
		})
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endpoint.FieldRemark,
		})
	}
	if euo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: endpoint.FieldRemark,
		})
	}
	_spec.Modifiers = euo.modifiers
	_node = &Endpoint{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
