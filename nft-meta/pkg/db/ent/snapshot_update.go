// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/snapshot"
)

// SnapshotUpdate is the builder for updating Snapshot entities.
type SnapshotUpdate struct {
	config
	hooks     []Hook
	mutation  *SnapshotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SnapshotUpdate builder.
func (su *SnapshotUpdate) Where(ps ...predicate.Snapshot) *SnapshotUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEntID sets the "ent_id" field.
func (su *SnapshotUpdate) SetEntID(u uuid.UUID) *SnapshotUpdate {
	su.mutation.SetEntID(u)
	return su
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (su *SnapshotUpdate) SetNillableEntID(u *uuid.UUID) *SnapshotUpdate {
	if u != nil {
		su.SetEntID(*u)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SnapshotUpdate) SetCreatedAt(u uint32) *SnapshotUpdate {
	su.mutation.ResetCreatedAt()
	su.mutation.SetCreatedAt(u)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SnapshotUpdate) SetNillableCreatedAt(u *uint32) *SnapshotUpdate {
	if u != nil {
		su.SetCreatedAt(*u)
	}
	return su
}

// AddCreatedAt adds u to the "created_at" field.
func (su *SnapshotUpdate) AddCreatedAt(u int32) *SnapshotUpdate {
	su.mutation.AddCreatedAt(u)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SnapshotUpdate) SetUpdatedAt(u uint32) *SnapshotUpdate {
	su.mutation.ResetUpdatedAt()
	su.mutation.SetUpdatedAt(u)
	return su
}

// AddUpdatedAt adds u to the "updated_at" field.
func (su *SnapshotUpdate) AddUpdatedAt(u int32) *SnapshotUpdate {
	su.mutation.AddUpdatedAt(u)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SnapshotUpdate) SetDeletedAt(u uint32) *SnapshotUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(u)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SnapshotUpdate) SetNillableDeletedAt(u *uint32) *SnapshotUpdate {
	if u != nil {
		su.SetDeletedAt(*u)
	}
	return su
}

// AddDeletedAt adds u to the "deleted_at" field.
func (su *SnapshotUpdate) AddDeletedAt(u int32) *SnapshotUpdate {
	su.mutation.AddDeletedAt(u)
	return su
}

// SetIndex sets the "index" field.
func (su *SnapshotUpdate) SetIndex(u uint64) *SnapshotUpdate {
	su.mutation.ResetIndex()
	su.mutation.SetIndex(u)
	return su
}

// AddIndex adds u to the "index" field.
func (su *SnapshotUpdate) AddIndex(u int64) *SnapshotUpdate {
	su.mutation.AddIndex(u)
	return su
}

// SetSnapshotCommP sets the "snapshot_comm_p" field.
func (su *SnapshotUpdate) SetSnapshotCommP(s string) *SnapshotUpdate {
	su.mutation.SetSnapshotCommP(s)
	return su
}

// SetSnapshotRoot sets the "snapshot_root" field.
func (su *SnapshotUpdate) SetSnapshotRoot(s string) *SnapshotUpdate {
	su.mutation.SetSnapshotRoot(s)
	return su
}

// SetSnapshotURI sets the "snapshot_uri" field.
func (su *SnapshotUpdate) SetSnapshotURI(s string) *SnapshotUpdate {
	su.mutation.SetSnapshotURI(s)
	return su
}

// SetBackupState sets the "backup_state" field.
func (su *SnapshotUpdate) SetBackupState(s string) *SnapshotUpdate {
	su.mutation.SetBackupState(s)
	return su
}

// Mutation returns the SnapshotMutation object of the builder.
func (su *SnapshotUpdate) Mutation() *SnapshotMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SnapshotUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SnapshotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SnapshotUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SnapshotUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SnapshotUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SnapshotUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if snapshot.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized snapshot.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := snapshot.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SnapshotUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SnapshotUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SnapshotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   snapshot.Table,
			Columns: snapshot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: snapshot.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: snapshot.FieldEntID,
		})
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldDeletedAt,
		})
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldDeletedAt,
		})
	}
	if value, ok := su.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: snapshot.FieldIndex,
		})
	}
	if value, ok := su.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: snapshot.FieldIndex,
		})
	}
	if value, ok := su.mutation.SnapshotCommP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldSnapshotCommP,
		})
	}
	if value, ok := su.mutation.SnapshotRoot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldSnapshotRoot,
		})
	}
	if value, ok := su.mutation.SnapshotURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldSnapshotURI,
		})
	}
	if value, ok := su.mutation.BackupState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldBackupState,
		})
	}
	_spec.Modifiers = su.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SnapshotUpdateOne is the builder for updating a single Snapshot entity.
type SnapshotUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SnapshotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (suo *SnapshotUpdateOne) SetEntID(u uuid.UUID) *SnapshotUpdateOne {
	suo.mutation.SetEntID(u)
	return suo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (suo *SnapshotUpdateOne) SetNillableEntID(u *uuid.UUID) *SnapshotUpdateOne {
	if u != nil {
		suo.SetEntID(*u)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SnapshotUpdateOne) SetCreatedAt(u uint32) *SnapshotUpdateOne {
	suo.mutation.ResetCreatedAt()
	suo.mutation.SetCreatedAt(u)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SnapshotUpdateOne) SetNillableCreatedAt(u *uint32) *SnapshotUpdateOne {
	if u != nil {
		suo.SetCreatedAt(*u)
	}
	return suo
}

// AddCreatedAt adds u to the "created_at" field.
func (suo *SnapshotUpdateOne) AddCreatedAt(u int32) *SnapshotUpdateOne {
	suo.mutation.AddCreatedAt(u)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SnapshotUpdateOne) SetUpdatedAt(u uint32) *SnapshotUpdateOne {
	suo.mutation.ResetUpdatedAt()
	suo.mutation.SetUpdatedAt(u)
	return suo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (suo *SnapshotUpdateOne) AddUpdatedAt(u int32) *SnapshotUpdateOne {
	suo.mutation.AddUpdatedAt(u)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SnapshotUpdateOne) SetDeletedAt(u uint32) *SnapshotUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(u)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SnapshotUpdateOne) SetNillableDeletedAt(u *uint32) *SnapshotUpdateOne {
	if u != nil {
		suo.SetDeletedAt(*u)
	}
	return suo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (suo *SnapshotUpdateOne) AddDeletedAt(u int32) *SnapshotUpdateOne {
	suo.mutation.AddDeletedAt(u)
	return suo
}

// SetIndex sets the "index" field.
func (suo *SnapshotUpdateOne) SetIndex(u uint64) *SnapshotUpdateOne {
	suo.mutation.ResetIndex()
	suo.mutation.SetIndex(u)
	return suo
}

// AddIndex adds u to the "index" field.
func (suo *SnapshotUpdateOne) AddIndex(u int64) *SnapshotUpdateOne {
	suo.mutation.AddIndex(u)
	return suo
}

// SetSnapshotCommP sets the "snapshot_comm_p" field.
func (suo *SnapshotUpdateOne) SetSnapshotCommP(s string) *SnapshotUpdateOne {
	suo.mutation.SetSnapshotCommP(s)
	return suo
}

// SetSnapshotRoot sets the "snapshot_root" field.
func (suo *SnapshotUpdateOne) SetSnapshotRoot(s string) *SnapshotUpdateOne {
	suo.mutation.SetSnapshotRoot(s)
	return suo
}

// SetSnapshotURI sets the "snapshot_uri" field.
func (suo *SnapshotUpdateOne) SetSnapshotURI(s string) *SnapshotUpdateOne {
	suo.mutation.SetSnapshotURI(s)
	return suo
}

// SetBackupState sets the "backup_state" field.
func (suo *SnapshotUpdateOne) SetBackupState(s string) *SnapshotUpdateOne {
	suo.mutation.SetBackupState(s)
	return suo
}

// Mutation returns the SnapshotMutation object of the builder.
func (suo *SnapshotUpdateOne) Mutation() *SnapshotMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SnapshotUpdateOne) Select(field string, fields ...string) *SnapshotUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Snapshot entity.
func (suo *SnapshotUpdateOne) Save(ctx context.Context) (*Snapshot, error) {
	var (
		err  error
		node *Snapshot
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SnapshotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Snapshot)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SnapshotMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SnapshotUpdateOne) SaveX(ctx context.Context) *Snapshot {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SnapshotUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SnapshotUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SnapshotUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if snapshot.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized snapshot.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := snapshot.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SnapshotUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SnapshotUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SnapshotUpdateOne) sqlSave(ctx context.Context) (_node *Snapshot, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   snapshot.Table,
			Columns: snapshot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: snapshot.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Snapshot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, snapshot.FieldID)
		for _, f := range fields {
			if !snapshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != snapshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: snapshot.FieldEntID,
		})
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldDeletedAt,
		})
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: snapshot.FieldDeletedAt,
		})
	}
	if value, ok := suo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: snapshot.FieldIndex,
		})
	}
	if value, ok := suo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: snapshot.FieldIndex,
		})
	}
	if value, ok := suo.mutation.SnapshotCommP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldSnapshotCommP,
		})
	}
	if value, ok := suo.mutation.SnapshotRoot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldSnapshotRoot,
		})
	}
	if value, ok := suo.mutation.SnapshotURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldSnapshotURI,
		})
	}
	if value, ok := suo.mutation.BackupState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: snapshot.FieldBackupState,
		})
	}
	_spec.Modifiers = suo.modifiers
	_node = &Snapshot{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
