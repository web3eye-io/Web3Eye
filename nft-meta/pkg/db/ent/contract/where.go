// Code generated by ent, DO NOT EDIT.

package contract

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// ChainType applies equality check predicate on the "chain_type" field. It's identical to ChainTypeEQ.
func ChainType(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainType), v))
	})
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// Decimals applies equality check predicate on the "decimals" field. It's identical to DecimalsEQ.
func Decimals(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDecimals), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// BlockNum applies equality check predicate on the "block_num" field. It's identical to BlockNumEQ.
func BlockNum(v uint64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockNum), v))
	})
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxHash), v))
	})
}

// TxTime applies equality check predicate on the "tx_time" field. It's identical to TxTimeEQ.
func TxTime(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxTime), v))
	})
}

// ProfileURL applies equality check predicate on the "profile_url" field. It's identical to ProfileURLEQ.
func ProfileURL(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileURL), v))
	})
}

// BaseURL applies equality check predicate on the "base_url" field. It's identical to BaseURLEQ.
func BaseURL(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBaseURL), v))
	})
}

// BannerURL applies equality check predicate on the "banner_url" field. It's identical to BannerURLEQ.
func BannerURL(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBannerURL), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// ChainTypeEQ applies the EQ predicate on the "chain_type" field.
func ChainTypeEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainType), v))
	})
}

// ChainTypeNEQ applies the NEQ predicate on the "chain_type" field.
func ChainTypeNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainType), v))
	})
}

// ChainTypeIn applies the In predicate on the "chain_type" field.
func ChainTypeIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainType), v...))
	})
}

// ChainTypeNotIn applies the NotIn predicate on the "chain_type" field.
func ChainTypeNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainType), v...))
	})
}

// ChainTypeGT applies the GT predicate on the "chain_type" field.
func ChainTypeGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainType), v))
	})
}

// ChainTypeGTE applies the GTE predicate on the "chain_type" field.
func ChainTypeGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainType), v))
	})
}

// ChainTypeLT applies the LT predicate on the "chain_type" field.
func ChainTypeLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainType), v))
	})
}

// ChainTypeLTE applies the LTE predicate on the "chain_type" field.
func ChainTypeLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainType), v))
	})
}

// ChainTypeContains applies the Contains predicate on the "chain_type" field.
func ChainTypeContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainType), v))
	})
}

// ChainTypeHasPrefix applies the HasPrefix predicate on the "chain_type" field.
func ChainTypeHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainType), v))
	})
}

// ChainTypeHasSuffix applies the HasSuffix predicate on the "chain_type" field.
func ChainTypeHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainType), v))
	})
}

// ChainTypeEqualFold applies the EqualFold predicate on the "chain_type" field.
func ChainTypeEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainType), v))
	})
}

// ChainTypeContainsFold applies the ContainsFold predicate on the "chain_type" field.
func ChainTypeContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainType), v))
	})
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainID), v))
	})
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainID), v...))
	})
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainID), v...))
	})
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainID), v))
	})
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainID), v))
	})
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainID), v))
	})
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainID), v))
	})
}

// ChainIDContains applies the Contains predicate on the "chain_id" field.
func ChainIDContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainID), v))
	})
}

// ChainIDHasPrefix applies the HasPrefix predicate on the "chain_id" field.
func ChainIDHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainID), v))
	})
}

// ChainIDHasSuffix applies the HasSuffix predicate on the "chain_id" field.
func ChainIDHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainID), v))
	})
}

// ChainIDEqualFold applies the EqualFold predicate on the "chain_id" field.
func ChainIDEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainID), v))
	})
}

// ChainIDContainsFold applies the ContainsFold predicate on the "chain_id" field.
func ChainIDContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainID), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymbol), v))
	})
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSymbol), v...))
	})
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSymbol), v...))
	})
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymbol), v))
	})
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymbol), v))
	})
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymbol), v))
	})
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymbol), v))
	})
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymbol), v))
	})
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymbol), v))
	})
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymbol), v))
	})
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymbol), v))
	})
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymbol), v))
	})
}

// DecimalsEQ applies the EQ predicate on the "decimals" field.
func DecimalsEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDecimals), v))
	})
}

// DecimalsNEQ applies the NEQ predicate on the "decimals" field.
func DecimalsNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDecimals), v))
	})
}

// DecimalsIn applies the In predicate on the "decimals" field.
func DecimalsIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDecimals), v...))
	})
}

// DecimalsNotIn applies the NotIn predicate on the "decimals" field.
func DecimalsNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDecimals), v...))
	})
}

// DecimalsGT applies the GT predicate on the "decimals" field.
func DecimalsGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDecimals), v))
	})
}

// DecimalsGTE applies the GTE predicate on the "decimals" field.
func DecimalsGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDecimals), v))
	})
}

// DecimalsLT applies the LT predicate on the "decimals" field.
func DecimalsLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDecimals), v))
	})
}

// DecimalsLTE applies the LTE predicate on the "decimals" field.
func DecimalsLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDecimals), v))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), v))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), v))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), v))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), v))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), v))
	})
}

// BlockNumEQ applies the EQ predicate on the "block_num" field.
func BlockNumEQ(v uint64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockNum), v))
	})
}

// BlockNumNEQ applies the NEQ predicate on the "block_num" field.
func BlockNumNEQ(v uint64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlockNum), v))
	})
}

// BlockNumIn applies the In predicate on the "block_num" field.
func BlockNumIn(vs ...uint64) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlockNum), v...))
	})
}

// BlockNumNotIn applies the NotIn predicate on the "block_num" field.
func BlockNumNotIn(vs ...uint64) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlockNum), v...))
	})
}

// BlockNumGT applies the GT predicate on the "block_num" field.
func BlockNumGT(v uint64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlockNum), v))
	})
}

// BlockNumGTE applies the GTE predicate on the "block_num" field.
func BlockNumGTE(v uint64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlockNum), v))
	})
}

// BlockNumLT applies the LT predicate on the "block_num" field.
func BlockNumLT(v uint64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlockNum), v))
	})
}

// BlockNumLTE applies the LTE predicate on the "block_num" field.
func BlockNumLTE(v uint64) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlockNum), v))
	})
}

// BlockNumIsNil applies the IsNil predicate on the "block_num" field.
func BlockNumIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBlockNum)))
	})
}

// BlockNumNotNil applies the NotNil predicate on the "block_num" field.
func BlockNumNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBlockNum)))
	})
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxHash), v))
	})
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxHash), v))
	})
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTxHash), v...))
	})
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTxHash), v...))
	})
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxHash), v))
	})
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxHash), v))
	})
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxHash), v))
	})
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxHash), v))
	})
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxHash), v))
	})
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxHash), v))
	})
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxHash), v))
	})
}

// TxHashIsNil applies the IsNil predicate on the "tx_hash" field.
func TxHashIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxHash)))
	})
}

// TxHashNotNil applies the NotNil predicate on the "tx_hash" field.
func TxHashNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxHash)))
	})
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxHash), v))
	})
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxHash), v))
	})
}

// TxTimeEQ applies the EQ predicate on the "tx_time" field.
func TxTimeEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxTime), v))
	})
}

// TxTimeNEQ applies the NEQ predicate on the "tx_time" field.
func TxTimeNEQ(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxTime), v))
	})
}

// TxTimeIn applies the In predicate on the "tx_time" field.
func TxTimeIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTxTime), v...))
	})
}

// TxTimeNotIn applies the NotIn predicate on the "tx_time" field.
func TxTimeNotIn(vs ...uint32) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTxTime), v...))
	})
}

// TxTimeGT applies the GT predicate on the "tx_time" field.
func TxTimeGT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxTime), v))
	})
}

// TxTimeGTE applies the GTE predicate on the "tx_time" field.
func TxTimeGTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxTime), v))
	})
}

// TxTimeLT applies the LT predicate on the "tx_time" field.
func TxTimeLT(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxTime), v))
	})
}

// TxTimeLTE applies the LTE predicate on the "tx_time" field.
func TxTimeLTE(v uint32) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxTime), v))
	})
}

// TxTimeIsNil applies the IsNil predicate on the "tx_time" field.
func TxTimeIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxTime)))
	})
}

// TxTimeNotNil applies the NotNil predicate on the "tx_time" field.
func TxTimeNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxTime)))
	})
}

// ProfileURLEQ applies the EQ predicate on the "profile_url" field.
func ProfileURLEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileURL), v))
	})
}

// ProfileURLNEQ applies the NEQ predicate on the "profile_url" field.
func ProfileURLNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfileURL), v))
	})
}

// ProfileURLIn applies the In predicate on the "profile_url" field.
func ProfileURLIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProfileURL), v...))
	})
}

// ProfileURLNotIn applies the NotIn predicate on the "profile_url" field.
func ProfileURLNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProfileURL), v...))
	})
}

// ProfileURLGT applies the GT predicate on the "profile_url" field.
func ProfileURLGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfileURL), v))
	})
}

// ProfileURLGTE applies the GTE predicate on the "profile_url" field.
func ProfileURLGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfileURL), v))
	})
}

// ProfileURLLT applies the LT predicate on the "profile_url" field.
func ProfileURLLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfileURL), v))
	})
}

// ProfileURLLTE applies the LTE predicate on the "profile_url" field.
func ProfileURLLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfileURL), v))
	})
}

// ProfileURLContains applies the Contains predicate on the "profile_url" field.
func ProfileURLContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProfileURL), v))
	})
}

// ProfileURLHasPrefix applies the HasPrefix predicate on the "profile_url" field.
func ProfileURLHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProfileURL), v))
	})
}

// ProfileURLHasSuffix applies the HasSuffix predicate on the "profile_url" field.
func ProfileURLHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProfileURL), v))
	})
}

// ProfileURLIsNil applies the IsNil predicate on the "profile_url" field.
func ProfileURLIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProfileURL)))
	})
}

// ProfileURLNotNil applies the NotNil predicate on the "profile_url" field.
func ProfileURLNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProfileURL)))
	})
}

// ProfileURLEqualFold applies the EqualFold predicate on the "profile_url" field.
func ProfileURLEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProfileURL), v))
	})
}

// ProfileURLContainsFold applies the ContainsFold predicate on the "profile_url" field.
func ProfileURLContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProfileURL), v))
	})
}

// BaseURLEQ applies the EQ predicate on the "base_url" field.
func BaseURLEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBaseURL), v))
	})
}

// BaseURLNEQ applies the NEQ predicate on the "base_url" field.
func BaseURLNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBaseURL), v))
	})
}

// BaseURLIn applies the In predicate on the "base_url" field.
func BaseURLIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBaseURL), v...))
	})
}

// BaseURLNotIn applies the NotIn predicate on the "base_url" field.
func BaseURLNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBaseURL), v...))
	})
}

// BaseURLGT applies the GT predicate on the "base_url" field.
func BaseURLGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBaseURL), v))
	})
}

// BaseURLGTE applies the GTE predicate on the "base_url" field.
func BaseURLGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBaseURL), v))
	})
}

// BaseURLLT applies the LT predicate on the "base_url" field.
func BaseURLLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBaseURL), v))
	})
}

// BaseURLLTE applies the LTE predicate on the "base_url" field.
func BaseURLLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBaseURL), v))
	})
}

// BaseURLContains applies the Contains predicate on the "base_url" field.
func BaseURLContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBaseURL), v))
	})
}

// BaseURLHasPrefix applies the HasPrefix predicate on the "base_url" field.
func BaseURLHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBaseURL), v))
	})
}

// BaseURLHasSuffix applies the HasSuffix predicate on the "base_url" field.
func BaseURLHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBaseURL), v))
	})
}

// BaseURLIsNil applies the IsNil predicate on the "base_url" field.
func BaseURLIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBaseURL)))
	})
}

// BaseURLNotNil applies the NotNil predicate on the "base_url" field.
func BaseURLNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBaseURL)))
	})
}

// BaseURLEqualFold applies the EqualFold predicate on the "base_url" field.
func BaseURLEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBaseURL), v))
	})
}

// BaseURLContainsFold applies the ContainsFold predicate on the "base_url" field.
func BaseURLContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBaseURL), v))
	})
}

// BannerURLEQ applies the EQ predicate on the "banner_url" field.
func BannerURLEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBannerURL), v))
	})
}

// BannerURLNEQ applies the NEQ predicate on the "banner_url" field.
func BannerURLNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBannerURL), v))
	})
}

// BannerURLIn applies the In predicate on the "banner_url" field.
func BannerURLIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBannerURL), v...))
	})
}

// BannerURLNotIn applies the NotIn predicate on the "banner_url" field.
func BannerURLNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBannerURL), v...))
	})
}

// BannerURLGT applies the GT predicate on the "banner_url" field.
func BannerURLGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBannerURL), v))
	})
}

// BannerURLGTE applies the GTE predicate on the "banner_url" field.
func BannerURLGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBannerURL), v))
	})
}

// BannerURLLT applies the LT predicate on the "banner_url" field.
func BannerURLLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBannerURL), v))
	})
}

// BannerURLLTE applies the LTE predicate on the "banner_url" field.
func BannerURLLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBannerURL), v))
	})
}

// BannerURLContains applies the Contains predicate on the "banner_url" field.
func BannerURLContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBannerURL), v))
	})
}

// BannerURLHasPrefix applies the HasPrefix predicate on the "banner_url" field.
func BannerURLHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBannerURL), v))
	})
}

// BannerURLHasSuffix applies the HasSuffix predicate on the "banner_url" field.
func BannerURLHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBannerURL), v))
	})
}

// BannerURLIsNil applies the IsNil predicate on the "banner_url" field.
func BannerURLIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBannerURL)))
	})
}

// BannerURLNotNil applies the NotNil predicate on the "banner_url" field.
func BannerURLNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBannerURL)))
	})
}

// BannerURLEqualFold applies the EqualFold predicate on the "banner_url" field.
func BannerURLEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBannerURL), v))
	})
}

// BannerURLContainsFold applies the ContainsFold predicate on the "banner_url" field.
func BannerURLContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBannerURL), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Contract {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contract) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		p(s.Not())
	})
}
