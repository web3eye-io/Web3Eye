// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/block"
)

// BlockCreate is the builder for creating a Block entity.
type BlockCreate struct {
	config
	mutation *BlockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bc *BlockCreate) SetCreatedAt(u uint32) *BlockCreate {
	bc.mutation.SetCreatedAt(u)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BlockCreate) SetNillableCreatedAt(u *uint32) *BlockCreate {
	if u != nil {
		bc.SetCreatedAt(*u)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BlockCreate) SetUpdatedAt(u uint32) *BlockCreate {
	bc.mutation.SetUpdatedAt(u)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BlockCreate) SetNillableUpdatedAt(u *uint32) *BlockCreate {
	if u != nil {
		bc.SetUpdatedAt(*u)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BlockCreate) SetDeletedAt(u uint32) *BlockCreate {
	bc.mutation.SetDeletedAt(u)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BlockCreate) SetNillableDeletedAt(u *uint32) *BlockCreate {
	if u != nil {
		bc.SetDeletedAt(*u)
	}
	return bc
}

// SetEntID sets the "ent_id" field.
func (bc *BlockCreate) SetEntID(u uuid.UUID) *BlockCreate {
	bc.mutation.SetEntID(u)
	return bc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (bc *BlockCreate) SetNillableEntID(u *uuid.UUID) *BlockCreate {
	if u != nil {
		bc.SetEntID(*u)
	}
	return bc
}

// SetChainType sets the "chain_type" field.
func (bc *BlockCreate) SetChainType(s string) *BlockCreate {
	bc.mutation.SetChainType(s)
	return bc
}

// SetChainID sets the "chain_id" field.
func (bc *BlockCreate) SetChainID(s string) *BlockCreate {
	bc.mutation.SetChainID(s)
	return bc
}

// SetBlockNumber sets the "block_number" field.
func (bc *BlockCreate) SetBlockNumber(u uint64) *BlockCreate {
	bc.mutation.SetBlockNumber(u)
	return bc
}

// SetBlockHash sets the "block_hash" field.
func (bc *BlockCreate) SetBlockHash(s string) *BlockCreate {
	bc.mutation.SetBlockHash(s)
	return bc
}

// SetBlockTime sets the "block_time" field.
func (bc *BlockCreate) SetBlockTime(u uint64) *BlockCreate {
	bc.mutation.SetBlockTime(u)
	return bc
}

// SetParseState sets the "parse_state" field.
func (bc *BlockCreate) SetParseState(s string) *BlockCreate {
	bc.mutation.SetParseState(s)
	return bc
}

// SetRemark sets the "remark" field.
func (bc *BlockCreate) SetRemark(s string) *BlockCreate {
	bc.mutation.SetRemark(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BlockCreate) SetID(u uint32) *BlockCreate {
	bc.mutation.SetID(u)
	return bc
}

// Mutation returns the BlockMutation object of the builder.
func (bc *BlockCreate) Mutation() *BlockMutation {
	return bc.mutation
}

// Save creates the Block in the database.
func (bc *BlockCreate) Save(ctx context.Context) (*Block, error) {
	var (
		err  error
		node *Block
	)
	if err := bc.defaults(); err != nil {
		return nil, err
	}
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Block)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlockMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlockCreate) SaveX(ctx context.Context) *Block {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BlockCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BlockCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BlockCreate) defaults() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		if block.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized block.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := block.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		if block.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized block.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := block.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		if block.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized block.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := block.DefaultDeletedAt()
		bc.mutation.SetDeletedAt(v)
	}
	if _, ok := bc.mutation.EntID(); !ok {
		if block.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized block.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := block.DefaultEntID()
		bc.mutation.SetEntID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlockCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Block.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Block.updated_at"`)}
	}
	if _, ok := bc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Block.deleted_at"`)}
	}
	if _, ok := bc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Block.ent_id"`)}
	}
	if _, ok := bc.mutation.ChainType(); !ok {
		return &ValidationError{Name: "chain_type", err: errors.New(`ent: missing required field "Block.chain_type"`)}
	}
	if _, ok := bc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Block.chain_id"`)}
	}
	if _, ok := bc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "Block.block_number"`)}
	}
	if _, ok := bc.mutation.BlockHash(); !ok {
		return &ValidationError{Name: "block_hash", err: errors.New(`ent: missing required field "Block.block_hash"`)}
	}
	if _, ok := bc.mutation.BlockTime(); !ok {
		return &ValidationError{Name: "block_time", err: errors.New(`ent: missing required field "Block.block_time"`)}
	}
	if _, ok := bc.mutation.ParseState(); !ok {
		return &ValidationError{Name: "parse_state", err: errors.New(`ent: missing required field "Block.parse_state"`)}
	}
	if _, ok := bc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Block.remark"`)}
	}
	return nil
}

func (bc *BlockCreate) sqlSave(ctx context.Context) (*Block, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (bc *BlockCreate) createSpec() (*Block, *sqlgraph.CreateSpec) {
	var (
		_node = &Block{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: block.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: block.FieldID,
			},
		}
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: block.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: block.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: block.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := bc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: block.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := bc.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := bc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := bc.mutation.BlockNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: block.FieldBlockNumber,
		})
		_node.BlockNumber = value
	}
	if value, ok := bc.mutation.BlockHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldBlockHash,
		})
		_node.BlockHash = value
	}
	if value, ok := bc.mutation.BlockTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: block.FieldBlockTime,
		})
		_node.BlockTime = value
	}
	if value, ok := bc.mutation.ParseState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldParseState,
		})
		_node.ParseState = value
	}
	if value, ok := bc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Block.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bc *BlockCreate) OnConflict(opts ...sql.ConflictOption) *BlockUpsertOne {
	bc.conflict = opts
	return &BlockUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Block.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BlockCreate) OnConflictColumns(columns ...string) *BlockUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BlockUpsertOne{
		create: bc,
	}
}

type (
	// BlockUpsertOne is the builder for "upsert"-ing
	//  one Block node.
	BlockUpsertOne struct {
		create *BlockCreate
	}

	// BlockUpsert is the "OnConflict" setter.
	BlockUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *BlockUpsert) SetCreatedAt(v uint32) *BlockUpsert {
	u.Set(block.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockUpsert) UpdateCreatedAt() *BlockUpsert {
	u.SetExcluded(block.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BlockUpsert) AddCreatedAt(v uint32) *BlockUpsert {
	u.Add(block.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockUpsert) SetUpdatedAt(v uint32) *BlockUpsert {
	u.Set(block.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockUpsert) UpdateUpdatedAt() *BlockUpsert {
	u.SetExcluded(block.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlockUpsert) AddUpdatedAt(v uint32) *BlockUpsert {
	u.Add(block.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlockUpsert) SetDeletedAt(v uint32) *BlockUpsert {
	u.Set(block.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlockUpsert) UpdateDeletedAt() *BlockUpsert {
	u.SetExcluded(block.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlockUpsert) AddDeletedAt(v uint32) *BlockUpsert {
	u.Add(block.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *BlockUpsert) SetEntID(v uuid.UUID) *BlockUpsert {
	u.Set(block.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *BlockUpsert) UpdateEntID() *BlockUpsert {
	u.SetExcluded(block.FieldEntID)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *BlockUpsert) SetChainType(v string) *BlockUpsert {
	u.Set(block.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *BlockUpsert) UpdateChainType() *BlockUpsert {
	u.SetExcluded(block.FieldChainType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *BlockUpsert) SetChainID(v string) *BlockUpsert {
	u.Set(block.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *BlockUpsert) UpdateChainID() *BlockUpsert {
	u.SetExcluded(block.FieldChainID)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *BlockUpsert) SetBlockNumber(v uint64) *BlockUpsert {
	u.Set(block.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *BlockUpsert) UpdateBlockNumber() *BlockUpsert {
	u.SetExcluded(block.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "block_number" field.
func (u *BlockUpsert) AddBlockNumber(v uint64) *BlockUpsert {
	u.Add(block.FieldBlockNumber, v)
	return u
}

// SetBlockHash sets the "block_hash" field.
func (u *BlockUpsert) SetBlockHash(v string) *BlockUpsert {
	u.Set(block.FieldBlockHash, v)
	return u
}

// UpdateBlockHash sets the "block_hash" field to the value that was provided on create.
func (u *BlockUpsert) UpdateBlockHash() *BlockUpsert {
	u.SetExcluded(block.FieldBlockHash)
	return u
}

// SetBlockTime sets the "block_time" field.
func (u *BlockUpsert) SetBlockTime(v uint64) *BlockUpsert {
	u.Set(block.FieldBlockTime, v)
	return u
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *BlockUpsert) UpdateBlockTime() *BlockUpsert {
	u.SetExcluded(block.FieldBlockTime)
	return u
}

// AddBlockTime adds v to the "block_time" field.
func (u *BlockUpsert) AddBlockTime(v uint64) *BlockUpsert {
	u.Add(block.FieldBlockTime, v)
	return u
}

// SetParseState sets the "parse_state" field.
func (u *BlockUpsert) SetParseState(v string) *BlockUpsert {
	u.Set(block.FieldParseState, v)
	return u
}

// UpdateParseState sets the "parse_state" field to the value that was provided on create.
func (u *BlockUpsert) UpdateParseState() *BlockUpsert {
	u.SetExcluded(block.FieldParseState)
	return u
}

// SetRemark sets the "remark" field.
func (u *BlockUpsert) SetRemark(v string) *BlockUpsert {
	u.Set(block.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BlockUpsert) UpdateRemark() *BlockUpsert {
	u.SetExcluded(block.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Block.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(block.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockUpsertOne) UpdateNewValues() *BlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(block.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Block.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockUpsertOne) Ignore() *BlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockUpsertOne) DoNothing() *BlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockCreate.OnConflict
// documentation for more info.
func (u *BlockUpsertOne) Update(set func(*BlockUpsert)) *BlockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BlockUpsertOne) SetCreatedAt(v uint32) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BlockUpsertOne) AddCreatedAt(v uint32) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateCreatedAt() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockUpsertOne) SetUpdatedAt(v uint32) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlockUpsertOne) AddUpdatedAt(v uint32) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateUpdatedAt() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlockUpsertOne) SetDeletedAt(v uint32) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlockUpsertOne) AddDeletedAt(v uint32) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateDeletedAt() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *BlockUpsertOne) SetEntID(v uuid.UUID) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateEntID() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *BlockUpsertOne) SetChainType(v string) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateChainType() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *BlockUpsertOne) SetChainID(v string) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateChainID() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateChainID()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *BlockUpsertOne) SetBlockNumber(v uint64) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *BlockUpsertOne) AddBlockNumber(v uint64) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateBlockNumber() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetBlockHash sets the "block_hash" field.
func (u *BlockUpsertOne) SetBlockHash(v string) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetBlockHash(v)
	})
}

// UpdateBlockHash sets the "block_hash" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateBlockHash() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateBlockHash()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *BlockUpsertOne) SetBlockTime(v uint64) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetBlockTime(v)
	})
}

// AddBlockTime adds v to the "block_time" field.
func (u *BlockUpsertOne) AddBlockTime(v uint64) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.AddBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateBlockTime() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateBlockTime()
	})
}

// SetParseState sets the "parse_state" field.
func (u *BlockUpsertOne) SetParseState(v string) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetParseState(v)
	})
}

// UpdateParseState sets the "parse_state" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateParseState() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateParseState()
	})
}

// SetRemark sets the "remark" field.
func (u *BlockUpsertOne) SetRemark(v string) *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BlockUpsertOne) UpdateRemark() *BlockUpsertOne {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *BlockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockCreateBulk is the builder for creating many Block entities in bulk.
type BlockCreateBulk struct {
	config
	builders []*BlockCreate
	conflict []sql.ConflictOption
}

// Save creates the Block entities in the database.
func (bcb *BlockCreateBulk) Save(ctx context.Context) ([]*Block, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Block, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BlockCreateBulk) SaveX(ctx context.Context) []*Block {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BlockCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BlockCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Block.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcb *BlockCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockUpsertBulk {
	bcb.conflict = opts
	return &BlockUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Block.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BlockCreateBulk) OnConflictColumns(columns ...string) *BlockUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BlockUpsertBulk{
		create: bcb,
	}
}

// BlockUpsertBulk is the builder for "upsert"-ing
// a bulk of Block nodes.
type BlockUpsertBulk struct {
	create *BlockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Block.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(block.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockUpsertBulk) UpdateNewValues() *BlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(block.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Block.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockUpsertBulk) Ignore() *BlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockUpsertBulk) DoNothing() *BlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockCreateBulk.OnConflict
// documentation for more info.
func (u *BlockUpsertBulk) Update(set func(*BlockUpsert)) *BlockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BlockUpsertBulk) SetCreatedAt(v uint32) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *BlockUpsertBulk) AddCreatedAt(v uint32) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateCreatedAt() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BlockUpsertBulk) SetUpdatedAt(v uint32) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *BlockUpsertBulk) AddUpdatedAt(v uint32) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateUpdatedAt() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BlockUpsertBulk) SetDeletedAt(v uint32) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *BlockUpsertBulk) AddDeletedAt(v uint32) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateDeletedAt() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *BlockUpsertBulk) SetEntID(v uuid.UUID) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateEntID() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *BlockUpsertBulk) SetChainType(v string) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateChainType() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *BlockUpsertBulk) SetChainID(v string) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateChainID() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateChainID()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *BlockUpsertBulk) SetBlockNumber(v uint64) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *BlockUpsertBulk) AddBlockNumber(v uint64) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateBlockNumber() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetBlockHash sets the "block_hash" field.
func (u *BlockUpsertBulk) SetBlockHash(v string) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetBlockHash(v)
	})
}

// UpdateBlockHash sets the "block_hash" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateBlockHash() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateBlockHash()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *BlockUpsertBulk) SetBlockTime(v uint64) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetBlockTime(v)
	})
}

// AddBlockTime adds v to the "block_time" field.
func (u *BlockUpsertBulk) AddBlockTime(v uint64) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.AddBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateBlockTime() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateBlockTime()
	})
}

// SetParseState sets the "parse_state" field.
func (u *BlockUpsertBulk) SetParseState(v string) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetParseState(v)
	})
}

// UpdateParseState sets the "parse_state" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateParseState() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateParseState()
	})
}

// SetRemark sets the "remark" field.
func (u *BlockUpsertBulk) SetRemark(v string) *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BlockUpsertBulk) UpdateRemark() *BlockUpsertBulk {
	return u.Update(func(s *BlockUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *BlockUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
