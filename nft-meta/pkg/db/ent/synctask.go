// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/synctask"
)

// SyncTask is the model entity for the SyncTask schema.
type SyncTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// ChainType holds the value of the "chain_type" field.
	ChainType string `json:"chain_type,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID string `json:"chain_id,omitempty"`
	// Start holds the value of the "start" field.
	Start uint64 `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End uint64 `json:"end,omitempty"`
	// Current holds the value of the "current" field.
	Current uint64 `json:"current,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SyncState holds the value of the "sync_state" field.
	SyncState string `json:"sync_state,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SyncTask) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case synctask.FieldID, synctask.FieldCreatedAt, synctask.FieldUpdatedAt, synctask.FieldDeletedAt, synctask.FieldStart, synctask.FieldEnd, synctask.FieldCurrent:
			values[i] = new(sql.NullInt64)
		case synctask.FieldChainType, synctask.FieldChainID, synctask.FieldTopic, synctask.FieldDescription, synctask.FieldSyncState, synctask.FieldRemark:
			values[i] = new(sql.NullString)
		case synctask.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SyncTask", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SyncTask fields.
func (st *SyncTask) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case synctask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = uint32(value.Int64)
		case synctask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = uint32(value.Int64)
			}
		case synctask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = uint32(value.Int64)
			}
		case synctask.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				st.DeletedAt = uint32(value.Int64)
			}
		case synctask.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				st.EntID = *value
			}
		case synctask.FieldChainType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_type", values[i])
			} else if value.Valid {
				st.ChainType = value.String
			}
		case synctask.FieldChainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				st.ChainID = value.String
			}
		case synctask.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				st.Start = uint64(value.Int64)
			}
		case synctask.FieldEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				st.End = uint64(value.Int64)
			}
		case synctask.FieldCurrent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current", values[i])
			} else if value.Valid {
				st.Current = uint64(value.Int64)
			}
		case synctask.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				st.Topic = value.String
			}
		case synctask.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				st.Description = value.String
			}
		case synctask.FieldSyncState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sync_state", values[i])
			} else if value.Valid {
				st.SyncState = value.String
			}
		case synctask.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				st.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SyncTask.
// Note that you need to call SyncTask.Unwrap() before calling this method if this SyncTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SyncTask) Update() *SyncTaskUpdateOne {
	return (&SyncTaskClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the SyncTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SyncTask) Unwrap() *SyncTask {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SyncTask is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SyncTask) String() string {
	var builder strings.Builder
	builder.WriteString("SyncTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", st.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", st.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", st.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", st.EntID))
	builder.WriteString(", ")
	builder.WriteString("chain_type=")
	builder.WriteString(st.ChainType)
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(st.ChainID)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", st.Start))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(fmt.Sprintf("%v", st.End))
	builder.WriteString(", ")
	builder.WriteString("current=")
	builder.WriteString(fmt.Sprintf("%v", st.Current))
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(st.Topic)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(st.Description)
	builder.WriteString(", ")
	builder.WriteString("sync_state=")
	builder.WriteString(st.SyncState)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(st.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// SyncTasks is a parsable slice of SyncTask.
type SyncTasks []*SyncTask

func (st SyncTasks) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
