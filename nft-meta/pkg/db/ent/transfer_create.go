// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/transfer"
)

// TransferCreate is the builder for creating a Transfer entity.
type TransferCreate struct {
	config
	mutation *TransferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (tc *TransferCreate) SetEntID(u uuid.UUID) *TransferCreate {
	tc.mutation.SetEntID(u)
	return tc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tc *TransferCreate) SetNillableEntID(u *uuid.UUID) *TransferCreate {
	if u != nil {
		tc.SetEntID(*u)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransferCreate) SetCreatedAt(u uint32) *TransferCreate {
	tc.mutation.SetCreatedAt(u)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableCreatedAt(u *uint32) *TransferCreate {
	if u != nil {
		tc.SetCreatedAt(*u)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransferCreate) SetUpdatedAt(u uint32) *TransferCreate {
	tc.mutation.SetUpdatedAt(u)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableUpdatedAt(u *uint32) *TransferCreate {
	if u != nil {
		tc.SetUpdatedAt(*u)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TransferCreate) SetDeletedAt(u uint32) *TransferCreate {
	tc.mutation.SetDeletedAt(u)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableDeletedAt(u *uint32) *TransferCreate {
	if u != nil {
		tc.SetDeletedAt(*u)
	}
	return tc
}

// SetChainType sets the "chain_type" field.
func (tc *TransferCreate) SetChainType(s string) *TransferCreate {
	tc.mutation.SetChainType(s)
	return tc
}

// SetChainID sets the "chain_id" field.
func (tc *TransferCreate) SetChainID(s string) *TransferCreate {
	tc.mutation.SetChainID(s)
	return tc
}

// SetContract sets the "contract" field.
func (tc *TransferCreate) SetContract(s string) *TransferCreate {
	tc.mutation.SetContract(s)
	return tc
}

// SetTokenType sets the "token_type" field.
func (tc *TransferCreate) SetTokenType(s string) *TransferCreate {
	tc.mutation.SetTokenType(s)
	return tc
}

// SetTokenID sets the "token_id" field.
func (tc *TransferCreate) SetTokenID(s string) *TransferCreate {
	tc.mutation.SetTokenID(s)
	return tc
}

// SetFrom sets the "from" field.
func (tc *TransferCreate) SetFrom(s string) *TransferCreate {
	tc.mutation.SetFrom(s)
	return tc
}

// SetTo sets the "to" field.
func (tc *TransferCreate) SetTo(s string) *TransferCreate {
	tc.mutation.SetTo(s)
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TransferCreate) SetAmount(s string) *TransferCreate {
	tc.mutation.SetAmount(s)
	return tc
}

// SetBlockNumber sets the "block_number" field.
func (tc *TransferCreate) SetBlockNumber(u uint64) *TransferCreate {
	tc.mutation.SetBlockNumber(u)
	return tc
}

// SetTxHash sets the "tx_hash" field.
func (tc *TransferCreate) SetTxHash(s string) *TransferCreate {
	tc.mutation.SetTxHash(s)
	return tc
}

// SetBlockHash sets the "block_hash" field.
func (tc *TransferCreate) SetBlockHash(s string) *TransferCreate {
	tc.mutation.SetBlockHash(s)
	return tc
}

// SetTxTime sets the "tx_time" field.
func (tc *TransferCreate) SetTxTime(u uint64) *TransferCreate {
	tc.mutation.SetTxTime(u)
	return tc
}

// SetNillableTxTime sets the "tx_time" field if the given value is not nil.
func (tc *TransferCreate) SetNillableTxTime(u *uint64) *TransferCreate {
	if u != nil {
		tc.SetTxTime(*u)
	}
	return tc
}

// SetLogIndex sets the "log_index" field.
func (tc *TransferCreate) SetLogIndex(u uint32) *TransferCreate {
	tc.mutation.SetLogIndex(u)
	return tc
}

// SetNillableLogIndex sets the "log_index" field if the given value is not nil.
func (tc *TransferCreate) SetNillableLogIndex(u *uint32) *TransferCreate {
	if u != nil {
		tc.SetLogIndex(*u)
	}
	return tc
}

// SetRemark sets the "remark" field.
func (tc *TransferCreate) SetRemark(s string) *TransferCreate {
	tc.mutation.SetRemark(s)
	return tc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tc *TransferCreate) SetNillableRemark(s *string) *TransferCreate {
	if s != nil {
		tc.SetRemark(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransferCreate) SetID(u uint32) *TransferCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TransferMutation object of the builder.
func (tc *TransferCreate) Mutation() *TransferMutation {
	return tc.mutation
}

// Save creates the Transfer in the database.
func (tc *TransferCreate) Save(ctx context.Context) (*Transfer, error) {
	var (
		err  error
		node *Transfer
	)
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transfer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransferMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransferCreate) SaveX(ctx context.Context) *Transfer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransferCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransferCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransferCreate) defaults() error {
	if _, ok := tc.mutation.EntID(); !ok {
		if transfer.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized transfer.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := transfer.DefaultEntID()
		tc.mutation.SetEntID(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if transfer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized transfer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := transfer.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if transfer.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transfer.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transfer.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		if transfer.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized transfer.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := transfer.DefaultDeletedAt()
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.LogIndex(); !ok {
		v := transfer.DefaultLogIndex
		tc.mutation.SetLogIndex(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransferCreate) check() error {
	if _, ok := tc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Transfer.ent_id"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transfer.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Transfer.updated_at"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Transfer.deleted_at"`)}
	}
	if _, ok := tc.mutation.ChainType(); !ok {
		return &ValidationError{Name: "chain_type", err: errors.New(`ent: missing required field "Transfer.chain_type"`)}
	}
	if _, ok := tc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Transfer.chain_id"`)}
	}
	if _, ok := tc.mutation.Contract(); !ok {
		return &ValidationError{Name: "contract", err: errors.New(`ent: missing required field "Transfer.contract"`)}
	}
	if v, ok := tc.mutation.Contract(); ok {
		if err := transfer.ContractValidator(v); err != nil {
			return &ValidationError{Name: "contract", err: fmt.Errorf(`ent: validator failed for field "Transfer.contract": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "Transfer.token_type"`)}
	}
	if _, ok := tc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "Transfer.token_id"`)}
	}
	if _, ok := tc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "Transfer.from"`)}
	}
	if v, ok := tc.mutation.From(); ok {
		if err := transfer.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Transfer.from": %w`, err)}
		}
	}
	if _, ok := tc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "Transfer.to"`)}
	}
	if v, ok := tc.mutation.To(); ok {
		if err := transfer.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Transfer.to": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transfer.amount"`)}
	}
	if _, ok := tc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "Transfer.block_number"`)}
	}
	if _, ok := tc.mutation.TxHash(); !ok {
		return &ValidationError{Name: "tx_hash", err: errors.New(`ent: missing required field "Transfer.tx_hash"`)}
	}
	if _, ok := tc.mutation.BlockHash(); !ok {
		return &ValidationError{Name: "block_hash", err: errors.New(`ent: missing required field "Transfer.block_hash"`)}
	}
	if _, ok := tc.mutation.LogIndex(); !ok {
		return &ValidationError{Name: "log_index", err: errors.New(`ent: missing required field "Transfer.log_index"`)}
	}
	return nil
}

func (tc *TransferCreate) sqlSave(ctx context.Context) (*Transfer, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (tc *TransferCreate) createSpec() (*Transfer, *sqlgraph.CreateSpec) {
	var (
		_node = &Transfer{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transfer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transfer.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := tc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := tc.mutation.Contract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldContract,
		})
		_node.Contract = value
	}
	if value, ok := tc.mutation.TokenType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTokenType,
		})
		_node.TokenType = value
	}
	if value, ok := tc.mutation.TokenID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTokenID,
		})
		_node.TokenID = value
	}
	if value, ok := tc.mutation.From(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldFrom,
		})
		_node.From = value
	}
	if value, ok := tc.mutation.To(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTo,
		})
		_node.To = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := tc.mutation.BlockNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldBlockNumber,
		})
		_node.BlockNumber = value
	}
	if value, ok := tc.mutation.TxHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTxHash,
		})
		_node.TxHash = value
	}
	if value, ok := tc.mutation.BlockHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldBlockHash,
		})
		_node.BlockHash = value
	}
	if value, ok := tc.mutation.TxTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldTxTime,
		})
		_node.TxTime = value
	}
	if value, ok := tc.mutation.LogIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldLogIndex,
		})
		_node.LogIndex = value
	}
	if value, ok := tc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfer.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tc *TransferCreate) OnConflict(opts ...sql.ConflictOption) *TransferUpsertOne {
	tc.conflict = opts
	return &TransferUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TransferCreate) OnConflictColumns(columns ...string) *TransferUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TransferUpsertOne{
		create: tc,
	}
}

type (
	// TransferUpsertOne is the builder for "upsert"-ing
	//  one Transfer node.
	TransferUpsertOne struct {
		create *TransferCreate
	}

	// TransferUpsert is the "OnConflict" setter.
	TransferUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *TransferUpsert) SetEntID(v uuid.UUID) *TransferUpsert {
	u.Set(transfer.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TransferUpsert) UpdateEntID() *TransferUpsert {
	u.SetExcluded(transfer.FieldEntID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TransferUpsert) SetCreatedAt(v uint32) *TransferUpsert {
	u.Set(transfer.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransferUpsert) UpdateCreatedAt() *TransferUpsert {
	u.SetExcluded(transfer.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransferUpsert) AddCreatedAt(v uint32) *TransferUpsert {
	u.Add(transfer.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferUpsert) SetUpdatedAt(v uint32) *TransferUpsert {
	u.Set(transfer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferUpsert) UpdateUpdatedAt() *TransferUpsert {
	u.SetExcluded(transfer.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransferUpsert) AddUpdatedAt(v uint32) *TransferUpsert {
	u.Add(transfer.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferUpsert) SetDeletedAt(v uint32) *TransferUpsert {
	u.Set(transfer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferUpsert) UpdateDeletedAt() *TransferUpsert {
	u.SetExcluded(transfer.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransferUpsert) AddDeletedAt(v uint32) *TransferUpsert {
	u.Add(transfer.FieldDeletedAt, v)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *TransferUpsert) SetChainType(v string) *TransferUpsert {
	u.Set(transfer.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TransferUpsert) UpdateChainType() *TransferUpsert {
	u.SetExcluded(transfer.FieldChainType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *TransferUpsert) SetChainID(v string) *TransferUpsert {
	u.Set(transfer.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TransferUpsert) UpdateChainID() *TransferUpsert {
	u.SetExcluded(transfer.FieldChainID)
	return u
}

// SetContract sets the "contract" field.
func (u *TransferUpsert) SetContract(v string) *TransferUpsert {
	u.Set(transfer.FieldContract, v)
	return u
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TransferUpsert) UpdateContract() *TransferUpsert {
	u.SetExcluded(transfer.FieldContract)
	return u
}

// SetTokenType sets the "token_type" field.
func (u *TransferUpsert) SetTokenType(v string) *TransferUpsert {
	u.Set(transfer.FieldTokenType, v)
	return u
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TransferUpsert) UpdateTokenType() *TransferUpsert {
	u.SetExcluded(transfer.FieldTokenType)
	return u
}

// SetTokenID sets the "token_id" field.
func (u *TransferUpsert) SetTokenID(v string) *TransferUpsert {
	u.Set(transfer.FieldTokenID, v)
	return u
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TransferUpsert) UpdateTokenID() *TransferUpsert {
	u.SetExcluded(transfer.FieldTokenID)
	return u
}

// SetFrom sets the "from" field.
func (u *TransferUpsert) SetFrom(v string) *TransferUpsert {
	u.Set(transfer.FieldFrom, v)
	return u
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *TransferUpsert) UpdateFrom() *TransferUpsert {
	u.SetExcluded(transfer.FieldFrom)
	return u
}

// SetTo sets the "to" field.
func (u *TransferUpsert) SetTo(v string) *TransferUpsert {
	u.Set(transfer.FieldTo, v)
	return u
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *TransferUpsert) UpdateTo() *TransferUpsert {
	u.SetExcluded(transfer.FieldTo)
	return u
}

// SetAmount sets the "amount" field.
func (u *TransferUpsert) SetAmount(v string) *TransferUpsert {
	u.Set(transfer.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferUpsert) UpdateAmount() *TransferUpsert {
	u.SetExcluded(transfer.FieldAmount)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *TransferUpsert) SetBlockNumber(v uint64) *TransferUpsert {
	u.Set(transfer.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *TransferUpsert) UpdateBlockNumber() *TransferUpsert {
	u.SetExcluded(transfer.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "block_number" field.
func (u *TransferUpsert) AddBlockNumber(v uint64) *TransferUpsert {
	u.Add(transfer.FieldBlockNumber, v)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *TransferUpsert) SetTxHash(v string) *TransferUpsert {
	u.Set(transfer.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *TransferUpsert) UpdateTxHash() *TransferUpsert {
	u.SetExcluded(transfer.FieldTxHash)
	return u
}

// SetBlockHash sets the "block_hash" field.
func (u *TransferUpsert) SetBlockHash(v string) *TransferUpsert {
	u.Set(transfer.FieldBlockHash, v)
	return u
}

// UpdateBlockHash sets the "block_hash" field to the value that was provided on create.
func (u *TransferUpsert) UpdateBlockHash() *TransferUpsert {
	u.SetExcluded(transfer.FieldBlockHash)
	return u
}

// SetTxTime sets the "tx_time" field.
func (u *TransferUpsert) SetTxTime(v uint64) *TransferUpsert {
	u.Set(transfer.FieldTxTime, v)
	return u
}

// UpdateTxTime sets the "tx_time" field to the value that was provided on create.
func (u *TransferUpsert) UpdateTxTime() *TransferUpsert {
	u.SetExcluded(transfer.FieldTxTime)
	return u
}

// AddTxTime adds v to the "tx_time" field.
func (u *TransferUpsert) AddTxTime(v uint64) *TransferUpsert {
	u.Add(transfer.FieldTxTime, v)
	return u
}

// ClearTxTime clears the value of the "tx_time" field.
func (u *TransferUpsert) ClearTxTime() *TransferUpsert {
	u.SetNull(transfer.FieldTxTime)
	return u
}

// SetLogIndex sets the "log_index" field.
func (u *TransferUpsert) SetLogIndex(v uint32) *TransferUpsert {
	u.Set(transfer.FieldLogIndex, v)
	return u
}

// UpdateLogIndex sets the "log_index" field to the value that was provided on create.
func (u *TransferUpsert) UpdateLogIndex() *TransferUpsert {
	u.SetExcluded(transfer.FieldLogIndex)
	return u
}

// AddLogIndex adds v to the "log_index" field.
func (u *TransferUpsert) AddLogIndex(v uint32) *TransferUpsert {
	u.Add(transfer.FieldLogIndex, v)
	return u
}

// SetRemark sets the "remark" field.
func (u *TransferUpsert) SetRemark(v string) *TransferUpsert {
	u.Set(transfer.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TransferUpsert) UpdateRemark() *TransferUpsert {
	u.SetExcluded(transfer.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TransferUpsert) ClearRemark() *TransferUpsert {
	u.SetNull(transfer.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transfer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferUpsertOne) UpdateNewValues() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transfer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransferUpsertOne) Ignore() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferUpsertOne) DoNothing() *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferCreate.OnConflict
// documentation for more info.
func (u *TransferUpsertOne) Update(set func(*TransferUpsert)) *TransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TransferUpsertOne) SetEntID(v uuid.UUID) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateEntID() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TransferUpsertOne) SetCreatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransferUpsertOne) AddCreatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateCreatedAt() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferUpsertOne) SetUpdatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransferUpsertOne) AddUpdatedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateUpdatedAt() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferUpsertOne) SetDeletedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransferUpsertOne) AddDeletedAt(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateDeletedAt() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *TransferUpsertOne) SetChainType(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateChainType() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *TransferUpsertOne) SetChainID(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateChainID() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateChainID()
	})
}

// SetContract sets the "contract" field.
func (u *TransferUpsertOne) SetContract(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateContract() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateContract()
	})
}

// SetTokenType sets the "token_type" field.
func (u *TransferUpsertOne) SetTokenType(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateTokenType() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTokenType()
	})
}

// SetTokenID sets the "token_id" field.
func (u *TransferUpsertOne) SetTokenID(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateTokenID() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTokenID()
	})
}

// SetFrom sets the "from" field.
func (u *TransferUpsertOne) SetFrom(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateFrom() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateFrom()
	})
}

// SetTo sets the "to" field.
func (u *TransferUpsertOne) SetTo(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetTo(v)
	})
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateTo() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTo()
	})
}

// SetAmount sets the "amount" field.
func (u *TransferUpsertOne) SetAmount(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateAmount() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateAmount()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *TransferUpsertOne) SetBlockNumber(v uint64) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *TransferUpsertOne) AddBlockNumber(v uint64) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateBlockNumber() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *TransferUpsertOne) SetTxHash(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateTxHash() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockHash sets the "block_hash" field.
func (u *TransferUpsertOne) SetBlockHash(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetBlockHash(v)
	})
}

// UpdateBlockHash sets the "block_hash" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateBlockHash() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateBlockHash()
	})
}

// SetTxTime sets the "tx_time" field.
func (u *TransferUpsertOne) SetTxTime(v uint64) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetTxTime(v)
	})
}

// AddTxTime adds v to the "tx_time" field.
func (u *TransferUpsertOne) AddTxTime(v uint64) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddTxTime(v)
	})
}

// UpdateTxTime sets the "tx_time" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateTxTime() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTxTime()
	})
}

// ClearTxTime clears the value of the "tx_time" field.
func (u *TransferUpsertOne) ClearTxTime() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.ClearTxTime()
	})
}

// SetLogIndex sets the "log_index" field.
func (u *TransferUpsertOne) SetLogIndex(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetLogIndex(v)
	})
}

// AddLogIndex adds v to the "log_index" field.
func (u *TransferUpsertOne) AddLogIndex(v uint32) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.AddLogIndex(v)
	})
}

// UpdateLogIndex sets the "log_index" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateLogIndex() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateLogIndex()
	})
}

// SetRemark sets the "remark" field.
func (u *TransferUpsertOne) SetRemark(v string) *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TransferUpsertOne) UpdateRemark() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TransferUpsertOne) ClearRemark() *TransferUpsertOne {
	return u.Update(func(s *TransferUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *TransferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransferUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransferUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransferCreateBulk is the builder for creating many Transfer entities in bulk.
type TransferCreateBulk struct {
	config
	builders []*TransferCreate
	conflict []sql.ConflictOption
}

// Save creates the Transfer entities in the database.
func (tcb *TransferCreateBulk) Save(ctx context.Context) ([]*Transfer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transfer, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransferCreateBulk) SaveX(ctx context.Context) []*Transfer {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransferCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransferCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transfer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransferUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (tcb *TransferCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransferUpsertBulk {
	tcb.conflict = opts
	return &TransferUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TransferCreateBulk) OnConflictColumns(columns ...string) *TransferUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TransferUpsertBulk{
		create: tcb,
	}
}

// TransferUpsertBulk is the builder for "upsert"-ing
// a bulk of Transfer nodes.
type TransferUpsertBulk struct {
	create *TransferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transfer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransferUpsertBulk) UpdateNewValues() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transfer.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transfer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransferUpsertBulk) Ignore() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransferUpsertBulk) DoNothing() *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransferCreateBulk.OnConflict
// documentation for more info.
func (u *TransferUpsertBulk) Update(set func(*TransferUpsert)) *TransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *TransferUpsertBulk) SetEntID(v uuid.UUID) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateEntID() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateEntID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TransferUpsertBulk) SetCreatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransferUpsertBulk) AddCreatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateCreatedAt() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransferUpsertBulk) SetUpdatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransferUpsertBulk) AddUpdatedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateUpdatedAt() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransferUpsertBulk) SetDeletedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransferUpsertBulk) AddDeletedAt(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateDeletedAt() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChainType sets the "chain_type" field.
func (u *TransferUpsertBulk) SetChainType(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateChainType() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateChainType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *TransferUpsertBulk) SetChainID(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateChainID() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateChainID()
	})
}

// SetContract sets the "contract" field.
func (u *TransferUpsertBulk) SetContract(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateContract() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateContract()
	})
}

// SetTokenType sets the "token_type" field.
func (u *TransferUpsertBulk) SetTokenType(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateTokenType() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTokenType()
	})
}

// SetTokenID sets the "token_id" field.
func (u *TransferUpsertBulk) SetTokenID(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateTokenID() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTokenID()
	})
}

// SetFrom sets the "from" field.
func (u *TransferUpsertBulk) SetFrom(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateFrom() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateFrom()
	})
}

// SetTo sets the "to" field.
func (u *TransferUpsertBulk) SetTo(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetTo(v)
	})
}

// UpdateTo sets the "to" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateTo() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTo()
	})
}

// SetAmount sets the "amount" field.
func (u *TransferUpsertBulk) SetAmount(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateAmount() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateAmount()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *TransferUpsertBulk) SetBlockNumber(v uint64) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "block_number" field.
func (u *TransferUpsertBulk) AddBlockNumber(v uint64) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateBlockNumber() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *TransferUpsertBulk) SetTxHash(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateTxHash() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockHash sets the "block_hash" field.
func (u *TransferUpsertBulk) SetBlockHash(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetBlockHash(v)
	})
}

// UpdateBlockHash sets the "block_hash" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateBlockHash() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateBlockHash()
	})
}

// SetTxTime sets the "tx_time" field.
func (u *TransferUpsertBulk) SetTxTime(v uint64) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetTxTime(v)
	})
}

// AddTxTime adds v to the "tx_time" field.
func (u *TransferUpsertBulk) AddTxTime(v uint64) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddTxTime(v)
	})
}

// UpdateTxTime sets the "tx_time" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateTxTime() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateTxTime()
	})
}

// ClearTxTime clears the value of the "tx_time" field.
func (u *TransferUpsertBulk) ClearTxTime() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.ClearTxTime()
	})
}

// SetLogIndex sets the "log_index" field.
func (u *TransferUpsertBulk) SetLogIndex(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetLogIndex(v)
	})
}

// AddLogIndex adds v to the "log_index" field.
func (u *TransferUpsertBulk) AddLogIndex(v uint32) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.AddLogIndex(v)
	})
}

// UpdateLogIndex sets the "log_index" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateLogIndex() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateLogIndex()
	})
}

// SetRemark sets the "remark" field.
func (u *TransferUpsertBulk) SetRemark(v string) *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TransferUpsertBulk) UpdateRemark() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TransferUpsertBulk) ClearRemark() *TransferUpsertBulk {
	return u.Update(func(s *TransferUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *TransferUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TransferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
