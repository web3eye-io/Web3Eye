// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: web3eye/ranker/v1/contract/contract.proto

package contract

import (
	context "context"
	contract "github.com/web3eye-io/Web3Eye/proto/web3eye/nftmeta/v1/contract"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_GetContract_FullMethodName          = "/ranker.v1.contract.Manager/GetContract"
	Manager_GetContractOnly_FullMethodName      = "/ranker.v1.contract.Manager/GetContractOnly"
	Manager_GetContracts_FullMethodName         = "/ranker.v1.contract.Manager/GetContracts"
	Manager_GetContractAndTokens_FullMethodName = "/ranker.v1.contract.Manager/GetContractAndTokens"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	GetContract(ctx context.Context, in *contract.GetContractRequest, opts ...grpc.CallOption) (*contract.GetContractResponse, error)
	GetContractOnly(ctx context.Context, in *contract.GetContractOnlyRequest, opts ...grpc.CallOption) (*contract.GetContractOnlyResponse, error)
	GetContracts(ctx context.Context, in *contract.GetContractsRequest, opts ...grpc.CallOption) (*contract.GetContractsResponse, error)
	GetContractAndTokens(ctx context.Context, in *GetContractAndTokensReq, opts ...grpc.CallOption) (*GetContractAndTokensResp, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) GetContract(ctx context.Context, in *contract.GetContractRequest, opts ...grpc.CallOption) (*contract.GetContractResponse, error) {
	out := new(contract.GetContractResponse)
	err := c.cc.Invoke(ctx, Manager_GetContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetContractOnly(ctx context.Context, in *contract.GetContractOnlyRequest, opts ...grpc.CallOption) (*contract.GetContractOnlyResponse, error) {
	out := new(contract.GetContractOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetContractOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetContracts(ctx context.Context, in *contract.GetContractsRequest, opts ...grpc.CallOption) (*contract.GetContractsResponse, error) {
	out := new(contract.GetContractsResponse)
	err := c.cc.Invoke(ctx, Manager_GetContracts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetContractAndTokens(ctx context.Context, in *GetContractAndTokensReq, opts ...grpc.CallOption) (*GetContractAndTokensResp, error) {
	out := new(GetContractAndTokensResp)
	err := c.cc.Invoke(ctx, Manager_GetContractAndTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	GetContract(context.Context, *contract.GetContractRequest) (*contract.GetContractResponse, error)
	GetContractOnly(context.Context, *contract.GetContractOnlyRequest) (*contract.GetContractOnlyResponse, error)
	GetContracts(context.Context, *contract.GetContractsRequest) (*contract.GetContractsResponse, error)
	GetContractAndTokens(context.Context, *GetContractAndTokensReq) (*GetContractAndTokensResp, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) GetContract(context.Context, *contract.GetContractRequest) (*contract.GetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedManagerServer) GetContractOnly(context.Context, *contract.GetContractOnlyRequest) (*contract.GetContractOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractOnly not implemented")
}
func (UnimplementedManagerServer) GetContracts(context.Context, *contract.GetContractsRequest) (*contract.GetContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContracts not implemented")
}
func (UnimplementedManagerServer) GetContractAndTokens(context.Context, *GetContractAndTokensReq) (*GetContractAndTokensResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractAndTokens not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contract.GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetContract(ctx, req.(*contract.GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetContractOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contract.GetContractOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetContractOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetContractOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetContractOnly(ctx, req.(*contract.GetContractOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contract.GetContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetContracts(ctx, req.(*contract.GetContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetContractAndTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractAndTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetContractAndTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetContractAndTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetContractAndTokens(ctx, req.(*GetContractAndTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ranker.v1.contract.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContract",
			Handler:    _Manager_GetContract_Handler,
		},
		{
			MethodName: "GetContractOnly",
			Handler:    _Manager_GetContractOnly_Handler,
		},
		{
			MethodName: "GetContracts",
			Handler:    _Manager_GetContracts_Handler,
		},
		{
			MethodName: "GetContractAndTokens",
			Handler:    _Manager_GetContractAndTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3eye/ranker/v1/contract/contract.proto",
}
