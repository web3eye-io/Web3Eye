// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: web3eye/nftmeta/v1/block/block.proto

package block

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateBlock_FullMethodName     = "/nftmeta.v1.block.Manager/CreateBlock"
	Manager_CreateBlocks_FullMethodName    = "/nftmeta.v1.block.Manager/CreateBlocks"
	Manager_UpsertBlock_FullMethodName     = "/nftmeta.v1.block.Manager/UpsertBlock"
	Manager_UpdateBlock_FullMethodName     = "/nftmeta.v1.block.Manager/UpdateBlock"
	Manager_GetBlock_FullMethodName        = "/nftmeta.v1.block.Manager/GetBlock"
	Manager_GetBlockOnly_FullMethodName    = "/nftmeta.v1.block.Manager/GetBlockOnly"
	Manager_GetBlocks_FullMethodName       = "/nftmeta.v1.block.Manager/GetBlocks"
	Manager_ExistBlock_FullMethodName      = "/nftmeta.v1.block.Manager/ExistBlock"
	Manager_ExistBlockConds_FullMethodName = "/nftmeta.v1.block.Manager/ExistBlockConds"
	Manager_DeleteBlock_FullMethodName     = "/nftmeta.v1.block.Manager/DeleteBlock"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*CreateBlockResponse, error)
	CreateBlocks(ctx context.Context, in *CreateBlocksRequest, opts ...grpc.CallOption) (*CreateBlocksResponse, error)
	UpsertBlock(ctx context.Context, in *UpsertBlockRequest, opts ...grpc.CallOption) (*UpsertBlockResponse, error)
	UpdateBlock(ctx context.Context, in *UpdateBlockRequest, opts ...grpc.CallOption) (*UpdateBlockResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockOnly(ctx context.Context, in *GetBlockOnlyRequest, opts ...grpc.CallOption) (*GetBlockOnlyResponse, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	ExistBlock(ctx context.Context, in *ExistBlockRequest, opts ...grpc.CallOption) (*ExistBlockResponse, error)
	ExistBlockConds(ctx context.Context, in *ExistBlockCondsRequest, opts ...grpc.CallOption) (*ExistBlockCondsResponse, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*DeleteBlockResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*CreateBlockResponse, error) {
	out := new(CreateBlockResponse)
	err := c.cc.Invoke(ctx, Manager_CreateBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateBlocks(ctx context.Context, in *CreateBlocksRequest, opts ...grpc.CallOption) (*CreateBlocksResponse, error) {
	out := new(CreateBlocksResponse)
	err := c.cc.Invoke(ctx, Manager_CreateBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpsertBlock(ctx context.Context, in *UpsertBlockRequest, opts ...grpc.CallOption) (*UpsertBlockResponse, error) {
	out := new(UpsertBlockResponse)
	err := c.cc.Invoke(ctx, Manager_UpsertBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateBlock(ctx context.Context, in *UpdateBlockRequest, opts ...grpc.CallOption) (*UpdateBlockResponse, error) {
	out := new(UpdateBlockResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, Manager_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetBlockOnly(ctx context.Context, in *GetBlockOnlyRequest, opts ...grpc.CallOption) (*GetBlockOnlyResponse, error) {
	out := new(GetBlockOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetBlockOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, Manager_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistBlock(ctx context.Context, in *ExistBlockRequest, opts ...grpc.CallOption) (*ExistBlockResponse, error) {
	out := new(ExistBlockResponse)
	err := c.cc.Invoke(ctx, Manager_ExistBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistBlockConds(ctx context.Context, in *ExistBlockCondsRequest, opts ...grpc.CallOption) (*ExistBlockCondsResponse, error) {
	out := new(ExistBlockCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistBlockConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*DeleteBlockResponse, error) {
	out := new(DeleteBlockResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateBlock(context.Context, *CreateBlockRequest) (*CreateBlockResponse, error)
	CreateBlocks(context.Context, *CreateBlocksRequest) (*CreateBlocksResponse, error)
	UpsertBlock(context.Context, *UpsertBlockRequest) (*UpsertBlockResponse, error)
	UpdateBlock(context.Context, *UpdateBlockRequest) (*UpdateBlockResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetBlockOnly(context.Context, *GetBlockOnlyRequest) (*GetBlockOnlyResponse, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	ExistBlock(context.Context, *ExistBlockRequest) (*ExistBlockResponse, error)
	ExistBlockConds(context.Context, *ExistBlockCondsRequest) (*ExistBlockCondsResponse, error)
	DeleteBlock(context.Context, *DeleteBlockRequest) (*DeleteBlockResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateBlock(context.Context, *CreateBlockRequest) (*CreateBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (UnimplementedManagerServer) CreateBlocks(context.Context, *CreateBlocksRequest) (*CreateBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlocks not implemented")
}
func (UnimplementedManagerServer) UpsertBlock(context.Context, *UpsertBlockRequest) (*UpsertBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBlock not implemented")
}
func (UnimplementedManagerServer) UpdateBlock(context.Context, *UpdateBlockRequest) (*UpdateBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlock not implemented")
}
func (UnimplementedManagerServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedManagerServer) GetBlockOnly(context.Context, *GetBlockOnlyRequest) (*GetBlockOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockOnly not implemented")
}
func (UnimplementedManagerServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedManagerServer) ExistBlock(context.Context, *ExistBlockRequest) (*ExistBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBlock not implemented")
}
func (UnimplementedManagerServer) ExistBlockConds(context.Context, *ExistBlockCondsRequest) (*ExistBlockCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBlockConds not implemented")
}
func (UnimplementedManagerServer) DeleteBlock(context.Context, *DeleteBlockRequest) (*DeleteBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateBlock(ctx, req.(*CreateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateBlocks(ctx, req.(*CreateBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpsertBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpsertBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpsertBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpsertBlock(ctx, req.(*UpsertBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateBlock(ctx, req.(*UpdateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetBlockOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetBlockOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetBlockOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetBlockOnly(ctx, req.(*GetBlockOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistBlock(ctx, req.(*ExistBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistBlockConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBlockCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistBlockConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistBlockConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistBlockConds(ctx, req.(*ExistBlockCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nftmeta.v1.block.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlock",
			Handler:    _Manager_CreateBlock_Handler,
		},
		{
			MethodName: "CreateBlocks",
			Handler:    _Manager_CreateBlocks_Handler,
		},
		{
			MethodName: "UpsertBlock",
			Handler:    _Manager_UpsertBlock_Handler,
		},
		{
			MethodName: "UpdateBlock",
			Handler:    _Manager_UpdateBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Manager_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockOnly",
			Handler:    _Manager_GetBlockOnly_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Manager_GetBlocks_Handler,
		},
		{
			MethodName: "ExistBlock",
			Handler:    _Manager_ExistBlock_Handler,
		},
		{
			MethodName: "ExistBlockConds",
			Handler:    _Manager_ExistBlockConds_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _Manager_DeleteBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3eye/nftmeta/v1/block/block.proto",
}
