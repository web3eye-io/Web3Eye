// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/predicate"
	"github.com/web3eye-io/Web3Eye/nft-meta/pkg/db/ent/transfer"
)

// TransferUpdate is the builder for updating Transfer entities.
type TransferUpdate struct {
	config
	hooks     []Hook
	mutation  *TransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransferUpdate builder.
func (tu *TransferUpdate) Where(ps ...predicate.Transfer) *TransferUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetEntID sets the "ent_id" field.
func (tu *TransferUpdate) SetEntID(u uuid.UUID) *TransferUpdate {
	tu.mutation.SetEntID(u)
	return tu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableEntID(u *uuid.UUID) *TransferUpdate {
	if u != nil {
		tu.SetEntID(*u)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransferUpdate) SetCreatedAt(u uint32) *TransferUpdate {
	tu.mutation.ResetCreatedAt()
	tu.mutation.SetCreatedAt(u)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableCreatedAt(u *uint32) *TransferUpdate {
	if u != nil {
		tu.SetCreatedAt(*u)
	}
	return tu
}

// AddCreatedAt adds u to the "created_at" field.
func (tu *TransferUpdate) AddCreatedAt(u int32) *TransferUpdate {
	tu.mutation.AddCreatedAt(u)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransferUpdate) SetUpdatedAt(u uint32) *TransferUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(u)
	return tu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tu *TransferUpdate) AddUpdatedAt(u int32) *TransferUpdate {
	tu.mutation.AddUpdatedAt(u)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransferUpdate) SetDeletedAt(u uint32) *TransferUpdate {
	tu.mutation.ResetDeletedAt()
	tu.mutation.SetDeletedAt(u)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableDeletedAt(u *uint32) *TransferUpdate {
	if u != nil {
		tu.SetDeletedAt(*u)
	}
	return tu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tu *TransferUpdate) AddDeletedAt(u int32) *TransferUpdate {
	tu.mutation.AddDeletedAt(u)
	return tu
}

// SetChainType sets the "chain_type" field.
func (tu *TransferUpdate) SetChainType(s string) *TransferUpdate {
	tu.mutation.SetChainType(s)
	return tu
}

// SetChainID sets the "chain_id" field.
func (tu *TransferUpdate) SetChainID(s string) *TransferUpdate {
	tu.mutation.SetChainID(s)
	return tu
}

// SetContract sets the "contract" field.
func (tu *TransferUpdate) SetContract(s string) *TransferUpdate {
	tu.mutation.SetContract(s)
	return tu
}

// SetTokenType sets the "token_type" field.
func (tu *TransferUpdate) SetTokenType(s string) *TransferUpdate {
	tu.mutation.SetTokenType(s)
	return tu
}

// SetTokenID sets the "token_id" field.
func (tu *TransferUpdate) SetTokenID(s string) *TransferUpdate {
	tu.mutation.SetTokenID(s)
	return tu
}

// SetFrom sets the "from" field.
func (tu *TransferUpdate) SetFrom(s string) *TransferUpdate {
	tu.mutation.SetFrom(s)
	return tu
}

// SetTo sets the "to" field.
func (tu *TransferUpdate) SetTo(s string) *TransferUpdate {
	tu.mutation.SetTo(s)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransferUpdate) SetAmount(s string) *TransferUpdate {
	tu.mutation.SetAmount(s)
	return tu
}

// SetBlockNumber sets the "block_number" field.
func (tu *TransferUpdate) SetBlockNumber(u uint64) *TransferUpdate {
	tu.mutation.ResetBlockNumber()
	tu.mutation.SetBlockNumber(u)
	return tu
}

// AddBlockNumber adds u to the "block_number" field.
func (tu *TransferUpdate) AddBlockNumber(u int64) *TransferUpdate {
	tu.mutation.AddBlockNumber(u)
	return tu
}

// SetTxHash sets the "tx_hash" field.
func (tu *TransferUpdate) SetTxHash(s string) *TransferUpdate {
	tu.mutation.SetTxHash(s)
	return tu
}

// SetBlockHash sets the "block_hash" field.
func (tu *TransferUpdate) SetBlockHash(s string) *TransferUpdate {
	tu.mutation.SetBlockHash(s)
	return tu
}

// SetTxTime sets the "tx_time" field.
func (tu *TransferUpdate) SetTxTime(u uint64) *TransferUpdate {
	tu.mutation.ResetTxTime()
	tu.mutation.SetTxTime(u)
	return tu
}

// SetNillableTxTime sets the "tx_time" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableTxTime(u *uint64) *TransferUpdate {
	if u != nil {
		tu.SetTxTime(*u)
	}
	return tu
}

// AddTxTime adds u to the "tx_time" field.
func (tu *TransferUpdate) AddTxTime(u int64) *TransferUpdate {
	tu.mutation.AddTxTime(u)
	return tu
}

// ClearTxTime clears the value of the "tx_time" field.
func (tu *TransferUpdate) ClearTxTime() *TransferUpdate {
	tu.mutation.ClearTxTime()
	return tu
}

// SetRemark sets the "remark" field.
func (tu *TransferUpdate) SetRemark(s string) *TransferUpdate {
	tu.mutation.SetRemark(s)
	return tu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableRemark(s *string) *TransferUpdate {
	if s != nil {
		tu.SetRemark(*s)
	}
	return tu
}

// ClearRemark clears the value of the "remark" field.
func (tu *TransferUpdate) ClearRemark() *TransferUpdate {
	tu.mutation.ClearRemark()
	return tu
}

// Mutation returns the TransferMutation object of the builder.
func (tu *TransferUpdate) Mutation() *TransferMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransferUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransferUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransferUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransferUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransferUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if transfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transfer.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransferUpdate) check() error {
	if v, ok := tu.mutation.Contract(); ok {
		if err := transfer.ContractValidator(v); err != nil {
			return &ValidationError{Name: "contract", err: fmt.Errorf(`ent: validator failed for field "Transfer.contract": %w`, err)}
		}
	}
	if v, ok := tu.mutation.From(); ok {
		if err := transfer.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Transfer.from": %w`, err)}
		}
	}
	if v, ok := tu.mutation.To(); ok {
		if err := transfer.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Transfer.to": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TransferUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransferUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfer.Table,
			Columns: transfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transfer.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldEntID,
		})
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldChainType,
		})
	}
	if value, ok := tu.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldChainID,
		})
	}
	if value, ok := tu.mutation.Contract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldContract,
		})
	}
	if value, ok := tu.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTokenType,
		})
	}
	if value, ok := tu.mutation.TokenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTokenID,
		})
	}
	if value, ok := tu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldFrom,
		})
	}
	if value, ok := tu.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTo,
		})
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldAmount,
		})
	}
	if value, ok := tu.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldBlockNumber,
		})
	}
	if value, ok := tu.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldBlockNumber,
		})
	}
	if value, ok := tu.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTxHash,
		})
	}
	if value, ok := tu.mutation.BlockHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldBlockHash,
		})
	}
	if value, ok := tu.mutation.TxTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldTxTime,
		})
	}
	if value, ok := tu.mutation.AddedTxTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldTxTime,
		})
	}
	if tu.mutation.TxTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: transfer.FieldTxTime,
		})
	}
	if value, ok := tu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldRemark,
		})
	}
	if tu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transfer.FieldRemark,
		})
	}
	_spec.Modifiers = tu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TransferUpdateOne is the builder for updating a single Transfer entity.
type TransferUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (tuo *TransferUpdateOne) SetEntID(u uuid.UUID) *TransferUpdateOne {
	tuo.mutation.SetEntID(u)
	return tuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableEntID(u *uuid.UUID) *TransferUpdateOne {
	if u != nil {
		tuo.SetEntID(*u)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransferUpdateOne) SetCreatedAt(u uint32) *TransferUpdateOne {
	tuo.mutation.ResetCreatedAt()
	tuo.mutation.SetCreatedAt(u)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableCreatedAt(u *uint32) *TransferUpdateOne {
	if u != nil {
		tuo.SetCreatedAt(*u)
	}
	return tuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tuo *TransferUpdateOne) AddCreatedAt(u int32) *TransferUpdateOne {
	tuo.mutation.AddCreatedAt(u)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransferUpdateOne) SetUpdatedAt(u uint32) *TransferUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(u)
	return tuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tuo *TransferUpdateOne) AddUpdatedAt(u int32) *TransferUpdateOne {
	tuo.mutation.AddUpdatedAt(u)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransferUpdateOne) SetDeletedAt(u uint32) *TransferUpdateOne {
	tuo.mutation.ResetDeletedAt()
	tuo.mutation.SetDeletedAt(u)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableDeletedAt(u *uint32) *TransferUpdateOne {
	if u != nil {
		tuo.SetDeletedAt(*u)
	}
	return tuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tuo *TransferUpdateOne) AddDeletedAt(u int32) *TransferUpdateOne {
	tuo.mutation.AddDeletedAt(u)
	return tuo
}

// SetChainType sets the "chain_type" field.
func (tuo *TransferUpdateOne) SetChainType(s string) *TransferUpdateOne {
	tuo.mutation.SetChainType(s)
	return tuo
}

// SetChainID sets the "chain_id" field.
func (tuo *TransferUpdateOne) SetChainID(s string) *TransferUpdateOne {
	tuo.mutation.SetChainID(s)
	return tuo
}

// SetContract sets the "contract" field.
func (tuo *TransferUpdateOne) SetContract(s string) *TransferUpdateOne {
	tuo.mutation.SetContract(s)
	return tuo
}

// SetTokenType sets the "token_type" field.
func (tuo *TransferUpdateOne) SetTokenType(s string) *TransferUpdateOne {
	tuo.mutation.SetTokenType(s)
	return tuo
}

// SetTokenID sets the "token_id" field.
func (tuo *TransferUpdateOne) SetTokenID(s string) *TransferUpdateOne {
	tuo.mutation.SetTokenID(s)
	return tuo
}

// SetFrom sets the "from" field.
func (tuo *TransferUpdateOne) SetFrom(s string) *TransferUpdateOne {
	tuo.mutation.SetFrom(s)
	return tuo
}

// SetTo sets the "to" field.
func (tuo *TransferUpdateOne) SetTo(s string) *TransferUpdateOne {
	tuo.mutation.SetTo(s)
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransferUpdateOne) SetAmount(s string) *TransferUpdateOne {
	tuo.mutation.SetAmount(s)
	return tuo
}

// SetBlockNumber sets the "block_number" field.
func (tuo *TransferUpdateOne) SetBlockNumber(u uint64) *TransferUpdateOne {
	tuo.mutation.ResetBlockNumber()
	tuo.mutation.SetBlockNumber(u)
	return tuo
}

// AddBlockNumber adds u to the "block_number" field.
func (tuo *TransferUpdateOne) AddBlockNumber(u int64) *TransferUpdateOne {
	tuo.mutation.AddBlockNumber(u)
	return tuo
}

// SetTxHash sets the "tx_hash" field.
func (tuo *TransferUpdateOne) SetTxHash(s string) *TransferUpdateOne {
	tuo.mutation.SetTxHash(s)
	return tuo
}

// SetBlockHash sets the "block_hash" field.
func (tuo *TransferUpdateOne) SetBlockHash(s string) *TransferUpdateOne {
	tuo.mutation.SetBlockHash(s)
	return tuo
}

// SetTxTime sets the "tx_time" field.
func (tuo *TransferUpdateOne) SetTxTime(u uint64) *TransferUpdateOne {
	tuo.mutation.ResetTxTime()
	tuo.mutation.SetTxTime(u)
	return tuo
}

// SetNillableTxTime sets the "tx_time" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableTxTime(u *uint64) *TransferUpdateOne {
	if u != nil {
		tuo.SetTxTime(*u)
	}
	return tuo
}

// AddTxTime adds u to the "tx_time" field.
func (tuo *TransferUpdateOne) AddTxTime(u int64) *TransferUpdateOne {
	tuo.mutation.AddTxTime(u)
	return tuo
}

// ClearTxTime clears the value of the "tx_time" field.
func (tuo *TransferUpdateOne) ClearTxTime() *TransferUpdateOne {
	tuo.mutation.ClearTxTime()
	return tuo
}

// SetRemark sets the "remark" field.
func (tuo *TransferUpdateOne) SetRemark(s string) *TransferUpdateOne {
	tuo.mutation.SetRemark(s)
	return tuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableRemark(s *string) *TransferUpdateOne {
	if s != nil {
		tuo.SetRemark(*s)
	}
	return tuo
}

// ClearRemark clears the value of the "remark" field.
func (tuo *TransferUpdateOne) ClearRemark() *TransferUpdateOne {
	tuo.mutation.ClearRemark()
	return tuo
}

// Mutation returns the TransferMutation object of the builder.
func (tuo *TransferUpdateOne) Mutation() *TransferMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransferUpdateOne) Select(field string, fields ...string) *TransferUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transfer entity.
func (tuo *TransferUpdateOne) Save(ctx context.Context) (*Transfer, error) {
	var (
		err  error
		node *Transfer
	)
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transfer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransferMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransferUpdateOne) SaveX(ctx context.Context) *Transfer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransferUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransferUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransferUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if transfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transfer.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransferUpdateOne) check() error {
	if v, ok := tuo.mutation.Contract(); ok {
		if err := transfer.ContractValidator(v); err != nil {
			return &ValidationError{Name: "contract", err: fmt.Errorf(`ent: validator failed for field "Transfer.contract": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.From(); ok {
		if err := transfer.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Transfer.from": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.To(); ok {
		if err := transfer.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Transfer.to": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TransferUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransferUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TransferUpdateOne) sqlSave(ctx context.Context) (_node *Transfer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transfer.Table,
			Columns: transfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transfer.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfer.FieldID)
		for _, f := range fields {
			if !transfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: transfer.FieldEntID,
		})
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transfer.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldChainType,
		})
	}
	if value, ok := tuo.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldChainID,
		})
	}
	if value, ok := tuo.mutation.Contract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldContract,
		})
	}
	if value, ok := tuo.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTokenType,
		})
	}
	if value, ok := tuo.mutation.TokenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTokenID,
		})
	}
	if value, ok := tuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldFrom,
		})
	}
	if value, ok := tuo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTo,
		})
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldAmount,
		})
	}
	if value, ok := tuo.mutation.BlockNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldBlockNumber,
		})
	}
	if value, ok := tuo.mutation.AddedBlockNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldBlockNumber,
		})
	}
	if value, ok := tuo.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldTxHash,
		})
	}
	if value, ok := tuo.mutation.BlockHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldBlockHash,
		})
	}
	if value, ok := tuo.mutation.TxTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldTxTime,
		})
	}
	if value, ok := tuo.mutation.AddedTxTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transfer.FieldTxTime,
		})
	}
	if tuo.mutation.TxTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: transfer.FieldTxTime,
		})
	}
	if value, ok := tuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transfer.FieldRemark,
		})
	}
	if tuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transfer.FieldRemark,
		})
	}
	_spec.Modifiers = tuo.modifiers
	_node = &Transfer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
